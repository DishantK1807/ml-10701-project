Coling 2008: Companion volume – Posters and Demonstrations, pages 107–110
Manchester, August 2008
 
Comparative Evaluation of Arabic Language Morphological         
Analysers and  Stemmers  
Majdi Sawalha  
School of Computing, 
University of Leeds, 
Leeds LS2 9JT, UK. 
sawalha@comp.leeds.ac.uk 
Eric Atwell 
School of Computing, 
University of Leeds, 
Leeds LS2 9JT, UK. 
eric@comp.leeds.ac.uk 
Abstract   
Arabic morphological analysers and 
stemming algorithms have become a 
popular area of research. Many 
computational linguists have designed 
and developed algorithms to solve the 
problem of morphology and stemming. 
Each researcher proposed his own gold 
standard, testing methodology and 
accuracy measurements to test and 
compute the accuracy of his algorithm. 
Therefore, we cannot make comparisons 
between these algorithms. In this paper 
we have accomplished two tasks. First, 
we proposed four different fair and 
precise accuracy measurements and two 
1000-word gold standards taken from the 
Holy Qur’an and from the Corpus of 
Contemporary Arabic. Second, we 
combined the results from the 
morphological analysers and stemming 
algorithms by voting after running them 
on the sample documents. The evalua-
tion of the algorithms shows that Arabic 
morphology is still a challenge.  
 
1 Three
Stemming Algorithms 
 
We selected three stemming algorithms for 
which we had ready access to the implementation 
and/or results. 
Shereen Khoja Stemmer : We obtained a Java 
version of Shereen Khoja’s stemmer 
(Khoja,1999). Khoja’s stemmer removes the 
longest suffix and the longest prefix. It then 
matches the remaining word with verbal and 
                                                 
  © 2008. Licensed under the Creative Commons At-
tribution-Noncommercial-Share Alike 3.0 Unported 
license (http://creativecommons.org/licenses/by-nc-
sa/3.0/). Some rights reserved. 
1  Tim Buckwalter web site: http://www.qamus.org 
noun patterns, to extract the root. The stemmer 
makes use of several linguistic data files such as 
a list of all diacritic characters, punctuation char-
acters, definite articles, and 168 stop words (Lar-
key & Connell 2001).  
Tim Buckwalter Morphological analyzer:  
Tim Buckwalter developed a morphological ana-
lyzer for Arabic. Buckwalter compiled a single 
lexicon of all prefixes and a corresponding uni-
fied lexicon for suffixes instead of compiling 
numerous lexicons of prefixes and suffix mor-
phemes. He included short vowels and diacritics 
in the lexicons1. 
Tri-literal Root Extraction Algorithm : Al-
Shalabi, Kanaan and Al-Serhan developed a root 
extraction algorithm which does not use any dic-
tionary. It depends on assigning weights for a 
word’s letters multiplied by the letter’s position, 
Consonants were assigned a weight of zero and 
different weights were assigned to the letters 
grouped in the word “afii62760afii62827afii62832afii62823afii62829afii62821afii62766afii62817afii62754afii62784” where all affixes 
are formed by combinations of these letters. The 
algorithm selects the letters with the lowest 
weights as root letters (Al-Shalabi et al, 2003). 
 
2 Our
Approach: Reuse Others’ Work 
 
The reuse of existing components is an estab-
lished principle in software engineering. We pro-
cured results from several candidate systems, and 
then developed a program to allow “voting” on 
the analysis of each word: for each word, exam-
ine the set of candidate analyses. Where all sys-
tems were in agreement, the common analysis is 
copied; but where contributing systems disagree 
on the analysis; take the “majority vote”, the 
analysis given by most systems. If there is a tie, 
take the result produced by the system with the 
highest accuracy (Atwell & Roberts, 2007). 
 
3 Experiments
and Results 
Experiments are done by executing the three 
stemming algorithms, discussed above, on a ran-
107
 
domly selected chapter number 29 of the Qur’an 
“Souraht Al-Ankaboot” “The Spider” in Eng 
lish see figure 1; and a newspaper text taken 
from the Corpus of Contemporary Arabic devel-
oped at the University of Leeds, UK. We se-
lected the test document from the politics, sports 
and economics section, taken from newspaper 
articles, see figure 2 (Al-Sulaiti & Atwell, 2006). 
Each test document contains about 1000 words.  
We manually extracted the roots of the test 
documents’ words to compare results from dif-
ferent stemming systems. Roots extracted have 
been checked by Arabic Language scholars who 
are experts in the Arabic Language. 
     Table 1 shows a detailed analysis been done 
for the sample test documents, the Qur’an corpus 
as one unit, and a daily newspaper of contempo-
rary Arabic test document, taken from Al-Rai   
  
Figure 1: Sample from Gold Standard first 
document taken from Chapter 29 of the Qur’an. 
   daily newspaper published in Jordan. The 
analysis also shows that function words such as 
“afii62833afii62808” “fi” “in”, “afii62825afii62820” “min” “from”, “afii62830afii62818afii62802” 
“Ala” “on” and “afii64184ا” “Allah” “GOD” are the 
most frequent words in any Arabic text. On the 
other hand, non functional words with high fre-
quency such as “تafii62760afii62803afii62820afii62760afii62772afii62817ا” “Al-Jami’at” “Uni-
versities” and “afii62767afii62831afii62829afii62815afii62817ا” “Al-Kuwait” “Kuwait” 
gives a general idea about the main topic of the 
article. 
     Simple tokenization is applied for the text of 
the gold standard documents. This will ensure 
that test documents can be used to test any 
stemming algorithm smoothly and correctly.  
 
4     Four Accuracy measurements 
In order to fairly compare between different 
stemming algorithms we applied four different 
 
 
Figure 2: Sample from Gold Standard document 
taken from the Corpus of Contemporary Arabic. 
Table 1: Summary of detailed analysis. 
 Qur’an Corpus Gold Standard 
First Document  
Chapter 29 of 
the Qur’an 
Gold Standard    
Second Document 
“Corpus of Con-
temporary Arabic” 
Al-Rai daily 
Newspaper Test 
Document 
Total  
number of 
Tokens 
77,789 987 1005 977 
Word Types 19,278 616 710 678 
Top 10 To-
kens 
Token Freq. Token Freq. Token Freq. Token Freq. 
1 afii62833 afii62808 ِ   1179 afii62833 afii62808 ِ 21 afii62833afii62808 35 afii62833afii62808 39 
2 afii62825 afii62820 ِ 872  afii62828 afii62818afii62817اِafii62884   17 afii62825afii62820 21 afii62825afii62820 16 
3 afii62760 afii62820 َ 832 afii62825 afii62820 ِ 14 afii62830afii62818afii62802 12 afii62830afii62818afii62802 13 
4  afii62825afii62831 afii62781 afii62817اَ ِafii62884  808  afii62828 afii62818afii62817اُafii62884   12 afii62833afii62766afii62817ا 12 afii62833afii62766afii62817ا 10 
5 afii62830 afii62818 afii62802 ََ  652 afii62760 afii62820 و ََ 12 afii62767afii62831afii62829afii62815afii62817ا 11 afii62830afii62817إ 9 
6 afii62760 afii62820 و ََ 640 afii62760 afii62817 إ afii62884ِ 12 نأ 10 afii62830afii62824afii62762afii62821afii62817ا 8 
7  ن إafii62884ِ 605  afii62825afii62831 afii62781 afii62817اَ ِafii62884  11 afii57447afii62781ه 10 تafii62760afii62803afii62820afii62760afii62772afii62817ا 8 
8  afii62828 afii62818afii62817اِّ   464 afii62760 afii62820 َ 8 afii62830afii62817إ 8 نأ 7 
9 ن أ َ 499  afii62828 afii62818afii62817اَafii62884   8 مafii62760afii62820ا 8 مafii62841afii62785afii62817ا 7 
10  لafii62760 afii62811َ َ 416 اafii62829 afii62823afii62760 آ  ُ َ 8 afii62825afii62802 7 afii62828afii62766afii62817afii62841afii62771 7 
 afii62782 afii62766 afii62831 ن أ  سafii62760 afii62824afii62817ا  afii62763 afii62785 afii62774 أ  afii62822afii62817اَُْ  َُ  afii62884  َ ََِ       نafii62829 afii62824 afii62766 afii62809 afii62831 afii62760 afii62817  afii62822 ه و afii62760 afii62824 afii62820afii52400 اafii62829 afii62817afii62829 afii62812 afii62831 ن أ اafii62829 آَ َُُْ  ََُْ  afii62884َ   ُ َُ  َ  ُ
  afii62825 afii62821 afii62818 afii62803 afii62832 afii62817 و اafii62829 afii62811 afii62780 afii62790  afii62825afii62831 afii62781 afii62817ا  afii62828 afii62818afii62817ا  afii62825 afii62821 afii62818 afii62803 afii62832 afii62818 afii62808  afii62822 afii62827 afii62818 afii62762 afii62811 afii62825 afii62820  afii62825afii62831 afii62781 afii62817ا afii62760 afii62824 afii62766 afii62808  afii62780 afii62812 afii62817 وafii62884َََََْ   ََُ َ ِafii62884 ُafii62884  afii62884َََََْ َِِْْ  ِ َ ِafii62884  afii62884ََ َََْ
 afii62760 afii62820 ءafii62760 afii62784 afii62760 afii62823afii62829 afii62812 afii62762 afii62785 afii62831 ن أ  تafii62760 afii62758 afii62832 afii62785afii62817ا  نafii62829 afii62818 afii62821 afii62803 afii62831  afii62825afii62831 afii62781 afii62817ا  afii62763 afii62785 afii62774  م أ   afii62825afii62832 afii62761 ذafii62760 afii62815 afii62817ا َ   َ  َ ُِْ َ َِ  َafii62886afii62884  َ َََُْ ِafii62884 َ َِ َْ َ ِِ َْ 
 afii62820   نafii62829 afii62821 afii62815 afii62775 afii62831َ َ ُُْ َ  afii62829 ه و  تafii62753 afii62817  afii62828 afii62818afii62817ا  afii62819 afii62771 أ  ن afii62756 afii62808  afii62828 afii62818afii62817ا ءafii62760 afii62812 afii62817 afii62829 afii62771 afii62782 afii62831  نafii62760 آ afii62825ََُ ٍ  َ ِafii62884  َََ afii62884َِ ِafii62884    َِ  َُْ َ َ  
  afii62833 afii62824 afii62806 afii62817  afii62828 afii62818afii62817ا  ن إ  afii62828 afii62785 afii62809 afii62824 afii62817  afii62780 هafii62760 afii62772 afii62831 afii62760 afii62821 afii62823 afii62756 afii62808  afii62780 هafii62760 afii62771 afii62825 afii62820 و   afii62822afii62832 afii62818 afii62803 afii62817ا  afii62804afii62832 afii62821 afii62785afii62817اafii62882 ََِ َafii62884  afii62884ِ َِِِْ ُِ َُ  َafii62884َِ ََ َ  ََ ُ َِْ ُ ِafii62884  
  afii62822 afii62827 afii62824 afii62802  ن afii62782 afii62809 afii62815 afii62824 afii62817  تafii62760 afii62775 afii62817afii62760 afii62791afii62817ا اafii62829 afii62818 afii62821 afii62802 و اafii62829 afii62824 afii62820afii52400  afii62825afii62831 afii62781 afii62817ا و   afii62825afii62832 afii62821 afii62817afii62760 afii62803 afii62817ا  afii62825 afii62802َُْْ afii62884َafii62886ََُِ  َِ afii62884     ََُِ   َُ َ ِafii62884 َ َ َِ َْ َِ
 afii62758 afii62832 afii62784َafii62886َ afii62760 afii62824 afii62832 afii62790 و و  نafii62829 afii62818 afii62821 afii62803 afii62831 اafii62829 afii62823afii62760 آ ي afii62781 afii62817ا  afii62825 afii62785 afii62774 أ  afii62822 afii62827 afii62824 afii62831 afii62783 afii62772 afii62824 afii62817 و  afii62822 afii62827 afii62765afii62760 َْafii62884 ََ َ ََُْ   ُ َ  ِafii62884 ََْ َ ُْafii62884َِْ َََ ِِْ 
  afii62828 afii62761  afii62816 afii62817  afii62786 afii62832 afii62817 afii62760 afii62820 afii62833 afii62761  ك afii62782 afii62788 afii62766 afii62817  كا afii62780 هafii62760 afii62771 ن إ و afii62760 afii62824 afii62785 afii62774  afii62828 afii62831 afii62780 afii62817ا afii62829 afii62761  نafii62760 afii62785afii62823 afii62756 afii62817اَِِ ََ َْ َ  َِ ِْ َُِ  ََ َ  َِ  ًْ ُ َِِْ ََِ َ ِْ 
 نafii62829 afii62818 afii62821 afii62803 afii62765  afii62822 afii62766afii62824 آ afii62760 afii62821 afii62761 afii62822 afii62815 afii62758 afii62762 afii62823 afii62754 afii62808  afii62822 afii62815 afii62803 afii62771 afii62782 afii62820  afii62833 afii62817 إ afii62760 afii62821 afii62827 afii62803 afii62797 afii62765 afii62760 afii62818 afii62808  afii62822 afii62818 afii62802َ ََُُْْ ُ  َِ ُُafii62886َََُُُِْْ afii62884 َِ َُِْ ُ ٌََِْ   وَ  afii62825afii62831 afii62781 afii62817اَ ِafii62884 
   afii62825afii62832 afii62775 afii62817afii62760 afii62791afii62817ا afii62833 afii62808  afii62822 afii62827 afii62824 afii62818 afii62777 afii62780 afii62824 afii62817  تafii62760 afii62775 afii62817afii62760 afii62791afii62817ا اafii62829 afii62818 afii62821 afii62802 و اafii62829 afii62824 afii62820afii52400َ ِِ afii62884    ُِْafii62884ََُِِْ  َِ afii62884     ََُِ   َُ   
 
afii62764afii62761afii62829afii62771afii62836او afii62764afii62818afii62758afii62784afii62837afii62817 ةafii62782afii62832afii62769afii62820 afii62780afii62766afii62821afii62820 afii62767afii62811و afii62830afii62817إو afii62764afii62821afii62817afii62829afii62803afii62817ا afii62830afii62812afii62762afii62766afii62784  
  afii62764afii62818afii62758afii62784afii62836ا afii57447afii62781ه afii62795afii62803afii62761 afii62833afii62808 afii62764afii62812afii62832afii62821afii62802 afii62819afii62820afii62754afii62765 afii62764afii62809afii62811و لafii62760afii62812afii62821afii62817ا اafii62781ه afii62833afii62808و
 afii62764afii62821afii62817afii62829afii62803afii62818afii62817 جوafii62782afii62765 تafii62760afii62761afii62760afii62766afii62815afii62817ا afii62825afii62820 ةafii62780afii62831afii62780afii62771 afii62764afii62771afii62829afii62820 ةafii62782afii62766afii62808 afii62781afii62824afii62820 تأafii62780afii62761
 afii62763afii62797afii62812afii62817ا afii62819afii62799 afii62833afii62808 afii62782afii62788afii62762afii62817ا ةafii62760afii62832afii62775afii62817 afii62780afii62831afii62780afii62772afii62817ا afii62819afii62815afii62788afii62817ا afii62760هرafii62760afii62762afii62766afii62802afii62760afii62761
 afii62798afii62821afii62824afii62818afii62817 جوafii62782afii62831 تafii62760afii62761afii62760afii62766afii62815afii62817ا afii57447afii62781ه afii62825afii62820 afii62798afii62821afii62823 كafii62760afii62824هو afii62833afii62815afii62831afii62782afii62820afii62836ا
afii62820 afii62833afii62815afii62831afii62782afii62820afii62836ا afii62819afii62769afii62820afii62836ا afii62798afii62821afii62824afii62817ا afii62828afii62809afii62790afii62829afii62761 تafii62760afii62808afii62760afii62812afii62769afii62817او قاafii62782afii62802afii62836ا دafii62780afii62803afii62766
 afii62819afii62757afii62760afii62784و afii62767afii62761رafii62760afii62811 afii62833afii62766afii62817ا ةafii62780afii62831afii62780afii62772afii62817ا afii62764afii62832afii62823afii62829afii62815afii62817ا afii62764afii62831afii62782afii62812afii62817ا afii62833afii62808 ةafii62760afii62832afii62775afii62818afii62817
 مafii62841afii62802afii62838ا afii62819afii62757afii62760afii62784وو تafii62760afii62820afii62829afii62818afii62803afii62821afii62817ا afii62822afii62800afii62823و تafii62841afii62790اafii62829afii62821afii62817او تafii62840afii62760afii62791afii62765afii62840ا
 afii62825afii62820 afii62782afii62788afii62762afii62761 ةafii62782afii62800afii62824afii62817ا afii57447afii62781ه بafii62760afii62775afii62790أ afii62782afii62788afii62762afii62831و afii62764afii62809afii62818afii62766afii62778afii62821afii62817ا afii62828afii62757اafii62783afii62771أ afii62825afii62832afii62761
 نafii62760afii62766afii62832afii62817afii62829afii62761afii62829afii62820زafii62829آ afii62782afii62788afii62761 afii62780afii62831afii62780afii62771 عafii62829afii62823 
 
108
 
accuracy measurements. Each time we ran the 
experiment, a comparison of the results with the 
gold standard was performed.  
The first experiment was done by comparing 
each root extracted using the three stemming al-
gorithms with the roots of words in the gold 
standard. 
 
The second experiment excludes from the words’ 
list stop words. The third experiment compares 
all word-type roots to the gold standard’s roots. 
Finally, word-type roots excluding the stop 
words are compared to the gold standard’s roots. 
Tables   4-7 show the accuracy rates resulting 
from the four different accuracy measurements. 
 
Table 2: Tokens Accuracy of stemming algo-
rithms after testing on Qur’an gold standard  
Number of Tokens including Stop words 
(978 tokens) 
Stemming 
Algorithm 
Errors Fault 
Rate 
Accuracy 
Khoja stemmer 311 31.8% 68.2% 
Tim Buckwalter 
morph. Analyzer 
419 42.8% 57.16% 
Tri-literal Root 
algorithm 
394 40.3% 59.71% 
Ex.1 434 44.4% 55.6% Voting 
algorithm Ex.2 405 41.4% 58.6% 
Number of Tokens excluding  Stop words (554 
tokens) 
Khoja stemmer 209 37.73% 62.27% 
Tim Buckwalter 
morph. Analyzer 
123                 22.2% 77.8% 
Tri-literal Root 
algorithm 
279 50.36% 49.64% 
Ex.1 266 48.0% 52.0% Voting 
algorithm Ex.2 229 41.3% 58.7% 
Table 3: Word type Accuracy of stemming al-
gorithms  after testing on Qur’an gold standard  
Number of Word Types including Stop words 
(616 word types) 
Stemming Al-
gorithm 
Errors Fault 
Rate 
Accuracy 
Khoja stemmer 224 36.36% 63.64% 
Tim Buckwalter 
morph. Analyzer 
267 43.34% 56.66% 
Tri-literal Root 
algorithm 
266 43.18% 56.82% 
Ex.1 242 39.3% 60.7% Voting 
algorithm Ex.2 219 35.6% 64.4% 
Number of Word types excluding  Stop words 
( 451 word types) 
Khoja stemmer 155 34.37% 65.63% 
Tim Buckwalter 
morph. Analyzer 
251 55.65% 44.34% 
Tri-literal Root 
algorithm 
214 47.45% 52.55% 
Ex.1 174 38.6% 61.4% Voting 
algorithm Ex.2 151 33.5% 66.5% 
Table 4: Token Accuracy of stemming algo-
rithms.  Tested on newspaper gold standard 
Number of Tokens including Stop words(1005 
tokens) 
Stemming Al-
gorithm 
Errors Fault 
Rate 
Accuracy 
Khoja stemmer 231 22.99% 77.01% 
Tim Buckwalter 
morph. Analyzer 
596 59.30% 40.70% 
Tri-literal Root 
algorithm 
234 23.28% 76.72% 
Ex.1 303 30.15% 69.85% Voting 
algorithm Ex.2 266 26.47% 73.53% 
Number of Tokens excluding  Stop words (766 
tokens) 
Khoja stemmer 212 27.7% 72.3% 
Tim Buckwalter 
morph. Analyzer 
431 60.70% 39.30% 
Tri-literal Root 
algorithm 
253 35.63% 64.37% 
Ex.1 303 39.56% 60.44% Voting 
algorithm Ex.2 266 34.73% 65.27% 
Table 5: Word type Accuracy of stemming al-
gorithms.  Tested on newspaper gold standard 
Number of Word Types including Stop words 
(710 word types) 
Stemming Al-
gorithm 
Errors Fault 
Rate 
Accuracy 
Khoja stemmer 232 32.68% 67.32% 
Tim Buckwalter 
morph. Analyzer 
431 60.70% 39.30% 
Tri-literal Root 
algorithm 
253 35.63% 64.37% 
Ex.1 248 34.93% 65.07% Voting 
algorithm Ex.2 215 30.28% 69.71% 
Number of Word types excluding  Stop words 
( 640 word types) 
Khoja stemmer 184 28.75% 71.25% 
Tim Buckwalter 
morph. Analyzer 
423 66.09% 33.91% 
Tri-literal Root 
algorithm 
224 35.00% 65.00% 
Ex.1 252 39.4% 60.6% Voting 
algorithm Ex.2 195 30.5% 69.5% 
109
 
Experiments are done for results generated from 
the three stemming algorithms after executing 
them on both gold standard documents.   
      The output analysis of the stemming algo-
rithms is considered as input for the “voting” 
program. The program reads in these files, token-
izes them, and stores the words and the roots ex-
tracted by each stemming algorithm in temporary 
lists to be used by the voting procedures.  
     The temporary lists work as a bag of words 
that contains all the result analysis of the stem-
ming algorithms. Khoja and the tri-literal stem-
ming algorithms generate only one result analy-
sis for each input word, while Tim Buckwalter 
morphological analyzer generates one or more 
result analysis. These roots are ranked in best
first order according to accuracy measurement 
done before. Khoja stemmer results are inserted 
to the list first then the results from tri-literal 
stemming algorithm and finally the results of 
Tim Buckwalter morphological analyzer. 
    After the construction of the lists of all words 
and their roots, a majority voting procedure is 
applied to it to select the most common root 
among the list. If the systems disagree on the 
analysis, the voting algorithm selects “Majority 
Vote” root as the root of the word. If there is a 
tie, where each stemming algorithm generates a 
different root analysis then the voting algorithm 
selects the root by two ways. Firstly, it simply 
selects the root randomly from the list using the 
FreqDist() Python function in experiment 1. 
Secondly, In experiment 2, the algorithm selects 
the root generated from the highest accuracy 
stemming algorithm which is simply placed in 
the first position of the list as the root of the word 
are inserted to the list using the best-first in terms 
of accuracy strategy.  
     After the voting algorithm, the selected root is 
compared to the gold standard. Tables 2-5 show 
the result of the voting algorithm which achieves 
promising accuracy results of slightly better than 
the best stemming algorithm in experiment 2 and 
a similar accuracy rates for the best stemming 
algorithms in experiment 1.  
 
5  Conclusions 
 
In this paper, we compared between three stem-
ming algorithms; Shereen Khoja’s stemmer, Tim 
Buckwalter’s morphological analyzer and the 
Tri-literal root extraction algorithm.  
     Results of the stemming algorithms are com-
pared with the gold standard using four different 
accuracy measurements. The four accuracy 
measurements show the same accuracy rank for 
the stemming algorithms: the Khoja stemmer 
achieves the highest accuracy then the tri-literal 
root extraction algorithm and finally the Buck-
walter morphological analyzer.  
     The voting algorithm achieves about 62% 
average accuracy rate for Qur’an text and about 
70% average accuracy for newspaper text. The 
results show that the stemming algorithms used 
in the experiments work better on newspaper text 
than Quran text, not unexpectedly as they were 
originally designed for stemming newspaper text.  
   All stemming algorithms involved in the ex-
periments agreed and generate correct analysis 
for simple roots that do not require detailed 
analysis. So, more detailed analysis and en-
hancements are recommended as future work. 
   Most stemming algorithms are designed for 
information retrieval systems where accuracy of 
the stemmers is not important issue. On the other 
hand, accuracy is vital for natural language proc-
essing. The accuracy rates show that the best al-
gorithm failed to achieve accuracy rate of more 
than 75%. This proves that more research is re-
quired. We can not rely on such stemming algo-
rithms for doing further research as Part-of-
Speech tagging and then Parsing because errors 
from the stemming algorithms will propagate to 
such systems.  
    Our experiments are limited to the three 
stemming algorithms. Other algorithms are not 
available freely on the web, and we have been 
unable so far to acquire them from the authors. 
We hope Arabic NLP researchers can cooperate 
further in open-source development of resources. 
 
References 
Al-Shalabi, R., Kanaan, G., & Al-Serhan, H. 
(2003, December). New approach for extract-
ing Arabic roots. Paper presented at the Inter-
national Arab Conference on Information 
Technology (ACIT’2003), Egypt. 
Al-Sulaiti, Latifa; Atwell, Eric 2006. The design 
of a corpus of contemporary Arabic. Interna-
tional Journal of Corpus Linguistics, vol. 11, 
pp. 135-171. 2006. 
Atwell, Eric and Roberts, Andy, 2007. CHEAT: 
combinatory hybrid elementary analysis of text 
in: Proceedings of Corpus Linguistics 2007. 
Khoja, Shereen, 1999. Stemming Arabic Text. 
http://zeus.cs.pacificu.edu/shereen/research.htm 
Larkey Leah. S. and Connell Margrate. E. 2001. 
Arabic information retrieval at UMass. In Pro-
ceedings of TREC 2001, Gaithersburg: NIST, 
2001. 
110


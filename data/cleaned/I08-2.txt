1:127	IJCNLP 2008    Third International Joint Conference on Natural Language Processing  Proceedings of the Conference     Organizer Asian Federation of Natural Language Processing Local Host International Institute of Information Technology, India January 7-12 2008 Hyderabad, India 2008 Asian Federation of Natural Language Processing                                                                                                   Hosts/Organizers Asian Federation of Natural Language Processing (AFNLP) International Institute of Information Technology, Hyderabad, India (IIIT-H) Natural Language Processing Association of India (NLPAI) Supporters Yahoo!
2:127	Research & Development, India Department of Information Technology, MCIT, Government of India Information & Communication Technology, Government of Andhra Pradesh Microsoft Research, India Tata Consultancy Services Limited Centre for Development of Advanced Computing Indian School of Business Satyam Computer Service Limited Google India IBM India Defense Research and Development Organization Council for Scientific and Industrial Research Vaakkriti: Sanskrit Tokenizer Aasish Pappu and Ratna Sanyal Indian Institute of Information Technology, Allahabad (U.P.), India {akpappu b03, rsanyal}@iiita.ac.in Abstract Machine Translation has evolved tremendously in the recent time and stood as center of research interest for many computer scientists.
3:127	Developing a Machine Translation system for ancient languages is much more fascinating and challenging task.
4:127	A detailed study of Sanskrit language reveals that its well-structured and finely organized grammar has affinity for automated translation systems.
5:127	This paper provides necessary analysis of Sanskrit Grammar in the perspective of Machine Translation and alsoprovidesoneofthepossiblesolutionfor Samaas Vigraha(Compound Dissolution).
6:127	Keywords: Machine Translation, Sanskrit, Natural Language Parser, Samaas Vigraha, Tokenization 1 Introduction Sanskrit language and its grammar had exterted an emphatic impact on Computer Science and related research areas.
7:127	It has resulted to put in extensive effortsinthefieldofMachineTranslation(hereafterreferred as MT).
8:127	MT of Sanskrit is never an easy task, because of structural vastness of its Grammar.
9:127	Besides, itsstruturalvastnessSanskritGrammariswell organized and least ambigious compared to other natural languages, illustrated by the fact of increasing fascination for this ancient Aryan language.
10:127	Its grammar possesses well organized rules and meta rules to infer those rules, thus proving to be a powerful analogy to context free grammar of a computer language.
11:127	Subsequently, it supports the idea of developing a parser for Sanskrit language, that would be helpful in developing a full-fledged MT system.
12:127	As a part of development of parser, there are other important aspectstobetakencareoff.
13:127	A morphological analyser and a tokenizer are two of the important components that play a vital role in the parser.
14:127	A morphological analyser is used for identification of the base words from their morphonemes, further to understand the semantics of the original text.
15:127	A tokenizer also plays its significant part in a parser, by identifying the group or collection of words, existing as a single and complex word in a sentence.
16:127	Later on, it breaks up the complex word into its constituents in their appropriate forms.
17:127	In Sanskrit, mainly we have two categories of complex words.
18:127	They are  Sandhi  Samaas 1.1 Sandhi and Samaas Sandhi: When two words combine to produce a new word whose point of combination is result of annihilation of case-end of former word and case-begin of latter.
19:127	In short, the resulted new character that has been created at the point of combination is exactly equivalent to the sound produced when those two words are uttered without a pause.
20:127	The inverse procedure to Sandhi-formation is known as Sandhi Wicched.
21:127	On the other hand, when two or more words are combined, based on their semantics then the resulting word is known as Samaas or Compound.
22:127	Unlike 577 Sandhi, the point of combination in Samaas may or maynotbeadeformedintheresultingword.
23:127	Theinverseprocedureofbreak-upofaSamaasisknownas Samaas Vigraha.
24:127	Considering the complexity of this problem, we restricted our focus to Samaas Vigraha or Compound Dissolution(hereafter Compound Dissolution is referred as CD for convenience).
25:127	1.2 Organization of the Paper Initially, we would discuss about the problem of focus and the main objective of this paper in detail.
26:127	Further,alittleoverviewabouttheSanskritgrammar and Knowledge Representation, that are required to understand the underlying concepts of the system.
27:127	Then, we would brief about the existing systems in this areas and the related areas of interest.
28:127	Later on, we would give a detailed description of the architecture of Vaakkriti.
29:127	We would give a detailed analysis of the results of our system and finally, throw some light over our contribution to this research area.We shall conclude with some of drawbacks of our system and the challenges we have faced.
30:127	2 The Problem Semantics being the prime focus, we need to learn the factors that effect the formation of a compound from the set of atomic words.
31:127	The basic problem is identification of factors, by thorough analysis of language structure or with the help of a linguist.
32:127	Especially various examples of Samaas must be extensively observed.
33:127	After identification of factors, we need to find out the appropriate form of Knowledge Representation for the rule-base.
34:127	Here, knowledge being the rules, based on which a particular compound is formed.
35:127	The importance of CD can be clearly understood, during the process of tokenization.
36:127	A well-defined set of rules in Sanskrit can be found in Ashtadyayi, authored by 3rd century grammarian and linguist Panini.
37:127	Ashtadyayi containsrulesofGrammarinaconciseform, distributed over eight chapters.
38:127	Our rule-base system would be based on the work of Kale et.
39:127	al, that has detailed description of Paninian Grammar.
40:127	3 Sanskrit Grammar As we have already mentioned that, it is necessary to know some of the basic concepts of the Sanskrit grammar.
41:127	First, we would give some important definitions of terms that are frequently used in this paper.
42:127	3.1 Important Definitions 3.1.1 Vibhakti(Declension) Sanskrit is a highly inflected language with three grammatical genders (masculine, feminine, neuter) and three numbers (singular, plural, dual).
43:127	It has eightcases: nominative, vocative, accusative, instrumental, dative, ablative, genitive, and locative.
44:127	3.1.2 Dhatupata(Verbal Conjugation) The verbs tenses (a very inexact application of the word, since more distinctions than simply tense are expressed) are organized into four systems (as well as gerunds and infinitives, and such creatures as intensives or frequentatives, desideratives, causatives, and benedictives derived from more basic forms) based on the different stem forms (derived from verbal roots) used in conjugation.
45:127	There are four tense systems:  Present (Present, Imperfect, Imperative, Optative)  Perfect  Aorist  Future (Future, Conditional) 3.2 Factors that effect The list of factors that are involved in a rule are  Part of Speech(hereafter referred as POS)  List of Words(a token must be among a set of words to satisfy a rule)  Case-End  Case-Begin  Declension  Sense(a token with a particular sense is only qualified)  Meaning  Affix 578  Affix Type(Taddita and Kriti)  Number(sng, two, mny)(hereafter we refer number as num)  Gender(mas, fem, neu) The list of actions that act as functions in the consequent of a rule are: setDecl(set the declension case for a specified token)  addBefore(add a string before a specified token)  addAfter(add a string after a specified token)  setNumber(set the number of a token(sng,two,mny))  replace(replace a token with a string related to it) 3.3 Compounds Nominal compounds occur with various structures, however morphologically speaking they are essentially the same.
46:127	Each noun (or adjective) is in its (weak) stem form, with only the final element receiving case inflection.
47:127	Some examples of nominal compounds include: Itaretara Example: rAml#mZBrtf/` A,(RAmaLakshmaNaBaratAH) to rAm, c l#mZ, c Brt, c f/` ,(RAma ca, LakshmaNa ca, Barata ca) Rule: token POS(token,noun)  setDecl(token,nom) addAfter(token,c) Samahaara Example: pAZFpAdO(pANIpAdau)to pAZF c pAddm^ c(pANI ca pADam) Rule: token,sense POS(token,noun)  SenseOf(token,sense)  setDecl(token,nom) addAfter(token,c) Dvitiya(Accusative) Tatpurusha Example: d` ,AtFt,(dukhatItaH)to d` ,m^ atFt,(dukham atItaH) Rule: POS(token1,noun)  WordList(token2,Et, atFt, pEtt, gt, a(y-t, A, aAp, gmF, b` B` "` ) setDecl(token1,acc) Trutiya(Instrumental) Tatpurusha Example: d` ,AtFt,to d` ,m^ atFt, Rule: POS(token1,noun)  (POS(token2,verb)  WordList(token2,p v,sd`f,Un)) setDecl(token1,ins) Chaturthi(Dative) Tatpurusha Example: y pdAz(yupadaru)to y py dAz(yupaya daru) Rule: POS(token1,noun)  (Sense(token2,material)  WordList(token2,aT,bEl,Eht,s` ,rE"t)) setDecl(token1,dat) Panchami(Ablative) Tatpurusha Example: cOrBym^ (cOrabayam)to cOrAd^ Bym^ (cOraad bayam) Rule: POS(token1,noun)  (WordList(token2, By,BFt,BFEt,BF,,apt,apoY,m` ,pEtt,apv-t)) setDecl(token1,abl) Shashti(Genitive) Tatpurusha Example: rAjp` zq,(rAjapurushaH)to rAj p` zq,(rAjangya PurushaH) Rule: POS(token1,noun)  (POS(token2,noun) POS(token2,verb) NumeralType(token2,ordinal) SenseOf(token2,quality)) setDecl(token1,gen) Saptami(Locative) Tatpurusha Example: ngrkAk,(nagarAkAkaH)to ngr kAk, iv(nagare kAkaH iva) Rule: POS(token1,noun)  (MeaningOf(token2,crow) SenseOf(token2,contempt)) setDecl(token1,loc) addAfter(token2, iv) 4 Knowledge Representation WehavealreadylearntthattheprocessofCDissupported by a rule-base system.
48:127	A production system is a good illustration to understand a rule-base system.
49:127	To represent a complex rule, it would be better to use First Order Predicate Logic(FOPL).
50:127	Under FOPL a rule can be written as of the form P(a) Q(a)Q(b)R(c)  Action1(a)Action2(b)Action1(c) where P,Q and R are predicates a,b and c are constant symbols Action is a function symbol The rule-base system of Vaakkriti is developed considering the factors as predicates and the tokens as constant symbols.
51:127	A sample rule would look like this 579 POS(tok1,noun)  (POS(tok2,verb) decl(tok2,acc))  setDecl(token1,acc).
52:127	5 Related Work In the recent times many efforts have been made to develop various utilities for Sanskrit.
53:127	The tools developed includes Sanskrit to other Indian Language transliteration tools, simple and primitive translation tools, many grammar analysing tools and many more learning tools.
54:127	Some of the important works includes Anusaraka, a primitive machine translation tool developed by Akshar et.
55:127	al. Anusaraka tries to take advantage of the relative strengths of the computer and the human reader, where the computer takes the language load and leaves the world knowledge load on the reader.
56:127	Besides, these tools, there are some beautiful theory-based research work was also done.
57:127	The concept of Indian Network Language(INL) is one of such concepts that was proposed by Anupam et.
58:127	al. It gives a hypothesis to consider Sanskrit as INL because of its important properties like free word order and inherent semantic net structure.
59:127	There are few other interesting research concepts that have been analysed in the context of Sanskrit language.
60:127	Rick Braggs et.
61:127	al have shown in his article how Knowledge Representation in the language of Sanskrit is one of those wonderful concept to show that Semantic Nets.
62:127	Semantic Nets are concept respresenting structures, that show how a concept is related to other concepts semantically, a semantic net would like in the figure below.
63:127	Another beautiful research work was comparison of Paninian Grammar and Computer language Grammar.
64:127	Bhate et al. has analysed to show that how well organized and structured is Sanskrit Grammar and its forgotten valuable contributions to the field of Computer Science.
65:127	6 Architecture An Itrans standard formatted devanagiri text is given as input to the system and the output of the system is the set of tokens produced after CD.
66:127	The list of components in the system are listed below:  Input Processor  Symbol Table  Knowledge Base  Inference Engine  Database  Rule-Base Editor The architecture of Vaakkriti can be seen in the figure Figure 1: Architecture of Vaakriti The algorithm of Vakkriti is given below:A deAlgorithm 1 Algorithm of Vaakkriti 1: inputItrans-Devanagiri Text 2: inputprime breakUp(input) 3: tokenListtentativeTokenize(inputprime) 4: tokenInfoListtokenList 5: for tokeni in tokenInfoList do 6: token(i)extractInfo(tokeni 7: update token(i) in tokenInfoList 8: end for 9: for each rule(r) in Knowledge-Base(KB) do 10: resultinfer(r,tokenInfoList) 11: if result is true then return r 12: end if 13: end for tailed description of each component is as follows.
67:127	580 6.1 Input Processor The unstemmed compound taken as input to the systemisastringinitransformat.
68:127	First,InputProcessor breaks the itrans string into chunks of characters on the basis of Devanagiri Character set.
69:127	The heuristic for break up procedure is given below:The reason behind the breakup procedure is to ease the process of breaking the string into words in their tentative forms.
70:127	If a string is considered as it is without breakup into devanagiri characters, then there is a high chance of ambiguity while lookup in the dictionary.
71:127	For example:Without breakup of input string aja ajagaraH-Found this word With breakup of string into character sequences a,ja a,ja,ga,raH Later on the chunks of characters are processed as in the procedure below:The words lying in input string are tentatively guessed by maintaining a stack of character sequences, thus checking with the dictionary for the right word.
72:127	But, in most of the cases, the word in the input string do not have an exact match in the dictionary.
73:127	This is because of the matra appended to Case-End of a word.
74:127	Therefore, we have generated tokens for each matra and tried to find it in the dictionary.
75:127	If the word is found, then the word along with its meaning is stored in the Symbol Table.
76:127	6.2 Symbol Table Now, we shall discuss more about how a Symbol Table fetches those subtle information of a token.
77:127	Symbol table extracts token information in the following manner:6.2.1 Part of Speech Part of Speech is identified with the help of standard Monier Williams Dictionary, List of Adverbs, List of Prepositions, List of Numerals.
78:127	6.2.2 Sense and Meaning First, meaning of the token is known from the dictionary and the sense of the token is fetched through a special kind of procedure.
79:127	The technique has following steps:1.
80:127	Identify the nouns in the meaning phrase.
81:127	2.
82:127	Find sense for each noun with the help of English Wordnet.
83:127	3.
84:127	Find a list of common senses for all the nouns.
85:127	4.
86:127	That list of senses is assumed to the sense of a token.
87:127	6.2.3 Gender and Number These are fetched from the XML database.
88:127	6.3 Knowledge Base The Knowledge Base(KB) contains facts and rules that supports the system, for identifying a given input.
89:127	The KB has been classified well, according to the Rule Sets.
90:127	A Rule Set is a set of rules that are meant for a particular type of compound.
91:127	Infact, a new rule set can be created whenever there is a new part of speech to be dealt with.
92:127	It has been assumed that, a rule has clauses(both unit and definite) on antescendent side, whose number is equal to tentative number of tokens in the input parsed string.
93:127	On the other hand, the consequent or conclusion contains the list of actions that has to be operated over the tokens(in the input string) by the system.
94:127	More about the rule structure in the next section.
95:127	The KB is well integrated with the Rule Base Editor(RBE) and the Inference Engine.
96:127	Currently, it contains limited number of rules this makes the KB non-monotonic, yet it can be made monotonic, by addition of new rules.
97:127	6.4 Database Thereisalargedatabasethatsupportsthewholesystem of Vaakriti.
98:127	The database is contained in the form of XML files.
99:127	There are following tables in the database: Nouns, Adjectives, Numerals Declensions.
100:127	 Adverbs, Conjunctions and Prepositions.
101:127	 Dictionary Database.
102:127	 Preverbs database.
103:127	 Other Morphonemes.
104:127	581 6.5 Inference Engine Whenever premises of a particular are satisified by the input parse string, then it is said that a rule is fired.
105:127	A fired rule applies its consequent part over the parsed string to result in actual goal.
106:127	This procedure is known as Rule Inference.
107:127	6.6 Rule Base Editor The sole motive of Rule-Base Editor is to free the Knowledge Engineer free from rule entry.
108:127	A Linguist with little training to operate the GUI can be provided, would suffice this task.
109:127	7 Results Thesystemhasbeentestedwithmanyexamplesthat have been taken from the book written by Kale et al. The set of examples have been chosen from different set of Compounds.
110:127	In most of the cases system has given correct results with a precision of 90%, but in some of the cases that involve sense, it became quite difficult to produce the result.
111:127	Lack of linguistic tools like Wordnet for Sanskrit language imposes limitations on word sense disambiguation.
112:127	We have developed a sense list for a limited set of words by observing some of the important sanskrit texts, based on the knowledge we have acquired.
113:127	8 Our Contribution We have proposed a utility called Rule-Base Editor, besides our actual work on CD.
114:127	The motive behind Rule-Base Editor is to induce the property of flexibility into the system.
115:127	It always avails a linguist to enter new rules with the help of Rule-Base Editor without any support from knowledge engineer.
116:127	We have already learnt that Samaas Vigraha(CD) is the most important aspect of the tokenization phase in a parser.
117:127	Implicitly, the acquisition of factors and rules also gather equal importance.
118:127	Signifying this fact, we have done rigorous survey over the grammar to identify these factors.
119:127	Hence, we assert that our system will be a significant contribution in this area of research.
120:127	9 Future Scope and Conclusion We assert that Vaakkriti would be a preliminary contribution to the realm of NLP.
121:127	Adding to the major works that have been done already, Vaakkriti is an attempt to enhance the existing works.
122:127	We would extend the current system and develop a full-fledged parser that will suffice most of the requirements of MTsystem.
123:127	Although, it looks the way that the problem has been solved, but the actual problems arouses when a Sanskrit poem is given as input to a MT system.
124:127	Usually, a sanskrit poem conveys more than one meaning and sometimes figure of speech is used, that adds fuel to the fire.
125:127	This becomes a herculean task for a MT system and it will remain as a myth forever.
126:127	Acknowledgements The authors would like to specially thank Gerard Huetforprovidinglinguisticdatabaseofdeclensions and verbal roots, that was quite helpful in making our system fine and complete.
127:127	The authors gratefully acknowledge financial support from the Universal Digital Library project, funded by the Ministry of Communication and Information Technology (MCIT) India and also Indian Institute of Information Technology, Allahabad.


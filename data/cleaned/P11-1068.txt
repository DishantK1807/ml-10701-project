Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 673–682,
Portland, Oregon, June 19-24, 2011. c©2011 Association for Computational Linguistics
Dynamic Programming Algorithms
for Transition-Based Dependency Parsers
Marco Kuhlmann
Dept. of Linguistics and Philology
Uppsala University, Sweden
marco.kuhlmann@lingfil.uu.se
Carlos Gómez-Rodríguez
Departamento de Computación
Universidade da Coruña, Spain
cgomezr@udc.es
Giorgio Satta
Dept. of Information Engineering
University of Padua, Italy
satta@dei.unipd.it
Abstract
We develop a general dynamic programming
technique for the tabulation of transition-based
dependency parsers, and apply it to obtain
novel, polynomial-time algorithms for parsing
with the arc-standard and arc-eager models. We
also show how to reverse our technique to ob-
tain new transition-based dependency parsers
from existing tabular methods. Additionally,
we provide a detailed discussion of the con-
ditions under which the feature models com-
monly used in transition-based parsing can be
integrated into our algorithms.
1 Introduction
Dynamic programming algorithms, also known as
tabular or chart-based algorithms, are at the core of
many applications in natural language processing.
When applied to formalisms such as context-free
grammar, they provide polynomial-time parsing al-
gorithms and polynomial-space representations of
the resulting parse forests, even in cases where the
size of the search space is exponential in the length
of the input string. In combination with appropri-
ate semirings, these packed representations can be
exploited to compute many values of interest for ma-
chine learning, such as best parses and feature expec-
tations (Goodman, 1999; Li and Eisner, 2009).
In this paper, we follow the line of investigation
started by Huang and Sagae (2010) and apply dy-
namic programming to (projective) transition-based
dependency parsing (Nivre, 2008). The basic idea,
originally developed in the context of push-down
automata (Lang, 1974; Tomita, 1986; Billot and
Lang, 1989), is that while the number of computa-
tions of a transition-based parser may be exponential
in the length of the input string, several portions of
these computations, when appropriately represented,
can be shared. This can be effectively implemented
through dynamic programming, resulting in a packed
representation of the set of all computations.
The contributions of this paper can be summarized
as follows. We provide (declarative specifications of)
novel, polynomial-time algorithms for two widely-
used transition-based parsing models: arc-standard
(Nivre, 2004; Huang and Sagae, 2010) and arc-eager
(Nivre, 2003; Zhang and Clark, 2008). Our algorithm
for the arc-eager model is the first tabular algorithm
for this model that runs in polynomial time. Both
algorithms are derived using the same general tech-
nique; in fact, we show that this technique is applica-
ble to all transition-parsing models whose transitions
can be classified into “shift” and “reduce” transitions.
We also show how to reverse the tabulation to de-
rive a new transition system from an existing tabular
algorithm for dependency parsing, originally devel-
oped by Gómez-Rodríguez et al. (2008). Finally, we
discuss in detail the role of feature information in
our algorithms, and in particular the conditions under
which the feature models traditionally used in transi-
tion-based dependency parsing can be integrated into
our framework.
While our general approach is the same as the one
of Huang and Sagae (2010), we depart from their
framework by not representing the computations of
a parser as a graph-structured stack in the sense of
Tomita (1986). We instead simulate computations
as in Lang (1974), which results in simpler algo-
rithm specifications, and also reveals deep similari-
ties between transition-based systems for dependency
parsing and existing tabular methods for lexicalized
context-free grammars.
673
2 Transition-Based Dependency Parsing
We start by briefly introducing the framework of
transition-based dependency parsing; for details, we
refer to Nivre (2008).
2.1 Dependency
Graphs
Let w D w0   wn 1 be a string over some fixed
alphabet, where n 1 and w0 is the special token
root. A dependency graph for w is a directed graph
GD.Vw;A/, where VwDf0;:::;n 1gis the set
of nodes, and A Vw Vw is the set of arcs. Each
node in Vw encodes the position of a token in w, and
each arc inAencodes a dependency relation between
two tokens. To denote an arc .i;j/2A, we write
i!j; here, the nodei is the head, and the nodej is
the dependent. A sample dependency graph is given
in the left part of Figure 2.
2.2 Transition
Systems
A transition system is a structure SD.C;T;I;Ct/,
where C is a set of configurations, T is a finite set
of transitions, which are partial functions tWC *C,
I is a total initialization function mapping each input
string to a unique initial configuration, and Ct C
is a set of terminal configurations.
The transition systems that we investigate in this
paper differ from each other only with respect to
their sets of transitions, and are identical in all other
aspects. In each of them, a configuration is de-
fined relative to a string w as above, and is a triple
c D . ; ;A/, where  and  are disjoint lists of
nodes from Vw, called stack and buffer, respectively,
and A Vw Vw is a set of arcs. We denote the
stack, buffer and arc set associated with c by  .c/,
 .c/, and A.c/, respectively. We follow a standard
convention and write the stack with its topmost ele-
ment to the right, and the buffer with its first element
to the left; furthermore, we indicate concatenation
in the stack and in the buffer by a vertical bar. The
initialization function maps each string w to the ini-
tial configuration .  ; 0;:::;jwj 1 ;;/. The set of
terminal configurations contains all configurations of
the form . 0 ;  ;A/, where A is some set of arcs.
Given an input string w, a parser based on S pro-
cesses w from left to right, starting in the initial con-
figuration I.w/. At each point, it applies one of
the transitions, until at the end it reaches a terminal
. ;ij ;A/ ‘ . ji; ;A/ .sh/
. jijj; ;A/ ‘ . jj; ;A[fj!ig/ .la/
. jijj; ;A/ ‘ . ji; ;A[fi!jg/ .ra/
Figure 1: Transitions in the arc-standard model.
configuration; the dependency graph defined by the
arc set associated with that configuration is then re-
turned as the analysis forw. Formally, a computation
of S on w is a sequence  Dc0;:::;cm, m 0, of
configurations (defined relative to w) in which each
configuration is obtained as the value of the preced-
ing one under some transition. It is called complete
whenever c0DI.w/, and cm2Ct. We note that a
computation can be uniquely specified by its initial
configuration c0 and the sequence of its transitions,
understood as a string over T. Complete computa-
tions, where c0 is fixed, can be specified by their
transition sequences alone.
3 Arc-Standard Model
To introduce the core concepts of the paper, we first
look at a particularly simple model for transition-
based dependency parsing, known as the arc-stan-
dard model. This model has been used, in slightly
different variants, by a number of parsers (Nivre,
2004; Attardi, 2006; Huang and Sagae, 2010).
3.1 Transition
System
The arc-standard model uses three types of transi-
tions: Shift (sh) removes the first node in the buffer
and pushes it to the stack. Left-Arc (la) creates a
new arc with the topmost node on the stack as the
head and the second-topmost node as the dependent,
and removes the second-topmost node from the stack.
Right-Arc (ra) is symmetric to Left-Arc in that it
creates an arc with the second-topmost node as the
head and the topmost node as the dependent, and
removes the topmost node.
The three transitions can be formally specified as
in Figure 1. The right half of Figure 2 shows a com-
plete computation of the arc-standard transition sys-
tem, specified by its transition sequence. The picture
also shows the contents of the stack over the course of
the computation; more specifically, column i shows
the stack  .ci/ associated with the configuration ci.
674
root This news had little effect on the markets
0
1
0 0
1
2
0
2
0
2
3
0
3
0
3
0
3
0
3
54 4
5
0
3
5
0
3
5
0
3
5
6 6 6
77
8
0
3
5
6
8
0
3
5
6
0
3
5
0
3
0
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
sh sh sh la sh la sh sh la sh sh sh la ra ra ra ra
 1  2
 0
Figure 2: A dependency tree (left) and a computation generating this tree in the arc-standard system (right).
3.2 Push
Computations
The key to the tabulation of transition-based depen-
dency parsers is to find a way to decompose com-
putations into smaller, shareable parts. For the arc-
standard model, as well as for the other transition
systems that we consider in this paper, we base our
decomposition on the concept of push computations.
By this, we mean computations
 D c0;:::;cm; m 1;
on some input string w with the following properties:
(P1) The initial stack .c0/is not modified during
the computation, and is not even exposed after the
first transition: For every 1 i m, there exists a
non-empty stack  i such that  .ci/D .c0/j i.
(P2) The overall effect of the computation is to
push a single node to the stack: The stack  .cm/ can
be written as  .cm/D .c0/jh, for some h2Vw.
We can verify that the computation in Figure 2 is
a push computation. We can also see that it contains
shorter computations that are push computations; one
example is the computation 0Dc1;:::;c16, whose
overall effect is to push the node 3. In Figure 2, this
computation is marked by the zig-zag path traced
in bold. The dashed line delineates the stack  .c1/,
which is not modified during  0.
Every computation that consists of a single sh tran-
sition is a push computation. Starting from these
atoms, we can build larger push computations by
means of two (partial) binary operations fla and fra,
defined as follows. Let  1 D c10;:::;c1m1 and
 2 D c20;:::;c2m2 be push computations on the
same input string w such that c1m1 Dc20. Then
fra. 1; 2/ D c10;:::;c1m1;c21;:::;c2m2;c;
where c is obtained from c2m2 by applying the ra
transition. (The operationfla is defined analogously.)
We can verify that fra. 1; 2/ is another push com-
putation. For instance, with respect to Figure 2,
fra. 1; 2/D 0. Conversely, we say that the push
computation  0 can be decomposed into the subcom-
putations  1 and  2, and the operation fra.
3.3 Deduction
System
Building on the compositional structure of push com-
putations, we now construct a deduction system (in
the sense of Shieber et al. (1995)) that tabulates the
computations of the arc-standard model for a given
input string wDw0   wn 1. For 0 i  n, we
shall write i to denote the buffer i;:::;n 1 . Thus,
 0 denotes the full buffer, associated with the initial
configuration I.w/, and  n denotes the empty buffer,
associated with a terminal configuration c2Ct.
Item form. The items of our deduction system
take the form  i;h;j , where 0 i  h < j  n.
The intended interpretation of an item  i;h;j is:
For every configuration c0 with  .c0/D i, there
exists a push computation  Dc0;:::;cm such that
 .cm/D j, and  .cm/D .c0/jh.
Goal. The only goal item is  0;0;n , asserting
that there exists a complete computation for w.
Axioms. For every stack  , position i < n and
arc set A, by a single sh transition we obtain the
push computation . ; i;A/;. ji; iC1;A/. There-
fore we can take the set of all items of the form
 i;i;iC1 as the axioms of our system.
Inference rules. The inference rules parallel the
composition operations fla and fra. Suppose that
we have deduced the items  i;h1;k and  k;h2;j ,
where 0  i  h1 < k  h2 < j  n. The
item  i;h1;k asserts that for every configuration c10
675
Item form:  i;h;j , 0 i h<j jwj Goal:  0;0;jwj Axioms:  i;i;iC1 
Inference rules:  i;h1;k  k;h2;j  i;h
2;j 
.laIh2!h1/  i;h1;k  k;h2;j  i;h
1;j 
.raIh1!h2/
Figure 3: Deduction system for the arc-standard model.
with  .c10/D i, there exists a push computation
 1 Dc10;:::;c1m1 such that  .c1m1/D k, and
 .c1m1/ D  .c10/jh1. Using the item  k;h2;j ,
we deduce the existence of a second push compu-
tation  2 D c20;:::;c2m2 such that c20 D c1m1,
 .c2m2/D j, and  .c2m2/D .c10/jh1jh2. By
means of fra, we can then compose  1 and  2 into a
new push computation
fra. 1; 2/ D c10;:::;c1m1;c21;:::;c2m2;c:
Here,  .c/D j, and  .c/D .c10/jh1. Therefore,
we may generate the item  i;h1;j . The inference
rule for la can be derived analogously.
Figure 3 shows the complete deduction system.
3.4 Completeness
and Non-Ambiguity
We have informally argued that our deduction sys-
tem is sound. To show completeness, we prove the
following lemma: For all 0 i h<j jwjand
every push computation  Dc0;:::;cm on w with
 .c0/D i,  .cm/D j and  .cm/D .c0/jh, the
item  i;h;j is generated. The proof is by induction
on m, and there are two cases:
mD1. In this case,  consists of a single sh transi-
tion, hDi, jDiC1, and we need to show that the
item i;i;iC1 is generated. This holds because this
item is an axiom.
m 2. In this case,  ends with either a la or a ra
transition. Let c be the rightmost configuration in  
that is different from cm and whose stack size is one
larger than the size of  .c0/. The computations
 1Dc0;:::;c and  2Dc;:::;cm 1
are both push computations with strictly fewer tran-
sitions than  . Suppose that the last transition in  
is ra. In this case,  .c/D k for some i <k <j,
 .c/D .c0/jh with h < k,  .cm 1/D j, and
 .cm 1/D .c0/jhjh0 for some k  h0 < j. By
induction, we may assume that we have generated
items  i;h;k and  k;h0;j . Applying the inference
rule for ra, we deduce the item  i;h;j . An analo-
gous argument can be made for fla.
Apart from being sound and complete, our deduc-
tion system also has the property that it assigns at
most one derivation to a given item. To see this,
note that in the proof of the lemma, the choice of c
is uniquely determined: If we take any other con-
figuration c0 that meets the selection criteria, then
the computation  02 D c0;:::;cm 1 is not a push
computation, as it contains c as an intermediate con-
figuration, and thereby violates property P1.
3.5 Discussion
Let us briefly take stock of what we have achieved
so far. We have provided a deduction system capable
of tabulating the set of all computations of an arc-
standard parser on a given input string, and proved
the correctness of this system relative to an interpre-
tation based on push computations. Inspecting the
system, we can see that its generic implementation
takes space in O.jwj3/ and time in O.jwj5/.
Our deduction system is essentially the same as the
one for the CKY algorithm for bilexicalized context-
free grammar (Collins, 1996; Gómez-Rodríguez et
al., 2008). This equivalence reveals a deep correspon-
dence between the arc-standard model and bilexical-
ized context-free grammar, and, via results by Eisner
and Satta (1999), to head automata. In particular,
Eisner’s and Satta’s “hook trick” can be applied to
our tabulation to reduce its runtime to O.jwj4/.
4 Adding
Features
The main goal with the tabulation of transition-based
dependency parsers is to obtain a representation
based on which semiring values such as the high-
est-scoring computation for a given input (and with
it, a dependency tree) can be calculated. Such com-
putations involve the use of feature information. In
this section, we discuss how our tabulation of the arc-
standard system can be extended for this purpose.
676
 i;h1;kIhx2;x1i;hx1;x3i Wv1  k;h2;jIhx1;x3i;hx3;x4i Wv2
 i;h1;jIhx2;x1i;hx1;x3i Wv1Cv2Chx3;x4i E ra .ra/
 i;h;jIhx2;x1i;hx1;x3i Wv
 j;j;jC1Ihx1;x3i;hx3;wji Whx1;x3i E sh .sh/
Figure 4: Extended inference rules under the feature model Dhs1:w;s0:wi. The annotations indicate how to calculate
a candidate for an update of the Viterbi score of the conclusion using the Viterbi scores of the premises.
4.1 Scoring
Computations
For the sake of concreteness, suppose that we want
to score computations based on the following model,
taken from Zhang and Clark (2008). The score of a
computation  is broken down into a sum of scores
score.t;ct/ for combinations of a transition t in the
transition sequence associated with  and the config-
uration ct in which t was taken:
score. / D
X
t2 
score.t;ct/ (1)
The score score.t;ct/is defined as the dot product of
the feature representation of ct relative to a feature
model  and a transition-specific weight vector E t:
score.t;ct/ D  .ct/ E t
The feature model  is a vector h 1;:::; ni of
elementary feature functions, and the feature rep-
resentation  .c/ of a configuration c is a vector
ExDh 1.c/;:::; n.c/iof atomic values. Two ex-
amples of feature functions are the word form associ-
ated with the topmost and second-topmost node on
the stack; adopting the notation of Huang and Sagae
(2010), we will write these functions as s0:w and
s1:w, respectively. Feature functions like these have
been used in several parsers (Nivre, 2006; Zhang and
Clark, 2008; Huang et al., 2009).
4.2 Integration
of Feature Models
To integrate feature models into our tabulation of
the arc-standard system, we can use extended items
of the form  i;h;jIExL;ExR with the same intended
interpretation as the old items  i;h;j , except that
the initial configuration of the asserted computations
 Dc0;:::;cm now is required to have the feature
representation ExL, and the final configuration is re-
quired to have the representation ExR:
 .c0/DExL and  .cm/DExR
We shall refer to the vectors ExL and ExR as the left-
context vector and the right-context vector of the
computation  , respectively.
We now need to change the deduction rules so that
they become faithful to the extended interpretation.
Intuitively speaking, we must ensure that the feature
values can be computed along the inference rules.
As a concrete example, consider the feature model
 Dhs1:w;s0:wi. In order to integrate this model
into our tabulation, we change the rule for ra as in
Figure 4, where x1;:::;x4 range over possible word
forms. The shared variable occurrences in this rule
capture the constraints that hold between the feature
values of the subcomputations  1 and  2 asserted
by the premises, and the computations fra. 1; 2/
asserted by the conclusion. To illustrate this, suppose
that  1 and  2 are as in Figure 2. Then the three
occurrences of x3 for instance encode that
 s0:w .c6/D s1:w .c15/D s0:w .c16/Dw3:
We also need to extend the axioms, which cor-
respond to computations consisting of a single sh
transition. The most conservative way to do this is
to use a generate-and-test technique: Extend the ex-
isting axioms by all valid choices of left-context and
right-context vectors, that is, by all pairs ExL;ExR such
that there exists a configuration c with  .c/DExL
and  .sh.c//DExR. The task of filtering out use-
less guesses can then be delegated to the deduction
system.
A more efficient way is to only have one axiom, for
the case wherecDI.w/, and to add to the deduction
system a new, unary inference rule for sh as in Fig-
ure 4. This rule only creates items whose left-context
vector is the right-context vector of some other item,
which prevents the generation of useless items. In
the following, we take this second approach, which
is also the approach of Huang and Sagae (2010).
677
 i;h;jIhx2;x1i;hx1;x3i W.p;v/
 j;j;jC1Ihx1;x3i;hx3;wji W.pC ; / .sh/, where  Dhx1;x3i E sh
 i;h1;kIhx2;x1i;hx1;x3i W.p1;v1/  k;h2;jIhx1;x3i;hx3;x4i W.p2;v2/
 i;h1;jIhx2;x1i;hx1;x3i W.p1Cv2C ;v1Cv2C / .ra/, where  Dhx3;x4i E ra
Figure 5: Extended inference rules under the feature model Dhs0:w;s1:wi. The annotations indicate how to calculate
a candidate for an update of the prefix score and Viterbi score of the conclusion.
4.3 Computing
Viterbi Scores
Once we have extended our deduction system with
feature information, many values of interest can be
computed. One simple example is the Viterbi score
for an input w, defined as
arg max
 2 .w/
score. /; (2)
where  .w/ denotes the set of all complete compu-
tations for w. The score of a complex computation
ft. 1; 2/is the sum of the scores of its subcomputa-
tions  1; 2, plus the transition-specific dot product.
Since this dot product only depends on the feature
representation of the final configuration of  2, the
Viterbi score can be computed on top of the infer-
ence rules using standard techniques. The crucial
calculation is indicated in Figure 4.
4.4 Computing
Prefix Scores
Another interesting value is the prefix score of an
item, which, apart from the Viterbi score, also in-
cludes the cost of the best search path leading to
the item. Huang and Sagae (2010) use this quan-
tity to order the items in a beam search on top of
their dynamic programming method. In our frame-
work, prefix scores can be computed as indicated in
Figure 5. Alternatively, we can also use the more
involved calculation employed by Huang and Sagae
(2010), which allows them to get rid of the left-con-
text vector from their items.1
4.5 Compatibility
So far we have restricted our attention to a concrete
and extremely simplistic feature model. The fea-
ture models that are used in practical systems are
considerably more complex, and not all of them are
1The essential idea in the calculation by Huang and Sagae
(2010) is to delegate (in the computation of the Viterbi score)
the scoring of sh transitions to the inference rules for la/ra.
compatible with our framework in the sense that they
can be integrated into our deduction system in the
way described in Section 4.2.
For a simple example of a feature model that is
incompatible with our tabulation, consider the model
 0 Dhs0:rc:wi, whose single feature function ex-
tracts the word form of the right child (rc) of the
topmost node on the stack. Even if we know the val-
ues of this feature for two computations  1; 2, we
have no way to compute its value for the composed
computation fra. 1; 2/: This value coincides with
the word form of the topmost node on the stack asso-
ciated with  2, but in order to have access to it in the
context of the ra rule, our feature model would need
to also include the feature function s0:w.
The example just given raises the question whether
there is a general criterion based on which we can de-
cide if a given feature model is compatible with our
tabulation. An attempt to provide such a criterion has
been made by Huang and Sagae (2010), who define
a constraint on feature models called “monotonicity”
and claim that this constraint guarantees that feature
values can be computed using their dynamic program-
ming approach. Unfortunately, this claim is wrong.
In particular, the feature model  0 given above is
“monotonic”, but cannot be tabulated, neither in our
nor in their framework. In general, it seems clear
that the question of compatibility is a question about
the relation between the tabulation and the feature
model, and not about the feature model alone. To find
practically useful characterizations of compatibility
is an interesting avenue for future research.
5 Arc-Eager Model
Up to now, we have only discussed the arc-standard
model. In this section, we show that the framework
of push computations also provides a tabulation of
another widely-used model for dependency parsing,
the arc-eager model (Nivre, 2003).
678
. ;ij ;A/ ‘ . ji; ;A/ .sh/
. ji;jj ;A/ ‘ . ;jj ;A[fj!ig/ .lae/
only if i does not have an incoming arc
. ji;jj ;A/ ‘ . jijj; ;A[fi!jg/ .rae/
. ji; ;A/ ‘ . ; ;A/ .re/
only if i has an incoming arc
Figure 6: Transitions in the arc-eager model.
5.1 Transition
System
The arc-eager model has three types of transitions,
shown in Figure 6: Shift (sh) works just like in arc-
standard, moving the first node in the buffer to the
stack. Left-Arc (lae) creates a new arc with the first
node in the buffer as the head and the topmost node
on the stack as the dependent, and pops the stack.
It can only be applied if the topmost node on the
stack has not already been assigned a head, so as to
preserve the single-head constraint. Right-Arc (rae)
creates an arc in the opposite direction as Left-Arc,
and moves the first node in the buffer to the stack.
Finally, Reduce (re) simply pops the stack; it can
only be applied if the topmost node on the stack has
already been assigned a head.
Note that, unlike in the case of arc-standard, the
parsing process in the arc-eager model is not bottom-
up: the right dependents of a node are attached before
they have been assigned their own right dependents.
5.2 Shift-Reduce Parsing
If we look at the specification of the transitions of the
arc-standard and the arc-eager model and restrict our
attention to the effect that they have on the stack and
the buffer, then we can see that all seven transitions
fall into one of three types:
. ;ij / ‘ . ji; / sh;rae (T1)
. jijj; / ‘ . jj; / la (T2)
. ji; / ‘ . ; / ra;lae;re (T3)
We refer to transitions of type T1 as shift and to
transitions of type T2 and T3 as reduce transitions.
The crucial observation now is that the concept of
push computations and the approach to their tabula-
tion that we have taken for the arc-standard system
can easily be generalized to other transition systems
whose transitions are of the type shift or reduce. In
particular, the proof of the correctness of our de-
duction system that we gave in Section 3 still goes
through if instead of sh we write “shift” and instead
of la and ra we write “reduce”.
5.3 Deduction
System
Generalizing our construction for the arc-standard
model along these lines, we obtain a tabulation of
the arc-eager model. Just like in the case of arc-
standard, each single shift transition in that model
(be it sh or rae) constitutes a push computation, while
the reduce transitions induce operations flae and fre.
The only difference is that the preconditions of lae
and re must be met. Therefore, flae. 1; 2/ is only
defined if the topmost node on the stack in the final
configuration of  2 has not yet been assigned a head,
and fre. 1; 2/ is only defined in the opposite case.
Item form. In our deduction system for the arc-ea-
ger model we use items of the form  i;hb;j , where
0 i  h < j  jwj, and b 2f0;1g. An item
 i;hb;j has the same meaning as the corresponding
item in our deduction system for arc-standard, but
also keeps record of whether the node h has been
assigned a head (bD1) or not (bD0).
Goal. The only goal item is 0;00;jwj . (The item
 0;01;jwj asserts that the node 0 has a head, which
never happens in a complete computation.)
Axioms. Reasoning as in arc-standard, the axioms
of the deduction system for the arc-eager model are
the items of the form  i;i0;iC1 and  j;j1;jC1 ,
where j > 0: the former correspond to the push
computations obtained from a single sh, the latter to
those obtained from a single rae, which apart from
shifting a node also assigns it a head.
Inference rules. Also analogously to arc-standard,
if we know that there exists a push computation  1
of the form asserted by the item  i;hb;k , and a push
computation  2 of the form asserted by  k;g0;j ,
where j <jwj, then we can build the push compu-
tation flae. 1; 2/ of the form asserted by the item
 i;hb;j . Similarly, if  2 is of the form asserted by
 k;g1;j , then we can buildfre. 1; 2/, which again
is of the form by asserted  i;hb;j . Thus:
 i;ib;k  k;k0;j 
 i;ib;j .lae/,
 i;ib;k  k;k1;j 
 i;ib;j .re/.
679
Item form:  ib;j , 0 i <j jwj, b2f0;1g Goal:  00;jwj Axioms:  00;1 
 ib;j 
 j0;jC1 .sh/
 ib;k  k0;j 
 ib;j .laeIj!k/, j <jwj
 ib;j 
 j1;jC1 .raeIi!j/
 ib;k  k1;j 
 ib;j .re/
Figure 7: Deduction system for the arc-eager model.
As mentioned above, the correctness and non-am-
biguity of the system can be proved as in Section 3.
Features can be added in the same way as discussed
in Section 4.
5.4 Computational
Complexity
Looking at the inference rules, it is clear that an im-
plementation of the deduction system for arc-eager
takes space in O.jwj3/and time in O.jwj5/, just like
in the case of arc-standard. However, a closer inspec-
tion reveals that we can give even tighter bounds.
In all derivable items  i;hb;j , it holds that iDh.
This can easily be shown by induction: The property
holds for the axioms, and the first two indexes of a
consequent of a deduction rule coincide with the first
two indexes of the left antecedent. Thus, if we use
the notation  ib;k as a shorthand for  i;ib;k , then
we can rewrite the inference rules for the arc-eager
system as in Figure 7, where, additionally, we have
added unary rules for sh and ra and restricted the
set of axioms along the lines set out in Section 4.2.
With this formulation, it is apparent that the space
complexity of the generic implementation of the de-
duction system is in fact even in O.jwj2/, and its
time complexity is in O.jwj3/.
6 Hybrid
Model
We now reverse the approach that we have taken in
the previous sections: Instead of tabulating a transi-
tion system in order to get a dynamic-programming
parser that simulates its computations, we start with
a tabular parser and derive a transition system from
it. In the new model, dependency trees are built bot-
tom-up as in the arc-standard model, but the set of all
computations in the system can be tabulated in space
O.jwj2/ and time O.jwj3/, as in arc-eager.
6.1 Deduction
System
Gómez-Rodríguez et al. (2008) present a deductive
version of the dependency parser of Yamada and Mat-
sumoto (2003); their deduction system is given in Fig-
ure 8. The generic implementation of the deduction
system takes space O.jwj2/ and time O.jwj3/.
In the original interpretation of the deduction
system, an item  i;j asserts the existence of a
pair of (projective) dependency trees: the first tree
rooted at token wi, having all nodes in the substring
wi   wk 1 as descendants, where i <k j; and
the second tree rooted at token wj, having all nodes
in the substring wk   wj as descendants. (Note that
we use fencepost indexes, while Gómez-Rodríguez
et al. (2008) indexes positions.)
6.2 Transition
System
In the context of our tabulation framework, we adopt
a new interpretation of items: An item  i;j has the
same meaning as an item  i;i;j in the tabulation
of the arc-standard model; for every configuration c
with  .c/D i, it asserts the existence of a push
computation that starts withc and ends with a config-
uration c0 for which  .c0/D j and  .c0/D .c/ji.
If we interpret the inference rules of the system in
terms of composition operations on push computa-
tions as usual, and also take the intended direction of
the dependency arcs into account, then this induces a
transition system with three transitions:
. ;ij ;A/ ‘ . ji; ;A/ .sh/
. ji;jj ;A/ ‘ . ;jj ;A[fj!ig/ .lah/
. jijj; ;A/ ‘ . ji; ;A[fi!jg/ .ra/
We call this transition system the hybrid model, as sh
and ra are just like in arc-standard, while lah is like
the Left-Arc transition in the arc-eager model (lae),
except that it does not have the precondition. Like
the arc-standard but unlike the arc-eager model, the
hybrid model builds dependencies bottom-up.
7 Conclusion
In this paper, we have provided a general technique
for the tabulation of transition-based dependency
parsers, and applied it to obtain dynamic program-
ming algorithms for two widely-used parsing models,
680
Item form:  i;j , 0 i <j jwj Goal:  0;jwj Axioms:  0;1 
Inference rules:  i;j  j;jC1 .sh/  i;k  k;j  i;j .lahIj!k/, j <jwj  i;k  k;j  i;j .raIi!k/
Figure 8: Deduction system for the hybrid model.
arc-standard and (for the first time) arc-eager. The
basic idea behind our technique is the same as the
one implemented by Huang and Sagae (2010) for
the special case of the arc-standard model, but in-
stead of their graph-structured stack representation
we use a tabulation akin to Lang’s approach to the
simulation of pushdown automata (Lang, 1974). This
considerably simplifies both the presentation and the
implementation of parsing algorithms. It has also
enabled us to give simple proofs of correctness and
establish relations between transition-based parsers
and existing parsers based on dynamic programming.
While this paper has focused on the theoretical
aspects and the analysis of dynamic programming
versions of transition-based parsers, an obvious av-
enue for future work is the evaluation of the empiri-
cal performance and efficiency of these algorithms in
connection with specific feature models. The feature
models used in transition-based dependency parsing
are typically very expressive, and exhaustive search
with them quickly becomes impractical even for our
cubic-time algorithms of the arc-eager and hybrid
model. However, Huang and Sagae (2010) have pro-
vided evidence that the use of dynamic programming
on top of a transition-based dependency parser can
improve accuracy even without exhaustive search.
The tradeoff between expressivity of the feature mod-
els on the one hand and the efficiency of the search
on the other is a topic that we find worth investigat-
ing. Another interesting observation is that dynamic
programming makes it possible to use predictive fea-
tures, which cannot easily be integrated into a non-
tabular transition-based parser. This could lead to the
development of parsing models that cross the border
between transition-based and tabular parsing.
Acknowledgments
All authors contributed equally to the work presented in
this paper. M. K. wrote most of the manuscript. C. G.-R.
has been partially supported by Ministerio de Educación
y Ciencia and FEDER (HUM2007-66607-C04) and Xun-
ta de Galicia (PGIDIT07SIN005206PR, Rede Galega
de Procesamento da Linguaxe e Recuperación de Infor-
mación, Rede Galega de Lingüística de Corpus, Bolsas
Estadías INCITE/FSE cofinanced).
References
Giuseppe Attardi. 2006. Experiments with a multilan-
guage non-projective dependency parser. In Proceed-
ings of the Tenth Conference on Computational Natural
Language Learning (CoNLL), pages 166–170, New
York, USA.
Sylvie Billot and Bernard Lang. 1989. The structure of
shared forests in ambiguous parsing. In Proceedings of
the 27th Annual Meeting of the Association for Compu-
tational Linguistics (ACL), pages 143–151, Vancouver,
Canada.
Michael Collins. 1996. A new statistical parser based
on bigram lexical dependencies. In Proceedings of the
34th Annual Meeting of the Association for Computa-
tional Linguistics (ACL), pages 184–191, Santa Cruz,
CA, USA.
Jason Eisner and Giorgio Satta. 1999. Efficient parsing
for bilexical context-free grammars and Head Automa-
ton Grammars. In Proceedings of the 37th Annual
Meeting of the Association for Computational Linguis-
tics (ACL), pages 457–464, College Park, MD, USA.
Carlos Gómez-Rodríguez, John Carroll, and David J. Weir.
2008. A deductive approach to dependency parsing. In
Proceedings of the 46th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL): Human
Language Technologies, pages 968–976, Columbus,
OH, USA.
Joshua Goodman. 1999. Semiring parsing. Computa-
tional Linguistics, 25(4):573–605.
Liang Huang and Kenji Sagae. 2010. Dynamic program-
ming for linear-time incremental parsing. In Proceed-
ings of the 48th Annual Meeting of the Association for
Computational Linguistics (ACL), pages 1077–1086,
Uppsala, Sweden.
Liang Huang, Wenbin Jiang, and Qun Liu. 2009.
Bilingually-constrained (monolingual) shift-reduce
parsing. In Proceedings of the 2009 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 1222–1231, Singapore.
Bernard Lang. 1974. Deterministic techniques for ef-
ficient non-deterministic parsers. In Jacques Loecx,
681
editor, Automata, Languages and Programming, 2nd
Colloquium, University of Saarbrücken, July 29–August
2, 1974, number 14 in Lecture Notes in Computer Sci-
ence, pages 255–269. Springer.
Zhifei Li and Jason Eisner. 2009. Firstand second-order
expectation semirings with applications to minimum-
risk training on translation forests. In Proceedings of
the 2009 Conference on Empirical Methods in Natural
Language Processing (EMNLP), pages 40–51, Singa-
pore.
Joakim Nivre. 2003. An efficient algorithm for projective
dependency parsing. In Proceedings of the Eighth In-
ternational Workshop on Parsing Technologies (IWPT),
pages 149–160, Nancy, France.
Joakim Nivre. 2004. Incrementality in deterministic de-
pendency parsing. In Workshop on Incremental Pars-
ing: Bringing Engineering and Cognition Together,
pages 50–57, Barcelona, Spain.
Joakim Nivre. 2006. Inductive Dependency Parsing,
volume 34 of Text, Speech and Language Technology.
Springer.
Joakim Nivre. 2008. Algorithms for deterministic incre-
mental dependency parsing. Computational Linguis-
tics, 34(4):513–553.
Stuart M. Shieber, Yves Schabes, and Fernando Pereira.
1995. Principles and implementation of deductive pars-
ing. Journal of Logic Programming, 24(1–2):3–36.
Masaru Tomita. 1986. Efficient Parsing for Natural
Language: A Fast Algorithm for Practical Systems.
Springer.
Hiroyasu Yamada and Yuji Matsumoto. 2003. Statistical
dependency analysis with support vector machines. In
Proceedings of the Eighth International Workshop on
Parsing Technologies (IWPT), pages 195–206, Nancy,
France.
Yue Zhang and Stephen Clark. 2008. A tale of two
parsers: Investigating and combining graph-based and
transition-based dependency parsing. In Proceedings
of the 2008 Conference on Empirical Methods in Natu-
ral Language Processing (EMNLP), pages 562—571,
Honolulu, HI, USA.
682


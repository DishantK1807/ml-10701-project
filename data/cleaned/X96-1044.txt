1:516	TIPSTER Text Phase II Architecture Requirements Version 2.0p 3 June 1996 Architecture Commitee tipster @ tipster.org 1.0 INTRODUCTION 1.1 Requirements Traceability The requirements herein are derived from several Government agencies.
2:516	Some requirements may be traced to specific documents given below.
3:516	Interviews with Government personnel were also a source.
4:516	When possible, the source documents, shown as (n), indicate the basis for the TIPSTER requirement: 0.
5:516	Derived Requirement.
6:516	1.
7:516	BAA 93-36 and Scenarios 2.
8:516	Architecture Requirements (draft), Sarah Taylor, 13 March 1994 3.
9:516	FBIS CONOPS (draft), MITRE, 28 February 1994 4.
10:516	ADEPT CONOPS (working draft), MITRE, 4 February 1994 5.
11:516	Requirements Overview, W. B. Schultheis, 8 April 1994 6.
12:516	Requirements Document, W. B Schultheis, 20 July 1994 7.
13:516	Analyst Requirements for TIPSTER Phase II, Based on BAA Scenarios, 15 March 1993 8.
14:516	TIPSTER Phase II Architecture Requirements, Terry Hand, 8 March 1994 9.
15:516	TIPSTER Architecture Concept, 5 July 1994 1.2 Requirement Document Terms Application is a group of components and modules, both internal and external to the TIPSTER Architecture, that operates on documents to answer a User's request for information from documents.
16:516	An Application is a "complete package" including any processing necessary to setup documents for TIPSTER processing and the User interface component.
17:516	An Application may contain a Detection Component, Extraction Component or Clustering Component or any combination thereof.
18:516	Compiled Query is the Detection Component specific form of a query generated by a Detection Component from a Statement of Relevance and is understandable only by the Detection Component.
19:516	Component is equivalent to a Computer System Component (CSC) in the conventional life-cycle definition.
20:516	A CSC is a distinct part of a Computer Software Component Item(CSCI).
21:516	CSCs may be further decomposed into other CSCs and CSUs.
22:516	A detection component is an example of a CSC.
23:516	The size, function and complexity of an item is a guide to calling the item a 'component'.
24:516	Components are major parts of an Application; they are built from modules.
25:516	Note: The use of the term 'component' in the Architecture Design Document is in a different context, namely, part of the structure of a generic object.
26:516	Detection Component is a component that selects documents from a Collection based upon the Detection Criteria.
27:516	Detection Criteria is the User statement of information need and may include Selection Statements, short form free text queries, Boolean keyword queries or example documents Document Attribute is a characteristic of a document as represented by a single specific value or a set of values of the same type e.g., date received or authors.
28:516	Document Collection is an unordered set of documents.
29:516	Document List is an ordered list of document identifiers and optional document attributes or computational result for each list entry.
30:516	307 Extraction Component is a component that selects information from a document or a list of documents based upon the Template structure, Fill Rules and Patterns.
31:516	Fill Rules are a collection of criteria which describe the constraints used to select information for Template slots and the conditions under which Template Objects are instantiated.
32:516	The specific formats for the fills is also included.
33:516	Module is equivalent to a Computer System Unit (CSU) in the conventional life-cycle definition.
34:516	A CSU is an element specified in the design of a CSC that is separately testable.
35:516	A parser is an example of a module.
36:516	Modules are used to build components.
37:516	Generally modules are composed of no more than 300 lines of code.
38:516	Multi-lingual is considered to be multiple languages in one document or multiple documents in different languages.
39:516	Pattern is an expression of a specific form that is used for matching text during the Extraction process.
40:516	Query is the Detection Component specific form of a query generated by a Detection Component in the component's unique structure and language.
41:516	It is understandable by a User and processable by the Detection component.
42:516	Selection Statement is a high level textual description of the needed information as specified by the User.
43:516	Template is a form or structure which identifies one or more objects that are associated together as the result of an extraction process.
44:516	The specific values, for each type, are placed in template slots to fill the template.
45:516	Template Object is a group of associated slots.
46:516	One or more linked objects form a Template.
47:516	User and User Group refer to the analyst(s) controlling and interacting with the Application through the User Interface.
48:516	1.3 Requirement Document Notes Note 1: This document presents Requirements for the TIPSTER Architecture.
49:516	Every Application implemented under the TIPSTER Architecture will need an Application Requirements Document that selects specific features allowed by the TIPSTER Architecture as well as specification of any non-TIPSTER capabilities.
50:516	The Application will also need a User Interface Document that defines User commands, screen layouts and the sequence of User operations.
51:516	See Paragraph 1.8.
52:516	Note 2: Not all Requirements supported by the Architecture will necessarily be included in an Application.
53:516	The Architecture provides a 'shopping list' of capabilities that may be included in the Application Requirement Document, as appropriate.
54:516	Note 3: A key concept of the Architecture is that any implementation of a TIPSTER Architecture Requirement shall be fully compatible with the TIPSTER Requirements that have not been implemented.
55:516	1.4 Architectural Concept The Architecture shall provide for the development of common, shared, logical modules, components and interfaces that can be configured to support various text document processing tasks in different Applications and natural languages.
56:516	More specific background may be found in Reference 9.
57:516	1.5 Architecture Description Language The Architecture shall be documented in a formal language that describes the components and modules and how they interact using an object oriented methodology.
58:516	The Interface Control Document (ICD) shall unambiguously define the Architecture component and module interfaces so that these parts of the Architecture may work together to produce the intended results.
59:516	(3, 5) Verification Method: Inspection.
60:516	308 1.6 TIPSTER Functional Areas The TIPSTER Architecture can be divided into the following major functional areas: Persistent Knowledge Repository Document Management User Information Requests User Information Outputs Scope of Processing Services Detection Extraction Requirements will be assigned to either the above functional areas or the supporting areas of: Interface Control Document Operating Environment High Level Goals 1.7 Testability Implementation of requirements must meet verification criteria either through demonstration tests or by inspection.
61:516	1.8 User Interface The User Interface provides the mechanism for the user to interactively control various events and processes, and to examine results.
62:516	The User Interface functional area is NOT part of the TIPSTER Architecture.
63:516	However, the User Interface, that is concerned with screen layout, windows, command choices, output displays and the sequence relationships between these items, is closely tied to User Information Requests and User Information Outputs areas.
64:516	The User Information Request area accepts, for TIPSTER processes, inputs from the User Interface and the User Information Outputs that sends TIPSTER results to the User Interface for display.
65:516	This boundary is the interface between the TIPSTER Architecture and the User Interface implementation for a specific Application.
66:516	1.9 User Interaction User interaction shall be part of an Application through modular interfaces.
67:516	(3,4,5) Verification Method: Demonstration and inspection.
68:516	1.10 Relationships of Major Functional Areas In addition to the relationships identified in Paragraph 1.8, Document Management, Detection and Extraction accept inputs from User Information Request and provide outputs to User Information Output.
69:516	The Document Management area is also closely related to Detection and Extraction by providing documents for these two areas as well as performing document accounting and control.
70:516	1.11 Technical References (a).
71:516	Guidelines for Electronic Text Encoding and Interchange, TEI P3, Vol.
72:516	1 & 2, ACH, ACL, ALLC (b).
73:516	ISO 8879: 1986, SGML standards 309 2.0 GENERAL TIPSTER FEATURES The Architecture shall provide appropriate information to support TIPSTER features that are included in specific Applications.
74:516	Features developed as a result of the requirements specified in this document will generally, but not always, be initiated by the User through User Interface commands that may be passed to the User Information Request for processing.
75:516	The results from such processing, or other internal TIPSTER processes, will be passed to the User Interface via the User Information Output.
76:516	Supporting details, for those requirements considered to be an internal part of the Architecture, will be found in the remainder of this document.
77:516	2.1 Task Handling Processing tasks shall operate interactively with progress status shown to the User or in the background with progress status available upon User request.
78:516	Depending upon the specific task the User may direct the task to operate interactively or in the background mode.
79:516	Tasks may be canceled or the mode changed.
80:516	The nature of this requirement implies co-operation between the Operating System, the Application and the Architecture.
81:516	The Architecture shall facilitate this co-operation by allowing status information to be updated and passed between components.(5, 6, 7) Verification Method: Demonstration.
82:516	2.2 Multi-Lingual The Architecture shall allow documents to be processed in any human language, provided the appropriate knowledge bases have been built and language specific modules are available.
83:516	This includes the processing of documents which contain multiple languages in a document.
84:516	The Architecture shall be based on multi-lingual layers so that additional languages can easily be added, without recreating the basic Application.
85:516	The existence and use of multi-lingual layers shall not have significant, adverse effect on single language processing.
86:516	(5, 6, 7) Verification Method: Inspection.
87:516	311 3.0 PERSISTENT KNOWLEDGE REPOSITORY The Persistent Knowledge Repository is a common place (storage device) where information may be retained.
88:516	The goal of Persistent Knowledge is to further the use of common knowledge items as new Applications are built.
89:516	A significant pay-off may accrue through common usage, particularly in the development of operational Applications.
90:516	It is recognized that there may be some reduction in capability when common knowledge items are used in an Application instead of unique, customized knowledge items; however, the history of other technical areas indicates that common items and sharing has merit and possible pay-off.
91:516	Generally, Persistent Knowledge is that knowledge which is retained from one run to the next of an Application(s).
92:516	However, there are degrees of persistency.
93:516	Some items, such as, lexicons, gazetteers, glossaries, dictionaries, marking rules and grammars rules, are comparatively stable, subject to normal maintenance operations.
94:516	A Query Library, on the other hand, may be modified frequently.
95:516	Results from Detection, Extraction or User actions may be used to modify the items in the Persistent Knowledge Repository.
96:516	Specific algorithms, even those which use items in the Persistent Knowledge Repository, are not considered part of the Repository, but instead are included in the particular instance of an implemented requirement; however, the structure of the particular knowledge item is an Architectural item.
97:516	It should be noted that while Persistent Knowledge requires a place to keep knowledge items and the format of the item or storage area, not all items must be completely filled initially under the TIPSTER project.
98:516	Some items will be filled, grow or be augmented as Applications are implemented under the Architecture.
99:516	As a minimum the format and access method of each Persistent Knowledge item shall be established.
100:516	Since Persistent Knowledge items will require frequent access the format and access design shall place a high priority on efficiency.
101:516	Requirement 2.2 for multi-lingual capability is applicable for this section and Persistent Knowledge items should be designed to apply to multiple languages.
102:516	3.1 Persistent Knowledge Sharing The Architecture shall allow for sharing of Persistent Knowledge items.
103:516	This includes sharing by different components in an Application and by different Applications built in accordance with the TIPSTER Architecture.
104:516	(2, 8) Verification Method: Inspection.
105:516	3.1.1 Common Lexicon The Architecture shall provide for the use of a common Lexicon that can support various document processing tasks in different Applications.
106:516	The intent of this requirement is to allow new Applications to adopt and modify existing TIPSTER lexicons, where suitable.
107:516	The common lexicon format should cover a frequently used set of data fields and be applicable across languages.
108:516	(5, 8) Verification Method: Demonstration and inspection.
109:516	3.1.2 Common Gazetteer The Architecture shall provide for the use of a common Gazetteer that can support various document processing tasks in different Applications.
110:516	(5, 8) Verification Method: Demonstration and inspection.
111:516	3.1.3 Common Parts of Speech Word Lists The Architecture shall provide for the use of common parts of speech word lists with a range of different tags to support various document processing tasks in different Applications.
112:516	These are the word lists used by a part of speech tagger.
113:516	(5) Verification Method: Demonstration and inspection.
114:516	313 3.1.4 Common Grammar Rules Library The Architecture shall provide for the use of common grammar rules that can support various document processing tasks in different Applications.
115:516	This may be considered a far term requirement.
116:516	(0) Verification Method: Demonstration and inspection.
117:516	3.1.5 Common Document Structure Library The Architecture shall provide for the use of a common Document Structure Library which will store formal descriptions of the structures of specific document types to aid in their processing.
118:516	Reference (b), SGML standards, defines the concept of a DTD, Document Type Definition.
119:516	Reference (a), TEI, addresses the concept and retention of common document structures as well as methods for assembling complex structures, including graphics, multimedia and text, from basic structure definitions.
120:516	This is accomplished through the use of DTDs.
121:516	While much of the scope of Reference(a), TEI is directed to embedding the associated tagging information during document creation in order to support publication needs, it also provides supporting concepts that can be used to dynamically mark documents.
122:516	Document structure definitions are not restricted to the TEI methodology; however, whatever method is used, the document structure definition shall be stored in the Library so as to facilitate use by new Applications(0) 3.1.5.1 Basic Near Term Requirement A basic library defining commonly used message types and standard document divisions, such as communication header and text, shall be available for Applications implemented in the near term.
123:516	The near-term requirement shall be met through the use of the Core Tag Sets and the Base Tag Sets as defined in Reference (a), TEI, or optionally and less desirable, by document structure definitions not restricted to the TEI methodology; Verification Method: Demonstration and inspection.
124:516	3.1.5.2 Enhanced Far Term Requirement An enhanced library with richer membership which covers more complex document structures than the basic library shall be implemented over the long term.
125:516	The long-term requirement shall be met through the use of Additional Tag Sets as defined in Reference (a), TEl.
126:516	Verification Method: Demonstration and inspection.
127:516	3.1.6 Common SGML Tag Sets Dictionary The Architecture shall provide for the use of a Common SGML Tag Sets Dictionary The basis for these Tag Sets shall be Reference (a), TEI.
128:516	and any augmentation provided by various Applications.
129:516	(5) Verification Method: Demonstration and inspection.
130:516	3.1.7 Common Complete Template Library The Architecture shall provide for the use of a common Complete Template Library that can support various document processing tasks in different Applications.
131:516	Templates in the library shall be composed of template objects, fill rules and patterns associated with them.
132:516	This is a library of templates already defined and used by TIPSTER applications (0, 8) Verification Method: Demonstration and inspection.
133:516	3.1.8 Common Template Object Library The Architecture shall provide for the use of a common Template Object Library that can support various document processing tasks in different Applications.
134:516	The Library shall contain common objects composed of slot definitions with fill rules but without patterns.
135:516	The purpose of this library is to allow construction of templates using predefined objects.
136:516	(0, 8) Verification Method: Demonstration and inspection.
137:516	314 3.1.9 Common Pattern Library The Architecture shall provide for the use of a common Pattern Library that can support various document processing tasks in different Applications.
138:516	The purpose of this library is to provide patterns strings for use in building new template filling capability.
139:516	(0, 8) Verification Method: Demonstration and inspection.
140:516	3.1.10 Common Detection Criteria Library The Architecture shall provide for the use of a common Detection Criteria Library containing statements of user information needs as well as the associated Application translated, user understandable, queries that can support various document processing tasks in different Applications.
141:516	Reuse of such criteria can facilitate the building and modification of requests for retrieval and routing.
142:516	(0, 8) 3.1.11 Common Stemming Library The Architecture shall provide for the use of a common Stemming Library that can support various document processing tasks in different Applications.
143:516	The Library shall include word stems, prefixes and suffixes; thus a stem may be identified by direct look-up or the word may be parsed and parts compared with prefixes or suffixes, as appropriate, to identify a word stem, Stems, prefixes, suffixes may reside in separate parts of the Library so as to improve lookup efficiency.(0) Verification Method: Demonstration and inspection.
144:516	3.1.12 Common Stop Word List The Architecture shall provide for the use of common Stop Word Lists that can support various document processing tasks in different Applications.
145:516	Different Stop Word Lists shall be applicable to different parts of a document to allow for different usage/meaning of the same word.
146:516	(0) Verification Method: Demonstration and inspection.
147:516	3.1.13 Common Phrase Lists The Architecture shall provide for the use of common Phrase Lists that can be shared by various document processing tasks in different Applications.
148:516	This requirement means that domain specific Phrase Lists can be a shareable resource.
149:516	(0) Verification Method: Demonstration and inspection.
150:516	3.1.14 Common Predicate-Argument Dictionary The Architecture shall provide for the use of a common Predicate-Argument Dictionary that can support various document processing tasks in different Applications.
151:516	(0) Verification Method: Demonstration and inspection.
152:516	3.1.15 Common Term Expansion Dictionary The Architecture shall provide for the use of a common Term Expansion Dictionary that can be used to look up equivalent terms, variation terms, synonym terms or abbreviation expansions to support various document processing tasks in different Applications.
153:516	In general, there may be Application dependencies with the same term having different meanings, depending upon the Applications(0) Verification Method: Demonstration and inspection.
154:516	3.1.16 Common User Annotation Library The Architecture shall provide for the use of a common User Annotation Library that provides a repository for predefined User Annotations in the form of partially or fully completed Annotations for pre-defined document locations or associated with particular attributes that a User may use for comments about the document or the Annotations created by the Application.
155:516	Specific Annotation type(s) shall be assigned for User Annotations.
156:516	(6) 315 Verification Method: Demonstration and inspection.
157:516	3.1.17 Common Document Inverted Index The Architecture shall provide for the use of a common simple Document Inverted Index for existing and future Applications.
158:516	(0) 3.1.17.1 Legacy Applications New Applications shall share existing indices from legacy applications to the maximum extent possible.
159:516	Verification Method: Demonstration and inspection.
160:516	3.1.17.2 New Applications New Applications shall provide Application Program Interfaces (APIs) to a simple Document Inverted Index so that future Applications may use the indices to access the Application's Collection.
161:516	Verification Method: Demonstration and inspection.
162:516	3.1.18 Machine Readable Dictionaries The Architecture shall support the use of Dictionaries in machine readable form (e.g. CD-ROM) to support document processing tasks in different Applications.
163:516	316 4.0 DOCUMENT MANAGEMENT The Architecture Concept, Reference (9), identifies several typical forms of documents, Form 0 through Form 4.
164:516	Form 0 is the original document and Forms 1 and 2 are intermediate forms of the document.
165:516	The Document Management process is concerned with Form 3 and Form 4 documents.
166:516	A Form 3 document is the input to TIPSTER and Form 4 is the internal TIPSTER form.
167:516	Document sources shall be in machine readable form and may be from communication lines or from computer files.
168:516	4.1 Document Attributes There are a variety of document attributes that may be used by TIPSTER processing functions.
169:516	Some of these attributes such as Date of Information, Author or Source may be used directly by Detection to select documents.
170:516	Other attributes such as Original Language or Code Set may be used to control the internal TIPSTER processing.
171:516	The specific, necessary group of attributes is Application dependent.
172:516	See Appendix A for a list of the most common attributes that might be used by an Application.
173:516	(5) Verification Method: Inspection and demonstration.
174:516	4.2 Other Attributes Other document attributes may be specified by the Application, by the operating system, by the installation, by the user group and by the user.
175:516	These may include such varied items as: processing network configuration, access/security control information or document collection names.
176:516	(5) Verification Method: Inspection and demonstration.
177:516	4.3 Original Document A document shall always be available in an original form.
178:516	The Application may define this to be a Form 1, Form 2 or Form 3 type of document.
179:516	See Reference (9) (5) Verification Method: Demonstration.
180:516	4.4 Document Sets Documents shall be managed in such a way that ordered and unordered groups can be created.
181:516	These groups may be comprised of sets with various characteristics such as, source, publisher or discourse.
182:516	The document sets can have access controlled through Access Control that limits usage to the specified User or User Group.
183:516	4.5 Corrections Corrections to a document shall be applied so as to leave the original document, as defined in Paragraph 4.3, intact.
184:516	Corrections are made through the use of Annotations.
185:516	Revision numbers shall be associated with correction Annotations.
186:516	A new persistent document may be created by applying corrections and assigning the appropriate revision number.
187:516	Revised, corrected documents may be processed as any other Form 3 document.
188:516	It shall be possible to make corrections Annotations to corrections Annotations.
189:516	(5, 8) Verification Method: Demonstration.
190:516	4.6 Adaptive Document Structures Adaptive identification of formats and document structure may be made based upon representative documents.
191:516	This implies a degree of learning about document structures as they change over time.
192:516	Representative document structures are maintained in the Document Structure Library.
193:516	(4).
194:516	Verification Method: Demonstration and inspection.
195:516	4.7 Annotation Annotations are information added to a document by User or computer processing.
196:516	The Architecture shall recognize various types of annotations associated with specific passages of text as specified by a text span with begin and end values or the whole document.
197:516	An Annotation to an Annotation is permitted.
198:516	Also, it should be possible to obtain 317 all Annotations associated with a particular document location through specific begin and end location values.
199:516	Retrieval of Annotations should also be possible by type, by Annotation Group and for the entire document.
200:516	(5, 7, 8) 4.7.1 Permanent Annotations Provisions must be made for permanent Annotations.
201:516	These may be stored separately from the document to which they apply.
202:516	In such cases appropriate references or links shall tie the Annotations to the document.
203:516	(5, 7) Verification Method: Demonstration.
204:516	4.7.2 Multiple Usage A single annotation may be associated with multiple document locations (spans).
205:516	(5) Verification Method: Demonstration.
206:516	4.7.3 Annotation Structure Annotations shall be extensible, in accordance with the Architecture Maintenance Policy, as the Architecture matures.
207:516	In addition to a reference mechanism(span and document ID) that identifies the scope of the Annotation, the two principal parts are the Annotation Type identification and the specific information in the Annotation.
208:516	Common Annotation Types shall be defined and these definitions shall be maintained as part of the Architecture Configuration Policy.
209:516	New Annotation Types may be created.
210:516	(5) Verification Method: Inspection.
211:516	4.7.4 Annotation Groups Annotations may be treated together as sets of the same or differing types.
212:516	These groups are necessary for retrieval purposes and to control processing.
213:516	(0, 7, 8) Verification Method: Inspection 4.7.5 User Annotation A type of Annotation is required to allow the User to make notes about a document, other Annotations or the Detection and Extraction processing.
214:516	User Annotations may have access controlled by the mechanism specified in Access Control.
215:516	(6, 7, 8) Verification Method: Inspection.
216:516	4.8 Document Control Basic Document Control includes the maintenance of document collections, document lists, correction and version records, ownership record, access control and security.
217:516	(0, 8) 4.8.1 Access Control Access control mechanisms shall recognize multiple levels such as individual Users and hierarchical User Groups.
218:516	(3, 5) Verification Method: Demonstration.
219:516	4.8.2 Document Ownership Access to documents and identification of ownership shall be via one control module so as to maintain access and ownership integrity.
220:516	(5) Verification Method: Demonstration.
221:516	318 4.8.3 Version Control Successor versions to the original document shall be marked with a revision number and the document ID and the cause for revision recorded as a document history attribute.
222:516	(5) Verification Method: Demonstration.
223:516	4.8.4 External Information Applications shall not be prevented from interfacing to external source control information.
224:516	In general, the Architecture shall not restrict an Application from using: a. b. C. Any usage control or authorization required by a particular electronic feed to facilitate determination of usage charges Any access control mechanism required by a legacy system Any privacy or user ownership authorization required to add extractions to a database not normally part of the Application Any network access control parameters Any security requirements imposed by a host computer system.
225:516	(3, 4, 5, 8) d. e. Verification Method: Inspection.
226:516	4.9 Large Corpus Document Collections shall not have arbitrary size limits so as to enhance retrieval and extraction.
227:516	Detection and extraction shall be possible from a very large corpus.
228:516	Any sub-setting of the Corpus must be transparent to the User during detection and extraction operations.
229:516	(3) Verification Method: Demonstration.
230:516	4.10 Document Code Set Conversion The Architecture shall support conversion of document files written in various character encodings to a standard encoding before TIPSTER processing.
231:516	The conversion shall be from a selected set of conversion tables and a set of conversion algorithms for the documents.
232:516	The Architecture permits a standard Code Set for all internal operations.
233:516	Retention of the original document is still required.
234:516	The Architecture shall recognize on-going work of Reference (a) in the area of Code Sets.
235:516	(5, 7) Verification Method: Demonstration.
236:516	319 5.0 USER INFORMATION REQUEST User Information Requests define the manner in which the Application shall operate and perform its various tasks.
237:516	These criteria are usually originated by the User; however, they may be integral to the specific Application.
238:516	They are embodied in Selection Statements, other Detection Criteria, Queries, Routing Queryand Templates.
239:516	User commands from the User Interface component pass through the User Information Request area to initiate specific TIPSTER operations; for example, show a document, create a private collection, show a document list, etc. User information requests shall be presented in the language of the document except for two cases noted below.
240:516	5.1 User Defined Detection Criteria The User shall be able to establish the document detection criteria in a variety of formats.
241:516	These include creating a free text Selection Statement, a shorter free text need statement, example document or keyword Boolean statements with negative operators to specify the desired documents or sub-sets of documents.
242:516	Previously created and saved detection criteria may be obtained from the appropriate library and modified.
243:516	Criteria used for retrospective search and for routing shall have the same formats available.
244:516	Different types of criteria may be used together, such as a Selection Statement with keywords.
245:516	(3, 4, 6, 7, 8) 5.1.1 Selection Statements The Application should provide any necessary assistance for Selection Statement generation.
246:516	Selection Statements shall describe, in free text form, the kind of information the user requires.
247:516	The statement shall be sufficiently complete so that relevance can be determined with reasonable certainty.
248:516	The format for Selection Statements must be common and sharable between Applications.
249:516	(0, 6, 7, 8) Verification Method: Inspection.
250:516	5.1.2 Keyword Criteria Detection criteria may be stated as Boolean keyword criteria and negative operators to exclude documents.
251:516	Keyword stated criteria may include statements of document attributes, such as author, source, date of composition, date of receipt, country of origin, etc.
252:516	(0, 6, 7, 8) Verification Method: Demonstration.
253:516	5.1.3 Other Detection Criteria Other Detection Criteria may be of two types, a natural language short form query or example documents.
254:516	A natural language short form query may consist of a sentence(s) or phrase(s).
255:516	(0, 6, 7, 8) Verification Method: Demonstration.
256:516	5.1.4 Detection Criteria Retention All forms of detection criteria shall be storable in the appropriate library, should the user desire, to be retrieved and modified by that or other users.
257:516	Verification Method: Demonstration.
258:516	5.1.5 Defining Document and Criteria Zones The Architecture shall accept statements identifying the portion of a document that can be used for matching and which portions of the criteria shall be used to match a specific portion of a document.
259:516	This includes the specification of title, abstract and paragraphs as the document portion.
260:516	Weights may be assigned to signify relative importance of a portion.
261:516	(6, 7, 8) Verification Method: Demonstration.
262:516	5.1.5.1 Basic Near Term Requirement A basic capability shall be available for Applications implemented in the near term.
263:516	This shall include the ability to differentiate between different communication header fields and between communication headers and message text.
264:516	321 Verification Method: Demonstration.
265:516	5.1.5.2 Enhanced Far Term Requirement An enhanced capability with additional and more advanced zoning than the basic capability, such as referencing titles, abstracts, introductions, conclusions and captions, shall be available for Applications implemented over the long term.
266:516	Verification Method: Demonstration.
267:516	5.1.6 Query The user shall be able to view a detection component's interpretation of the submitted Detection Criteria.
268:516	This query shall be in a format that is understandable by an interested user.
269:516	The user shall be able to relate this query to both the criteria and the document it retrieves.
270:516	The user shall be able to modify this component version query directly and shall be able to create new Detection Criteria in this component's format if he learns the format.
271:516	Verification Method: Demonstration.
272:516	5.1.7 Multi-term Item Criteria In the detection process, items such as personal names, organization names, equipment names, locations, dates and identification numbers, may be treated as single units when specified as such by the user.
273:516	(0, 8) Verification Method: Demonstration.
274:516	5.1.8 Foreign Language Document Detection The Architecture shall support a detection component that allows foreign language documents to be searched or distributed using English language Selection Statements.
275:516	A multi-lingual retrieval or routing Application may have a separate module for each language it handles, but builds an index that is language independent.
276:516	The component shall return a single ranked list of documents in multiple languages.
277:516	Foreign language documents in the list may be annotated with English glosses of selected words and phrases.
278:516	The Application can provide a custom browsing interface to display annotated documents to the user.
279:516	(5, 6, 8) Verification Method: Demonstration.
280:516	5.1.9 Foreign Language Document Detection Criteria Assistance The Architecture shall allow assistance to the native speaker of English in formulating detection criteria in a foreign language.
281:516	This includes providing interfaces for a program that shall take an English Selection Statement and shall return a version of the Selection Statement in another language or several versions in several different languages.
282:516	The Architecture shall maintain the logical association between the English version of the query and the foreign language version of the query.
283:516	(6, 7, 8) Verification Method: Inspection.
284:516	5.1.10 Query and Detection Criteria Refinement Refinement of all types of Detection Criteria, including the queries for retrospective search or routing, shall be supported by the Architecture.
285:516	Relevance tags may provide guidance for the refinement; also, as an option, documents already seen may be suppressed from the re-run.
286:516	(2, 3, 8) Verification Method: Demonstration.
287:516	322 5.1.11 Rapid Query Evaluation Rapid and semi-automatic evaluation of query and profile changes with test information shall be allowed.
288:516	It shall be possible to compare the results from pairs of Detection Criteria so as to evaluate query specifications.
289:516	(4, 6, 7, 8) Verification Method: Demonstration.
290:516	5.1.12 Prioritization of Selection Statements The Architecture shall allow prioritization to affect the manner in which documents are retrieved and presented for review.
291:516	Priorities may be attached to Detection Criteria, including Selection Statements or portions thereof.
292:516	In particular, the User shall be able to prioritize references to personalities, events, objects, times, or locations as welt as identifying the priority of Detection Criteria in a submission of multiple criteria statements.
293:516	(6, 7, 8) Verification Method: Demonstration and inspection.
294:516	5.2 User Defined Extraction Criteria Presently, this process is labor intensive and requires a co-operative effort between Users and Application developers.
295:516	The objective is to allow the End User or Developer to establish the criteria for extracting information from documents.
296:516	This may include creating Templates, Patterns and Fill Rules needed for extraction and keeping items in libraries for future use.
297:516	Toward this objective the Architecture should support more automation with interactive assistance to the User and Developer in preparing these items.
298:516	Sample or training Templates may be used to assist the User.
299:516	(0, 4, 7, 8) Verification Method: Demonstration.
300:516	5.2.1 Template Schema The Architecture shall accept as input Template Schema with empty slot relationships and treated as formatted information.
301:516	Templates may be of varying complexity, from just single entities to Message Understanding Conference (MUC) type Templates.
302:516	The language used to specify Template Schema should be that which is evolving under MUC.
303:516	(0, 5, 8).
304:516	Verification Method: Demonstration.
305:516	5.2.2 Fill Rules The Architecture allows the specification of criteria for correct filling of each template slot and object.
306:516	These criteria may be provided as a "Fill Rules Document" or as a sufficient number of examples of correct fills with context obtained from sample text.
307:516	The extraction component shall determine how to fill the Template based upon these criteria.
308:516	(0, 8) Verification Method: Inspection.
309:516	5.2.2.1 Basic Capability The basic capability shall involve developers manually (or through appropriate toolsets) building an Extraction component, based upon narrative descriptions of the Fill Rules and/or the examples of correct fills.
310:516	Verification Method: Demonstration.
311:516	5.2.2.2 Enhanced Capability The enhanced capability shall be based upon machine tractable Fill Rules and/or automatically developed rules from examples.
312:516	Verification Method: Demonstration.
313:516	5.2.3 Constructing New Template Schema The Architecture shall permit complete Templates, Template Objects and Patterns to be stored in their respective libraries.
314:516	These items may be retrieved, modified and stored as new items.
315:516	When Templates Objects are retrieved the Fill Rules associated with each slot shall also be retrieved to assist in understanding existing Templates, 323 constructing new Templates or modifying the fill criteria.
316:516	Template Objects and Patterns may be selected, modified and re-combined or attached to different Templates to establish new extraction criteria.
317:516	(2, 4, 7, 8) Verification Method: Demonstration.
318:516	5.2.3.1 Manual Processes In the near term, Templates Objects and Patterns, that is the component specific structures which allow the extraction component to recognize slot fills, shall be constructed/combined by manual or semi-automated processes and the appropriate libraries updated by normal maintenance operations.
319:516	(2) Verification Method: Demonstration.
320:516	5.2.3.2 Automated Processes In the future, the Architecture shall allow construction/combining of Templates Objects and Patterns by automated processes and the libraries updated automatically.
321:516	The goal is to permit the development of Template Schema and fill criteria connected to component specific patterns via an interactive process by a user with subject domain knowledge.
322:516	(2, 4, 7, 8) Verification Method: Demonstration.
323:516	5.2.4 Template Slot Filling This requirement is applicable to Requirements 5.2.1, 5.2.2 and 5.2.3.
324:516	The Architecture shall support, as a minimum, the following information types as slot fillers: a. String fills b. Set fills c. Hierarchical set fills d. Normalized fills e. Pointers to other entities.
325:516	The Architecture shall specify how to store and pass filled Templates between components as well as the detail representation of these types.
326:516	Filled templates shall appear as Annotations with links to relevant text spans in the source document.
327:516	Security requirements are applicable to this requirement.
328:516	(6, 7, 8) Verification Method: Demonstration and inspection.
329:516	5.2.5 Multi-lingual Extraction The Architecture shall allow a multi-lingual extraction component that represents Template definition in any combination of multi-lingual Fill Rules, Template Objects, slots and documents.
330:516	For example, Fill Rules may be in a language different than the language of the source document.
331:516	The Architecture shall support Template, Object and slot-level language and code set identification, as necessary, either in the Template Schema (5.2.1) or in individual filled Templates.
332:516	(6, 7, 8) Verification Method: Inspection.
333:516	5.3 Document Clustering The Architecture shall allow requests for document clustering provided the appropriate clustering algorithms and interfaces to Document Management and User Information Output are established.
334:516	(0) Verification Method: Inspection.
335:516	324 6.0 USER INFORMATION OUTPUT User Information Outputs are all of the selected or computed information that is created by the processing initiated by the User Information Input in the form of criteria and commands.
336:516	User Information Outputs are passed to the non-TIPSTER User Interface component that provides services identified in Paragraph 1.7.
337:516	(0, 3, 4, 5) 6.1 Document Viewing The Architecture shall allow an Application to define which parts of formatted or structured documents, including document attributes, summaries, abstracts, subject, word delineated zones, etc. , get displayed when a document is shown to the user.
338:516	The Architecture shall allow viewing of documents to commence before a query operation is completed, if appropriate for the particular detection component.
339:516	(3, 4, 5, 6, 7, 8) Verification Method: Demonstration.
340:516	6.2 Document Ordering Architecture shall allow the User to order document lists to support document viewing by any document attribute(s), result(s), Annotation(s), Template(s), slots or combination thereof related to document Detection or Extraction processing.
341:516	For example, view by date, source, relevance rank and template slot.
342:516	(4, 5, 6, 7, 8) Verification Method: Demonstration.
343:516	6.3 Merged Results The Architecture shall allow detection results from different collections or different detection components to be combined for viewing proposes.
344:516	A common sorting and priority ordering may be applied by the User.
345:516	(6, 7, 8) Verification Method: Demonstration.
346:516	6.4 Document Grouping The Architecture shall allow the grouping of documents based upon common occurrences of specific strings, nearly identical passages of text or similar Template Objects.
347:516	The selection specification may identify the length of the string that is considered for "identical" selection.
348:516	Identical or nearly identical documents may be viewed together or removed from the viewing list.
349:516	The output shall result from either finding all "identical" documents in a collection which match a specific document or finding all "identical" documents in a collection based only on the selection specification.
350:516	(6, 7, 8) Verification Method: Demonstration.
351:516	6.5 Marking of Significant Text The Architecture shall support tagging of the text strings in a document, that caused selection of the document so that when the document is passed to the User Interface for viewing highlighting or other notification may be applied.
352:516	The Architecture shall also support tagging of text that caused a particular slot to be filled.
353:516	Additionally, text that caused template or object instantiation shall be tagged.
354:516	(6, 7, 8) Verification Method: Demonstration.
355:516	6.6 Viewing and Editing Filled Templates The Architecture shall make filled Templates available to the User Interface for viewing, editing and disposition.
356:516	Editing includes modification or deletion of any tags or links.
357:516	Any assessment of the component confidence of the slot fills shall also be available for viewing and if tags or links were edited by the user the confidence field may also be edited.
358:516	(5, 6, 7) Verification Method: Demonstration.
359:516	325 6.7 Component Processing Confidence The detection and extraction components may provide an estimate of the component confidence level about each document selected or each piece of information that has been extracted.
360:516	In the case of the extraction component estimate, it is the component's confidence in its process for filling each slot.
361:516	(6, 7) Verification Method: Demonstration and inspection.
362:516	6.8 Processing Log The Architecture shall allow an Application to create a Processing Log which records each individual process step of an Application run and any related errors.
363:516	The log may be turned on or off or particular levels of reporting may be selected, e.g. critical error, warning error, etc.
364:516	(4) Verification Method: Demonstration.
365:516	6.9 Document Processing Statistics The Architecture shall allow an Application to collect document processing and error statistics.
366:516	Processing statistics shall include various counts related to document processing and progress status during runs.
367:516	Error statistics shall include counts of the number of times particular errors occurred.
368:516	The specific level and scope of operational statistics is Application dependent, but may include Document Management, Detection and Extraction statistical items.
369:516	(3, 7) Verification Method: Demonstration.
370:516	6.10 Error and Diagnostic Messages Error reporting shall be done through an error message format which is common to all Applications.
371:516	The diagnostic portion of message shall indicate the source and cause of the error and if possible the correction necessary to fix the error.
372:516	(0) Verification Method: Demonstration.
373:516	326 7,0 SCOPE OF PROCESSING SERVICES The Architecture shall address document detection and information extraction.
374:516	The statistical, linguistic and semantic analysis performed by Detection and Extraction may be considered the key work of TIPSTER processing.
375:516	It is here that document information is manipulated, in various ways, to support the identification of a desired sub-set of documents or extracted information.
376:516	This is accomplished by applying Persistent Knowledge information in conjunction with matching algorithms, annotations and template/pattern matching techniques to reduce a Document Collection to the desired sub-set or to extract information from the Document Collection.
377:516	This sub-set or its extracted information is then presented to the user, passed to other components or stored for later use.
378:516	The analytical methods and tools representative of the techniques to be applied to this functional area are given in Appendix B; however, this list should not be considered either exhaustive or restrictive.
379:516	The Architecture shall support various generic information types that are applicable to TIPSTER processes.
380:516	The use of any particular type of information is dependent upon the Application.
381:516	Appendix C gives a list of the more common generic types that may be used by an Application.
382:516	(0, 5, 7, 8) 7.1 Detection The Detection process shall use the Detection Criteria in conjunction with Document Management and the Persistent Knowledge Repository to select and route documents from document sets.
383:516	The specific search and identification algorithms are dependent upon the particular Application.
384:516	Annotations may be created and/or used by the Detection component.
385:516	The Detection component shall be compatible with other components and modules of the TIPSTER Architecture.
386:516	(0, 7, 8) 7.1.1 Compiled Query Creation Compiled Queries are the forms of the Detection Criteria, generated by the detection capability from the Selection Statement and used for document selection.
387:516	Compiled Queries operate for both retrospective retrieval and routing applications.
388:516	Compiled Queries shall indicate and retrieve the document sub-sets that are of interest to the User.
389:516	Query generation may be done automatically by the Application or with help from the User.
390:516	(3, 6, 7, 8) Verification Method: Demonstration.
391:516	7.1.2 Attribute and Text Retrievability Retrieval must be allowed on any document text string or attribute, such as source, author, date, etc. Retrieval must also be allowed on Annotations by type, Annotation Group and User Annotations.
392:516	(5, 6, 7, 8) Verification Method: Demonstration.
393:516	7.1.3 Query Grouping Multiple queries may be applied in one pass against a specific collection.
394:516	(6, 7) Verification Method: Demonstration.
395:516	7.1.4 Relevance Estimates The query process shall determine and report relevance estimates.
396:516	(3, 7, 8) Verification Method: Demonstration.
397:516	7.1.5 Multiple Document Sets Queries may be simultaneous applied to multiple document sets.
398:516	(6, 8) Verification Method: Demonstration.
399:516	7.1.6 Routing Considerations Every document detection component shall be able to serve as part of a document routing function that compares new documents from a specified source to, potentially, very large numbers of profiles from many users.
400:516	The routing function is expected to have compared, within some specified interval that may be minutes to hours, each new 327 document with all profiles.
401:516	Certain categories of documents shall be processed at higher priority than others, if required by the Application, for example, FLASH messages before ROUTINE messages.
402:516	Depending upon the Application, as soon as a document has been routed, it must be available for retrospective search.
403:516	In these cases the routing process shall coordinate its operations with the process that controls the indexing of documents for search and retrieval.
404:516	(3, 6, 7, 8) Verification Method: Demonstration and inspection.
405:516	7.1.7 Prioritization of Documents Documents may be assigned priorities based on matches between documents and prioritized portions of queries, profiles and Selection Statements.
406:516	Various algorithms for combining weights, when there are multiple matches in one document, may be selected.
407:516	Priority scores can be weighted, based on where in the document the match occurs, such as title, source attribute, etc. If any portion of a document matches a portion of a query that has a priority attribute, then the document is assigned that priority.
408:516	The priority can be scaled, based on where in the document the match occurs.
409:516	If several such portions of the query match, then an algorithm can combine priorities to get a net priority for the document.
410:516	The priority, once calculated is available as an attribute for sorting documents for subsequent processing, whether viewing by the user, information extraction, or subsequent routing.
411:516	(6, 7, 8) Verification Method: Demonstration and Inspection.
412:516	7.2 Information Extraction The Extraction process shall use Templates, Fill Rules, Patterns or other methods in conjunction with Document Management, Detection and the Persistent Knowledge Repository to extract desired information from documents in Document Collections.
413:516	The specific extraction methodology and algorithms are dependent upon the particular Application.
414:516	Annotations may be created and/or used by the Extraction component.
415:516	The Extraction component shall be compatible with other components and modules of the TIPSTER Architecture.
416:516	Typical factual information to be extracted includes, but is not limited to, entities, objects, events, entity relationships and event relationships.
417:516	(6, 7, 8) 7.2.1 Extraction Input From Detection The Architecture shall support the concept of using Detection to filter documents as the input to the Extraction process, however, the Extraction process may operate independently from the Detection process, if required by the Application.
418:516	(0, 8) Verification Method: Demonstration and inspection.
419:516	7.2.2 Criteria Processing By Extraction The Architecture shall support the processing of Selection Statements and the natural language portions of the user defined Detection Criteria by the Extraction component, i.e. the desired information to be extracted may be specified through the use of natural language and the specifics identified by an Extraction component.
420:516	The resulting specifics can be used to aid in the query formulation.
421:516	(0) Verification Method: Demonstration.
422:516	7.2.3 Abstracts The Architecture shall allow Extraction to provide Abstracts or document summaries.
423:516	The specific quality and content of the Abstract are Application dependent.
424:516	(0, 8) Verification Method: Demonstration.
425:516	7.2.4 Extraction Objects The Architecture shall recognize a standard set of objects.
426:516	All information extraction components are expected to be able to extract instances of these objects.
427:516	These objects are expected to be part of an expanding library that shall be augmented as Applications are implemented.
428:516	See Paragraph 3.1.8.
429:516	(6, 8) Verification Method: Demonstration and inspection.
430:516	328 7.2.5 Output of Annotations or Filled Templates The output of an information extraction component may include a set of document Annotations and optionally, one or more lists of filled templates.
431:516	Each template should support a tabular or spreadsheet view of extracted information.
432:516	The building of a data base is beyond the scope of the Architecture.
433:516	However, it shall support the access to specific information to build a data base by allowing an Application to use filled templates.
434:516	(6, 7, 8) Verification Method: Demonstration and inspection.
435:516	7.2.6 Finding Identical Documents The Architecture shall provide for identifying documents as identical or nearly identical through Detection, Extraction or other methods.
436:516	(6) Verification Method: Demonstration and inspection.
437:516	7.2.7 Extraction Evaluation The Architecture shall provide an interface to existing standard extraction module evaluation tools.
438:516	This shall include the use of a test corpora, although actual evaluation is not part of the Architecture.
439:516	(6, 8) Verification Method: Demonstration and inspection.
440:516	329 8,0 INTERFACE CONTROL DOCUMENT The Interface Control Document is the defining document identifying specific inputs and outputs for TIPSTER components and modules.
441:516	8.1 Modularity The Architecture shall provide for modularity.
442:516	The ICD shall unambiguously define the Architecture component interfaces.
443:516	These interfaces shall describe all the external information needed by the component.
444:516	This serves to bound the component and there-by modularizing it.
445:516	(2, 5, 8) Verification Method: Inspection.
446:516	8,2 Interchangeability The Architecture shall provide for interchangeability.
447:516	The ICD shall unambiguously define the Architecture component interfaces.
448:516	The inputs and outputs shall be defined with sufficient detail to allow an Application's TIPSTER components and modules to be exchanged with similar TIPSTER components or modules.
449:516	This shall also allow vendors to develop alternative components that also meet the specifications of the ICD.
450:516	In this way, the components shall be Interchangeable.
451:516	(2, 8) Verification Method: Inspection.
452:516	8.3 Specific Interfaces and Protocols The Architecture shall provide for specific interfaces and protocols.
453:516	The ICD shall unambiguously define the Architecture component interfaces.
454:516	This shall include any specific standards and protocols allowed in the Architecture.
455:516	Included in this requirement is the specification of Application Program Interfaces (API).
456:516	(0) Verification Method: Inspection.
457:516	8.4 Application Language Interfaces should be specified to facilitate future development of an Application language.
458:516	Such a high levcl language would allow the construction of Applications by use of APIs corresponding to various modules and components of the Architecture.
459:516	(5) Verification Method: Inspection.
460:516	8.5 Extensible Architecture The Architecture shall provide for extension and adoption of new implementation approaches.
461:516	The ICD shall unambiguously define the Architecture component interfaces.
462:516	This shall provide a basis for any future enhancements to the Architecture.
463:516	Enhancements can only be envisioned and designed when the base Architecture is well defined.
464:516	(o) Verification Method: Inspection 331 9.0 OPERATING ENVIRONMENT The Operating Environment is concerned with such items as client/server schemes, file handling methods, operating systems, communications and support items.
465:516	9.1 Research Framework The Architecture shall provide a design that can serve as an efficient research framework.
466:516	(2) Verification Method: Demonstration.
467:516	9.2 Transportability The Architecture shall provide a design that maximizes platform transportability.
468:516	The use of capabilities which are Operating System or environment dependent must be clearly identified and modularized so as to isolate them from transportable components and modules.
469:516	(2, 3, 4, 8) Verification Method: Inspection and demonstration 9.3 Scaleability Components shall be scaleable to a large number of documents and a high document flow rate; up to a maximum of 1,000,000 documents per day with access to 2 terabytes of text.
470:516	(2, 3, 4, 5, 8) Verification Method: Inspection.
471:516	9.4 Tools Tools and enhancements to assist in applying the Architecture to new tasks, applications and languages should be identified and, where possible, developed.
472:516	(1, 7) Verification Method: Demonstration.
473:516	333 10.0 HIGH LEVEL GOALS These requirements represent goals that are applicable to the entire Architecture but are not assigned to specific functional areas.
474:516	10.1 Robustness The Architecture shall recognize the importance of robustness\[doesn't "break"\].
475:516	(3, 4) Verification Method: Inspection.
476:516	10.2 Plug & Play Components The Architecture shall recognize the need, where possible, to have modularity for the purpose of plug-and-play, reuse of software, ease of development, minimum maintenance and extended Application life time.
477:516	(2, 3, 4, 7, 8) Verification Method: Inspection and demonstration.
478:516	10.3 Common Functions The Architecture shall support the use of common functions that are Application independent for Application implementation.
479:516	(5, 8) Verification Method: Inspection and demonstration.
480:516	10.4 COTS Packages Applications shall use COTS packages to the maximum extent possible.
481:516	(2, 3, 4, 5, 8) Verification Method: Inspection and demonstration.
482:516	10.5 Security Considerations Architectural choices should recognize the desirability of incorporating multi-level security in component implementation.
483:516	The Architecture shall support the Application security requirements of the organization responsible for the Application, for example, security labels on processes and/or data items.
484:516	In such cases labels shall not be separable from the process or data item.
485:516	(5, 8) The architecture shall support physical and software boundaries to devices where documents and data are stored.
486:516	The boundaries shall ensure that persons only have access to the appropriate level of classified information.
487:516	These may be implemented at the API level of the software components.
488:516	Auditing and administrative support shall be available for marking and filtering data to ensure proper document/data access, distribution and viewing and also to record improper access attempts.
489:516	The scope of marking of data may be at the document, paragraph, data item or object level.
490:516	Verification Method: Inspection.
491:516	10.6 Development Time The Architecture shall recognize, as a goal, the need to minimize Application development time.
492:516	(2, 8) Verification Method: Inspection.
493:516	10.7 Maintenance Cost The Architecture shall recognize, as a goal, the need to minimize Application maintenance cost.
494:516	(2) Verification Method: Inspection.
495:516	10.8 Application Lifetime The Architecture shall recognize, as a goal, the need extend an Application's lifetime through Application upgrading.
496:516	(2) Verification Method: Inspection.
497:516	335 10.9 Minimize Skilled Labor The Architecture shall minimize the need for special skills in programming or information preparation when operating and adjusting Applications.
498:516	(3, 4) Verification Method: Inspection.
499:516	10.10 Manual Intervention The Architecture shall minimize the need for manual intervention, when appropriate.
500:516	(3) Verification Method: Inspection.
501:516	10.11 Multi-media The Architecture shall recognize the future need for multi-media processing and transport.
502:516	(3) Verification Method: Demonstration.
503:516	10.12 Response Time The Architecture shall recognize the importance of appropriate response times, particularly in the interactive mode, and not impede implementations from meeting accepted standards.
504:516	The goal is 2 seconds for interactive activities such as document or list displays and a few tens of seconds for activities such as query or search that require significant computer resources.
505:516	(2, 3, 8) Verification Method: Inspection and demonstration.
506:516	APPENDIX A Document Attributes The list below identifies typical Document Attributes that may be encountered in any TIPSTER Application.
507:516	This list is open ended.
508:516	The actual attributes are dependent upon the specific TIPSTER Application.
509:516	Descriptions of attributes marked with * may be found in Reference (a).
510:516	Form 1 Document ID Form 1 Document Location Form 2 Document ID Form 2 Document Location Form 3 Document ID Form 3 Document Location Document owner Primary source Secondary source Original languages Other languages Character code set Date/time received Date published Date of information Author(s) Publisher 336 Discourse Category Document type Revision number Reason for revision Document condition flag Security classification *Title *Sponsor *Funder *Principal *Intellectual responsibility person *Edition, *Date of information *Publication date *Distributor *Authority to distribute *Place published *Publishing address *Publishing idno *Publishing restrictions *Series title *Series idno *Series intellectual responsibility *Notes *Bibliographic title reference *Bibliographic extract type *Editor *Transcribe recording method *Transcribe recording equipment *Encoding description *Encoding project description *Encoding sampling *Encoding editorializing *Encoding tags *Encoding references 337 *Profile description, *Language usage *Text description *Text description *Text description *Text description *Text description *Text description *Text description *Text description *Text description purpose *Text classification *Text classification keyword *Text classification code *Text classification category reference *Editorial correction *Editorial normalization *Editorial quotation *Editorial hyphenation *Editorial segmentation *Editorial standardization values *Editorial interpretation channel constitution derivation domain factuality interaction preparedness The identification and location of major document parts such as: Graphics Tables Text body Multi-media part The identification and location of major document structural elements such as: Beginning of a Form 3 Document End of a Form 3 Document Communication Header Title Abstract Names of saved information that is associated with a document as a result of TIPSTER processing, such as: Annotation group names Annotation group locations 338 Private collection names Data Base Name for extracted information Record identifier for extracted information 339 APPENDIX B Analytical Methods The list below identifies Typical Analytical Methods that may be encountered in any TIPSTER Application.
511:516	list is open ended.
512:516	The use of a particular method is dependent upon the specific TIPSTER Application.
513:516	Matching conditions and exceptions Coreference tagging Document annotating Document corrections (spelling) Dot products Field and range comparison Likelihood computation Part of speech tagging Probability computation Relevance ranking SGML tagging N-gram retrieval Sorting Statistical metrics TF/IDF scaling Template and pattern building Threshold limits Statement of Relevance analysis Vector representation This 341 APPENDIX C Generic Information Types The list below identifies typical Generic Types that may be encountered in any TIPSTER Application.
514:516	open ended.
515:516	The use of particular types is dependent upon the specific TIPSTER Application.
516:516	Annotation Collection list Correction Document attribute Attribute list Document collection Document list Document part tag Fill Rules Form 3 Document Form 4 Document Index (inverted, general) List (general) Persistent Knowledge Repository Item Pattern Profile Query Relevance value Saved item (File) SGML Tag Template Statement of Relevance User request command User output information This list is 343


Analysis of Mixed Natural and Symbolic Language Input in Mathematical Dialogs Magdalena Wolska Ivana Kruijff-Korbayov´a Fachrichtung Computerlinguistik Universit¨at des Saarlandes, Postfach 15 11 50 66041 Saarbr¨ucken, Germany a0 magda,korbay a1 @coli.uni-sb.de Abstract Discourse in formal domains, such as mathematics, is characterized by a mixture of telegraphic natural language and embedded (semi-)formal symbolic mathematical expressions.
We present language phenomena observed in a corpus of dialogs with a simulated tutorial system for proving theorems as evidence for the need for deep syntactic and semantic analysis.
We propose an approach to input understanding in this setting.
Our goal is a uniform analysis of inputs of different degree of verbalization: ranging from symbolic alone to fully worded mathematical expressions.
1 Introduction
Our goal is to develop a language understanding module for a flexible dialog system tutoring mathematical problem solving, in particular, theorem proving (Benzm¨uller et al., 2003a).1 As empirical findings in the area of intelligent tutoring show, flexible natural language dialog supports active learning (Moore, 1993).
However, little is known about the use of natural language in dialog setting in formal domains, such as mathematics, due to the lack of empirical data.
To fill this gap, we collected a corpus of dialogs with a simulated tutorial dialog system for teaching proofs in naive set theory.
An investigation of the corpus reveals various phenomena that present challenges for such input understanding techniques as shallow syntactic analysis combined with keyword spotting, or statistical methods, e.g., Latent Semantic Analysis, which are commonly employed in (tutorial) dialog systems.
The prominent characteristics of the language in our corpus include: (i) tight interleaving of natural and symbolic language, (ii) varying degree of natural language verbalization of the formal mathematical 1This work is carried out within the DIALOG project: a collaboration between the Computer Science and Computational Linguistics departments of the Saarland University, within the Collaborative Research Center on Resource-Adaptive Cognitive Processes, SFB 378 (www.coli.uni-sb.de/ sfb378).
content, and (iii) informal and/or imprecise reference to mathematical concepts and relations.
These phenomena motivate the need for deep syntactic and semantic analysis in order to ensure correct mapping of the surface input to the underlying proof representation.
An additional methodological desideratum is to provide a uniform treatment of the different degrees of verbalization of the mathematical content.
By designing one grammar which allows a uniform treatment of the linguistic content on a par with the mathematical content, one can aim at achieving a consistent analysis void of example-based heuristics.
We present such an approach to analysis here.
The paper is organized as follows: In Section 2, we summarize relevant existing approaches to input analysis in (tutorial) dialog systems on the one hand and analysis of mathematical discourse on the other.
Their shortcomings with respect to our setting become clear in Section 3 where we show examples of language phenomena from our dialogs.
In Section 4, we propose an analysis methodology that allows us to capture any mixture of natural and mathematical language in a uniform way.
We show example analyses in Section 5.
In Section 6, we conclude and point out future work issues.
2 Related
work Language understanding in dialog systems, be it with text or speech interface, is commonly performed using shallow syntactic analysis combined with keyword spotting.
Tutorial systems also successfully employ statistical methods which compare student responses to a model built from preconstructed gold-standard answers (Graesser et al., 2000).
This is impossible for our dialogs, due to the presence of symbolic mathematical expressions.
Moreover, the shallow techniques also remain oblivious of such aspects of discourse meaning as causal relations, modality, negation, or scope of quantifiers which are of crucial importance in our setting.
When precise understanding is needed, tutorial systems either use menuor template-based input, or use closed-questions to elicit short answers of little syntactic variation (Glass, 2001).
However, this conflicts with the preference for flexible dialog in active learning (Moore, 1993).
With regard to interpreting mathematical texts, (Zinn, 2003) and (Baur, 1999) present DRT analyses of course-book proofs.
However, the language in our dialogs is more informal: natural language and symbolic mathematical expressions are mixed more freely, there is a higher degree and more variety of verbalization, and mathematical objects are not properly introduced.
Moreover, both above approaches rely on typesetting and additional information that identifies mathematical symbols, formulae, and proof steps, whereas our input does not contain any such information.
Forcing the user to delimit formulae would reduce the flexibility of the system, make the interface harder to use, and might not guarantee a clean separation of the natural language and the non-linguistic content anyway.
3 Linguistic
data In this section, we first briefly describe the corpus collection experiment and then present the common language phenomena found in the corpus.
3.1 Corpus
collection 24 subjects with varying educational background and little to fair prior mathematical knowledge participated in a Wizard-of-Oz experiment (Benzm¨uller et al., 2003b).
In the tutoring session, they were asked to prove 3 theorems2: (i) a0a2a1a3a1a5a4a7a6a9a8a11a10a13a12a14a1a16a15a2a6a11a17a18a10a3a10a20a19a21a1a5a0a2a1a5a4a22a10a23a12a11a0a2a1a5a8a11a10a3a10a13a6 a1a5a0a2a1a16a15a24a10a25a12a26a0a2a1a5a17a26a10a3a10 ; (ii) a4a2a12a26a8a28a27a30a29a31a1a3a1a5a4a32a6a30a15a33a10a25a12a34a1a5a8a35a6a30a15a24a10a3a10 ; (iii) a36a38a37a23a4a40a39a32a0a2a1a5a8a11a10a42a41a3a43a45a44a13a46a48a47a49a8a28a39a32a0a2a1a5a4a50a10. To encourage dialog with the system, the subjects were instructed to enter proof steps, rather than complete proofs at once.
Both the subjects and the tutor were free in formulating their turns.
Buttons were available in the interface for inserting mathematical symbols, while literals were typed on the keyboard.
The dialogs were typed in German.
The collected corpus consists of 66 dialog logfiles, containing on average 12 turns.
The total number of sentences is 1115, of which 393 are student sentences.
The students’ turns consisted on average of 1 sentence, the tutor’s of 2.
More details on the corpus itself and annotation efforts that guide the development of the system components can be found in (Wolska et al., 2004).
2a51 stands for set complement and a52 for power set.
3.2 Language
phenomena To indicate the overall complexity of input understanding in our setting, we present an overview of common language phenomena in our dialogs.3 In the remainder of this paper, we then concentrate on the issue of interleaved natural language and mathematical expressions, and present an approach to processing this type of input.
Interleaved natural language and formulae Mathematical language, often semi-formal, is interleaved with natural language informally verbalizing proof steps.
In particular, mathematical expressions (or parts thereof) may lie within the scope of quantifiers or negation expressed in natural language: A aucha53a55a54a57a56a59a58a49a60 [a61a63a62a3a64a65a67a66a68a53a63a69a70a56a72a71a49a60] Aa73 B ista74 von Ca75 (Aa73 B) [... isa74 of . . . ] (da ja Aa73 B=a76 ) [(because Aa73 B=a76 )] B enthaelt kein xa74 A [B contains no xa74 A] For parsing, this means that the mathematical content has to be identified before it is interpreted within the utterance.
Imprecise or informal naming Domain relations and concepts are described informally using imprecise and/or ambiguous expressions.
A enthaelt B [A contains B] A muss in B sein [A must be in B] where contain and be in can express the domain relation of either subset or element; B vollstaendig ausserhalb von A liegen muss, also im Komplement von A [B has to be entirely outside of A, so in the complement of A] dann sind A und B (vollkommen) verschieden, haben keine gemeinsamen Elemente [then A and B are (completely) different, have no common elements] where be outside of and be different are informal descriptions of the empty intersection of sets.
To handle imprecision and informality, we constructed an ontological knowledge base containing domain-specific interpretations of the predicates (Horacek and Wolska, 2004).
Discourse deixis Anaphoric expressions refer deictically to pieces of discourse: der obere Ausdruck [the above term] der letzte Satz [the last sentence] Folgerung aus dem Obigen [conclusion from the above] aus der regel in der zweiten Zeile [from the rule in the second line] 3As the tutor was also free in wording his turns, we include observations from both student and tutor language behavior.
In the presented examples, we reproduce the original spelling.
In our domain, this class of referring expressions also includes references to structural parts of terms and formulae such as “the left side” or “the inner parenthesis” which are incomplete specifications: the former refers to a part of an equation, the latter, metonymic, to an expression enclosed in parenthesis.
Moreover, these expressions require discourse referents for the sub-parts of mathematical expressions to be available.
Generic vs.
specific reference Generic and specific references can appear within one utterance: Potenzmenge enthaelt alle Teilmengen, also auch (Aa73 B) [A power set contains all subsets, hence also(Aa73 B)] where “a power set” is a generic reference, whereas “a4a32a12a26a8 ” is a specific reference to a subset of a specific instance of a power set introduced earlier.
Co-reference4 Co-reference phenomena specific to informal mathematical discourse involve (parts of) mathematical expressions within text.
Da, wenn a0a2a1a5a53a13a54a57a56a59a58a4a3a42a60 sein soll, a0a2a1 Element vona54a57a56a58a5a3 a60 sein muss.
Und wenna58a2a6 a53a13a54a57a56a7a0a2a8a60 sein soll, muss a9a11a10a12a6 auch Element vona54a57a56a7a0 a8a60 sein.
[Because if it should be that a0a2a1a16a53a13a54a57a56a58a5a3 a60, a0a2a1 must be an element ofa54a57a56a59a58a5a3a42a60.
And if it should be thata58 a6 a53a13a54a57a56a7a0 a8a60, it must be an element ofa54a57a56a7a0 a8a60 as well.] Entities denoted with the same literals may or may not co-refer: DeMorgan-Regel-2 besagt:a54a57a56a7a0a13a1 a73 a58a4a3 a60 =a54a57a56a7a0a2a1a60a75 a54a57a56a59a58a4a3 a60 In diesem Fall: z.B.a54a57a56a14a0a2a1a72a60 = dem Begriffa54a57a56a14a0 a6 a75a38a58 a8 ) a54a57a56a59a58a4a3a42a60 = dem Begriffa54a57a56a16a15a22a75a18a17 a60 [DeMorgan-Regel-2 means:a54a57a56a7a0a13a1a73 a58a5a3 )a19 a54a57a56a7a0a2a1a60a75 a54a57a56a59a58a4a3a42a60 In this case: e.g.a54a57a56a7a0a2a1a72a60 = the terma54a57a56a14a0 a6 a75 a58 a8a60 a54a57a56a59a58a4a3a42a60 = the terma54a57a56a14a15a22a75a20a17 a60] Informal descriptions of proof-step actions Sometimes, “actions” involving terms, formulae or parts thereof are verbalized before the appropriate formal operation is performed: Wende zweimal die DeMorgan-Regel an [I’m applying DeMorgan rule twice] damit kann ich den oberen Ausdruck wie folgt schreiben:.
. . [given this I can write the upper term as follows:.
. . ] The meaning of the “action verbs” is needed for the interpretation of the intended proof-step.
Metonymy Metonymic expressions are used to refer to structural sub-parts of formulae, resulting in predicate structures acceptable informally, yet incompatible in terms of selection restrictions.
Dann gilt fuer die linke Seite, wenn a21a23a22a25a24a27a26a29a28a31a30a33a32a35a34a36a24a7a26a29a22a31a21a37a32a38a28a25a24a27a30a39a22a40a21a37a32, der Begriff A a28 B dann ja schon dadrin und ist somit auch Element davon [Then for the left hand side it holds that..., the term A a28 B is already there, and so an element of it] 4To indicate co-referential entities, we inserted the indices which are not present in the dialog logfiles.
where the predicate hold, in this domain, normally takes an argument of sort CONST, TERM or FORMULA, rather than LOCATION; de morgan regel 2 auf beide komplemente angewendet [de morgan rule 2 applied to both complements] where the predicate apply takes two arguments: one of sort RULE and the other of sort TERM or FORMULA, rather than OPERATION ON SETS.
In the next section, we present our approach to a uniform analysis of input that consists of a mixture of natural language and mathematical expressions.
4 Uniform
input analysis strategy The task of input interpretation is two-fold.
Firstly, it is to construct a representation of the utterance’s linguistic meaning.
Secondly, it is to identify and separate within the utterance: (i) parts which constitute meta-communication with the tutor, e.g.: Ich habe die Aufgabenstellung nicht verstanden.
[I don’t understand what the task is.] (ii) parts which convey domain knowledge that should be verified by a domain reasoner; for example, the entire utterance a41 a24a42a24a27a26a29a22a40a30a33a32a43a32 ist laut deMorgan-1 a41 a24a7a26a44a32a38a28 a41 a24a27a30a2a32 [.
. . is, according to deMorgan-1,.
. . ] can be evaluated; on the other hand, the domain reasoner’s knowledge base does not contain appropriate representations to evaluate the correctness of using, e.g., the focusing particle “also”, as in: Wenn A = B, dann ist A auch a45 a41 a24a27a30a2a32 und B a45 a41 a24a27a26a44a32 . [If A = B, then A is also a45 a41 a24a27a30a2a32 and B a45 a41 a24a27a26a44a32 .] Our goal is to provide a uniform analysis of inputs of varying degrees of verbalization.
This is achieved by the use of one grammar that is capable of analyzing utterances that contain both natural language and mathematical expressions.
Syntactic categories corresponding to mathematical expressions are treated in the same way as those of linguistic lexical entries: they are part of the deep analysis, enter into dependency relations and take on semantic roles.
The analysis proceeds in 2 stages: 1.
After standard pre-processing,5 mathematical expressions are identified, analyzed, categorized, and substituted with default lexicon entries encoded in the grammar (Section 4.1). 5Standard pre-processing includes sentence and word tokenization, (spelling correction and) morphological analysis, part-of-speech tagging.
= a0 a1a3a2a5a4 a6a3a2a5a4 A B a6a7a2a8a4 C D a1 a2a5a4 a0 a6a7a2a8a4 A B a0 a6a3a2a5a4 C D Figure 1: Tree representation of the formulaa0a2a1a3a1a5a4 a6 a8a11a10a25a12a55a1a16a15 a6a18a17a26a10a3a10 a19a21a1a5a0a2a1a5a4a32a6a26a8a11a10a25a12a26a0a2a1a16a15 a6 a17a18a10 ) 2.
Next, the input is syntactically parsed, and a representation of its linguistic meaning is constructed compositionally along with the parse (Section 4.2).
The obtained linguistic meaning representation is subsequently merged with discourse context and interpreted by consulting a semantic lexicon of the domain and a domain-specific knowledge base (Section 4.3).
If the syntactic parser fails to produce an analysis, a shallow chunk parser and keyword-based rules are used to attempt partial analysis and build a partial representation of the predicate-argument structure.
In the next sections, we present the procedure of constructing the linguistic meaning of syntactically well-formed utterances.
4.1 Parsing
mathematical expressions The task of the mathematical expression parser is to identify mathematical expressions.
The identified mathematical expressions are subsequently verified as to syntactic validity and categorized.
Implementation Identification of mathematical expressions within word-tokenized text is performed using simple indicators: single character tokens (with the characters a29 and a0 standing for power set and set complement respectively), mathematical symbol unicodes, and new-line characters.
The tagger converts the infix notation used in the input into an expression tree from which the following information is available: surface sub-structure (e.g., “left side” of an expression, list of sub-expressions, list of bracketed sub-expressions) and expression type based on the top level operator (e.g., CONST, TERM, FORMULA 0 FORMULA (formula missing left argument), etc.).
For example, the expression a0a2a1a3a1a5a4 a6a30a8a11a10 a12a7a1a16a15 a6 a17a18a10a3a10a20a19a21a1a5a0a2a1a5a4 a6a18a8 a10a25a12 a0a2a1a16a15 a6 a17a26a10 ) is represented by the formula tree in Fig.
1. The bracket subscripts indicate the operators heading sub-formulae enclosed in parenthesis.
Given the expression’s top node operator, =, the expression is of type formula, its “left side” is the expressiona0a2a1a3a1a5a4 a6 a8a11a10a12a70a1a16a15a24a6a20a17a26a10a3a10, the list of bracketed sub-expressions includes: Aa6 B, Ca6 D, a1a5a4a32a6a26a8a11a10a25a12a34a1a16a15 a6a26a17a18a10, etc.
Evaluation We have conducted a preliminary evaluation of the mathematical expression parser.
Both the student and tutor turns were included to provide more data for the evaluation.
Of the 890 mathematical expressions found in the corpus (432 in the student and 458 in the tutor turns), only 9 were incorrectly recognized.
The following classes of errors were detected:6 1.
P((Aa75 C)a73 (Ba75 C)) =PC a75 (Aa73 B) a9 P((A a75 C)a73 (Ba75 C))=PCa75 (Aa73 B) 2.
a. (Aa53 U und Ba53 U) b.
(da ja Aa73 B=a76 ) a9 ( A a53 U und Ba53 U ) a9 (da ja A a73 B=a76 ) 3.
K((Aa75 B)a73 (Ca75 D)) = K(A ? B) ? K(C ? D) a9 K((A a75 B)a73 (Ca75 D)) = K(A ? B) ? K(C ? D) 4.
Gleiches gilt mit D (K(Ca73 D))a75 (K(Aa73 B)) a9 Gleiches gilt mit D (K(C a73 D))a75 (K(Aa73 B)) [The same holds with . . . ] The examples in (1) and (2) have to do with parentheses.
In (1), the student actually omitted them.
The remedy in such cases is to ask the student to correct the input.
In (2), on the other hand, no parentheses are missing, but they are ambiguous between mathematical brackets and parenthetical statement markers.
The parser mistakenly included one of the parentheses with the mathematical expressions, thereby introducing an error.
We could include a list of mathematical operations allowed to be verbalized, in order to include the logical connective in (2a) in the tagged formula.
But (2b) shows that this simple solution would not remedy the problem overall, as there is no pattern as to the amount and type of linguistic material accompanying the formulae in parenthesis.
We are presently working on ways to identify the two uses of parentheses in a pre-processing step.
In (3) the error is caused by a non-standard character, “?”, found in the formula.
In (4) the student omitted punctuation causing the character “D” to be interpreted as a nonstandard literal for naming an operation on sets.
4.2 Deep
analysis The task of the deep parser is to produce a domainindependent linguistic meaning representation of syntactically well-formed sentences and fragments.
By linguistic meaning (LM), we understand the dependency-based deep semantics in the sense of the Prague School notion of sentence meaning as employed in the Functional Generative Description 6Incorrect tagging is shown along with the correct result below it, following an arrow.
(FGD) (Sgall et al., 1986; Kruijff, 2001).
It represents the literal meaning of the utterance rather than a domain-specific interpretation.7 In FGD, the central frame unit of a sentence/clause is the head verb which specifies the tectogrammatical relations (TRs) of its dependents (participants).
Further distinction is drawn into inner participants, such as Actor, Patient, Addressee, and free modifications, such as Location, Means, Direction.
Using TRs rather than surface grammatical roles provides a generalized view of the correlations between domain-specific content and its linguistic realization.
We use a simplified set of TRs based on (Hajiˇcov´a et al., 2000).
One reason for simplification is to distinguish which relations are to be understood metaphorically given the domain sub-language.
In order to allow for ambiguity in the recognition of TRs, we organize them hierarchically into a taxonomy.
The most commonly occurring relations in our context, aside from the inner participant roles of Actor and Patient, are Cause, Condition, and ResultConclusion (which coincide with the rhetorical relations in the argumentative structure of the proof), for example: Da [A a45 a41 a24a27a30a2a32 gilt]a0 CAUSE a1, alle x, die in A sind sind nicht in B [As Aa45 a41 a24a27a30a2a32 applies, all x that are in A are not in B] Wenn [A a45 a41 a24a27a30a2a32 ]a0 COND a1, dann A a28 B=a2 [If Aa45 a41 a24a27a30a33a32, then Aa28 B=a2 ] Da a26 a45 a41 a24a27a30a2a32 gilt, [alle x, die in A sind sind nicht in B] a0 RES a1 Wenn Aa45 a41 a24a27a30a33a32, dann [Aa28 B=a2 ] a0 RES a1 Other commonly found TRs include NormCriterion, e.g.
[nach deMorgan-Regel-2]a0 NORM a1 ist a41 a24a43a24a27a26a29a22a31a30a2a32a38a28a4a3a5a3a5a3a32 =...) [according to De Morgan rule 2 it holds that ...] a41 a24a42a24a27a26a29a22a40a30a33a32a43a32 ist [laut DeMorgan-1] a0 NORM a1 (a41 a24a27a26a44a32 a28 a41 a24a7a30a33a32 ) [.
. . equals, according to De Morgan rule1, . . . ] We group other relations into sets of HasProperty, GeneralRelation (for adjectival and clausal modification), and Other (a catch-all category), for example: dann muessen alla A und B [in C]a6 PROP-LOC a7 enthalten sein [then all A and B have to be contained in C] Alle x, [die in B sind]a6 GENREL a7 . . . [All x that are in B...] alle elemente [aus A]a6 PROP-FROM a7 sind in a41 a24a27a30a2a32 enthalten [all elements from A are contained in a41 a24a27a30a33a32 ] Aus Aa45 Ua8 B folgt [mit Aa28 B=a2 ]a6 OTHER a7, Ba45 Ua8 A.
[From Aa45 Ua8 B follows with Aa28 B=a2, that Ba45 Ua8 A] 7LM is conceptually related to logical form, however, differs in coverage: while it does operate on the level of deep semantic roles, such aspects of meaning as the scope of quantifiers or interpretation of plurals, synonymy, or ambiguity are not resolved.
where PROP-LOC denotes the HasProperty relation of type Location, GENREL is a general relation as in complementation, and PROP-FROM is a HasProperty relation of type Direction-From or From-Source.
More details on the investigation into tectogrammatical relations that build up linguistic meaning of informal mathematical text can be found in (Wolska and Kruijff-Korbayov´a, 2004a).
Implementation The syntactic analysis is performed using openCCG8, an open source parser for Multi-Modal Combinatory Categorial Grammar (MMCCG).
MMCCG is a lexicalist grammar formalism in which application of combinatory rules is controlled though context-sensitive specification of modes on slashes (Baldridge and Kruijff, 2003).
The linguistic meaning, built in parallel with the syntax, is represented using Hybrid Logic Dependency Semantics (HLDS), a hybrid logic representation which allows a compositional, unification-based construction of HLDS terms with CCG (Baldridge and Kruijff, 2002).
An HLDS term is a relational structure where dependency relations between heads and dependents are encoded as modal relations.
The syntactic categories for a lexical entry FORMULA, corresponding to mathematical expressions of type “formula”, are a9, a10 a29, and a10 . For example, in one of the readings of “B enthaelt a11 a27a34a4 ”, “enthaelt” represents the meaning contain taking dependents in the relations Actor and Patient, shown schematically in Fig.
2. enthalten:contain FORMULA:a12 a0 ACT a1 FORMULA:a13a15a14a17a16 a0 PAT a1 Figure 2: Tectogrammatical representation of the utterance “B enthaelt a11 a27 a4 ” [B contains a11 a27a30a4 ].
FORMULA represents the default lexical entry for identified mathematical expressions categorized as “formula” (cf.
Section 4.1).
The LM is represented by the following HLDS term: @h1(contain a18 a6 ACTa7 (f1 a18 FORMULA:B) a18 a6 PATa7 (f2 a18 FORMULA: a19a21a20 a26 ) where h1 is the state where the proposition contain is true, and the nominals f1 and f2 represent dependents of the head contain, which stand in the tectogrammatical relations Actor and Patient, respectively.
It is possible to refer to the structural sub-parts of the FORMULA type expressions, as formula subparts are identified by the tagger, and discourse ref8http://openccg.sourceforge.net erents are created for them and stored with the discourse model.
We represent the discourse model within the same framework of hybrid modal logic.
Nominals of the hybrid logic object language are atomic formulae that constitute a pointing device to a particular place in a model where they are true.
The satisfaction operator, @, allows to evaluate a formula at the point in the model given by a nominal (e.g.
the formula @a0 a1 evaluates a1 at the point i).
For discourse modeling, we adopt the hybrid logic formalization of the DRT notions in (Kruijff, 2001; Kruijff and Kruijff-Korbayov´a, 2001).
Within this formalism, nominals are interpreted as discourse referents that are bound to propositions through the satisfaction operator.
In the example above, f1 and f2 represent discourse referents for FORMULA:B and FORMULA:a11 a27a49a4, respectively.
More technical details on the formalism can be found in the aforementioned publications.
4.3 Domain
interpretation The linguistic meaning representations obtained from the parser are interpreted with respect to the domain.
We are constructing a domain ontology that reflects the domain reasoner’s knowledge base, and is augmented to allow resolution of ambiguities introduced by natural language.
For example, the previously mentioned predicate contain represents the semantic relation of Containment which, in the domain of naive set theory, is ambiguous between the domain relations ELEMENT, SUBSET, and PROPER SUBSET.
The specializations of the ambiguous semantic relations are encoded in the ontology, while a semantic lexicon provides interpretations of the predicates.
At the domain interpretation stage, the semantic lexicon is consulted to translate the tectogrammatical frames of the predicates into the semantic relations represented in the domain ontology.
More details on the lexical-semantic stage of interpretation can be found in (Wolska and KruijffKorbayov´a, 2004b), and more details on the domain ontology are presented in (Horacek and Wolska, 2004).
For example, for the predicate contain, the lexicon contains the following facts: contain(a26a44a21a3a2a5a4a7a6a9a8a11a10a13a12a14a16a15a18a17a20a19a22a21a24a23a26a25, a27 a26a28a2a5a4a7a6a9a8a11a10a13a12a14a18a15a18a17a20a19a22a21a24a23a26a25 ) a29 (SUBFORMULA a30 a25a24a31, embeddinga25a24a32a18a31 ) [’a Patient of type FORMULA is a subformula embedded within a FORMULA in the Actor relation with respect to the head contain’] contain(a26a44a21a3a2a5a4a7a6a9a8a11a10a13a12a15a18a33a35a34a37a36a18a32a18a31, a27 a26a28a2a5a4a7a6a9a8a11a10a13a12a15a18a33a35a34a37a36a18a32a18a31 ) a29 CONTAINMENT(container a25a24a32a16a31, containee a30 a25a24a31 ) [’the Containment relation involves a predicate contain and its Actor and Patient dependents, where the Actor and Patient are the container and containee parameters respectively’] Translation rules that consult the ontology expand the meaning of the predicates to all their alternative domain-specific interpretations preserving argument structure.
As it is in the capacity of neither sentence-level nor discourse-level analysis to evaluate the correctness of the alternative interpretations, this task is delegated to the Proof Manager (PM).
The task of the PM is to: (A) communicate directly with the theorem prover;9 (B) build and maintain a representation of the proof constructed by the student;10 (C) check type compatibility of proof-relevant entities introduced as new in discourse; (D) check consistency and validity of each of the interpretations constructed by the analysis module, with the proof context; (E) evaluate the proof-relevant part of the utterance with respect to completeness, accuracy, and relevance.
5 Example
analysis In this section, we illustrate the mechanics of the approach on the following examples.
(1) B enthaelt kein a19 a20 a26 [B contains no a19 a20 a26 ] (2) Aa28 Ba20a24a38 Aa28 Ba39 (3) A enthaelt keinesfalls Elemente, die in B sind.
[A contains no elements that are also in B] Example (1) shows the tight interaction of natural language and mathematical formulae.
The intended reading of the scope of negation is over a part of the formula following it, rather than the whole formula.
The analysis proceeds as follows.
The formula tagger first identifies the formula a40 x a27 Aa41 and substitutes it with the generic entry FORMULA represented in the lexicon.
If there was no prior discourse entity for “B” to verify its type, the type is ambiguous between CONST, TERM, and FORMULA.11 The sentence is assigned four alternative readings: (i) “CONST contains no FORMULA”, (ii) “TERM contains no FORMULA”, (iii) “FORMULA contains no FORMULA”, (iv) “CONST contains no CONST 0 FORMULA”.
The last reading is obtained by partitioning an entity of type FORMULA in meaningful ways, taking into account possible interaction with preceding modifiers.
Here, given the quantifier “no”, the expression a40 xa27 Aa41 has been split into its surface parts 9We are using a version of a42 MEGA adapted for assertionlevel proving (Vo et al., 2003).
10The discourse content representation is separated from the proof representation, however, the corresponding entities must be co-indexed in both.
11In prior discourse, there may have been an assignment B := a43, where a43 is a formula, in which case, B would be known from discourse context to be of type FORMULA (similarly for term assignment); by CONST we mean a set or element variable such as A, x denoting a set A or an element x respectively.
enthalten:contain FORMULA:a0 a0 ACT a1 noa0 RESTR a1 FORMULA:a1a3a2a5a4 a0 PAT a1 Figure 3: Tectogrammatical representation of the utterance “B enthaelt kein a40 a11 a27a32a4 a41 ” [B contains no a11 a27a30a4 ].
enthalten:contain CONST:a0 a0 ACT a1 noa0 RESTR a1 CONST:a1 a0 PAT a1 0 FORMULA:a2a6a4 a0 GENREL a1 Figure 4: Tectogrammatical representation of the utterance “B enthaelt kein a40a8a7a11a10a9 a7a27 a4 a9 a41 ” [B contains no a40a11a7a11a10a9 a7a27a14a4 a9 a41 ].
as follows: a40 [x][a27 A]a41 .12 [x] has been substituted with a generic lexical entry CONST, and [a27 A] with a symbolic entry for a formula missing its left argument (cf.
Section 4.1).
The readings (i) and (ii) are rejected because of sortal incompatibility.
The linguistic meanings of readings (iii) and (iv) are presented in Fig.
3 and Fig.
4, respectively.
The corresponding HLDS representations are:13 — for “FORMULA contains no FORMULA”: s:(@k1(keina18 a6 RESTRa7 f2a18 a6 BODYa7 (e1a18 enthalten a18 a6 ACT a7 (f1a18 FORMULA)a18 a6 PAT a7 f2))a18 @f2(FORMULA)) [‘formula B embeds no subformula xa20 A’] — for “CONST contains no CONST 0 FORMULA”: s:(@k1(keina18 a6 RESTRa7 x1a18 a6 BODYa7 (e1a18 enthalten a18 a6 ACT a7 (c1a18 CONST)a18 a6 PAT a7 x1))a18 @x1(CONSTa18 a6 HASPROPa7 (x2a18 0 FORMULA))) [‘B contains no x such that x is an element of A’] Next, the semantic lexicon is consulted to translate these readings into their domain interpretations.
The relevant lexical semantic entries were presented in Section 4.3.
Using the linguistic meaning, the semantic lexicon, and the ontology, we obtain four interpretations paraphrased below: — for “FORMULA contains no FORMULA”: (1.1) ’it is not the case that a6 PATa7, the formula, xa20 A, is a subformula of a6 ACTa7, the formula B’; — for “CONST contains no CONST 0 FORMULA”: 12There are other ways of constituent partitioning of the formula at the top level operator to separate the operator and its arguments: a12 [x][a13 ][A]a14 and a12 [xa13 ][A]a14 . Each of the partitions obtains its appropriate type corresponding to a lexical entry available in the grammar (e.g., the [xa13 ] chunk is of type FORMULA 0 for a formula missing its right argument).
Not all the readings, however, compose to form a syntactically and semantically valid parse of the given sentence.
13Irrelevant parts of the meaning representation are omitted; glosses of the hybrid formulae are provided.
enthalten:contain CONST:a0 a0 ACT a1 noa0 RESTR a1 elementsa0 PAT a1 ina0 GENREL a1 a15 a0 ACT a1 CONST:a0 a0 LOC a1 Figure 5: Tectogrammatical representation of the utterance “A enthaelt keinesfalls Elemente, die auch in B sind.” [A contains no elements that are also in B.].
(1.2a) ’it is not the case that a6 PATa7, the constant x, a45 a6 ACTa7, B, and xa20 A’, (1.2b) ’it is not the case that a6 PATa7, the constant x, a20 a6 ACT a7, B, and xa20 A’, (1.2c) ’it is not the case that a6 PATa7, the constant x, a16 a6 ACTa7, B, and xa20 A’.
The interpretation (1.1) is verified in the discourse context with information on structural parts of the discourse entity “B” of type formula, while (1.2a-c) are translated into messages to the PM and passed on for evaluation in the proof context.
Example (2) contains one mathematical formula.
Such utterances are the simplest to analyze: The formulae identified by the mathematical expression tagger are passed directly to the PM.
Example (3) shows an utterance with domainrelevant content fully linguistically verbalized.
The analysis of fully verbalized utterances proceeds similarly to the first example: the mathematical expressions are substituted with the appropriate generic lexical entries (here, “A” and “B” are substituted with their three possible alternative readings: CONST, TERM, and FORMULA, yielding several readings “CONST contains no elements that are also in CONST”, “TERM contains no elements that are also in TERM”, etc.).
Next, the sentence is analyzed by the grammar.
The semantic roles of Actor and Patient associated with the verb “contain” are taken by “A” and “elements” respectively; quantifier “no” is in the relation Restrictor with “A”; the relative clause is in the GeneralRelation with “elements”, etc.
The linguistic meaning of the utterance in example (3) is shown in Fig.
5. Then, the semantic lexicon and the ontology are consulted to translate the linguistic meaning into its domain-specific interpretations, which are in this case very similar to the ones of example (1).
6 Conclusions
and Further Work Based on experimentally collected tutorial dialogs on mathematical proofs, we argued for the use of deep syntactic and semantic analysis.
We presented an approach that uses multimodal CCG with hybrid logic dependency semantics, treating natural and symbolic language on a par, thus enabling uniform analysis of inputs with varying degree of formal content verbalization.
A preliminary evaluation of the mathematical expression parser showed a reasonable result.
We are incrementally extending the implementation of the deep analysis components, which will be evaluated as part of the next Wizard-of-Oz experiment.
One of the issues to be addressed in this context is the treatment of ill-formed input.
On the one hand, the system can initiate a correction subdialog in such cases.
On the other hand, it is not desirable to go into syntactic details and distract the student from the main tutoring goal.
We therefore need to handle some degree of ill-formed input.
Another question is which parts of mathematical expressions should have explicit semantic representation.
We feel that this choice should be motivated empirically, by systematic occurrence of natural language references to parts of mathematical expressions (e.g., “the left/right side”, “the parenthesis”, and “the inner parenthesis”) and by the syntactic contexts in which they occur (e.g., the partitioning a40 [x][a27 A]a41 seems well motivated in “B contains no xa27 A”; [x a27 ] is a constituent in “x a27 of complement of B.”) We also plan to investigate the interaction of modal verbs with the argumentative structure of the proof.
For instance, the necessity modality is compatible with asserting a necessary conclusion or a prerequisite condition (e.g., “A und B muessen disjunkt sein.” [A and B must be disjoint.]).
This introduces an ambiguity that needs to be resolved by the domain reasoner.
References J.
M. Baldridge and G.J.
M. Kruijff.
2002. Coupling CCG with hybrid logic dependency semantics.
In Proc.
of the 40th Annual Meeting of the Association for Computational Linguistics (ACL), Philadelphia PA.
pp. 319–326.
J. M.
Baldridge and G.J.
M. Kruijff.
2003. Multi-modal combinatory categorial grammar.
In Proc.
of the 10th Annual Meeting of the European Chapter of the Association for Computational Linguistics (EACL’03), Budapest, Hungary.
pp. 211–218.
J. Baur.
1999. Syntax und Semantik mathematischer Texte.
Diplomarbeit, Fachrichtung Computerlinguistik, Universit¨at des Saarlandes, Saarbr¨ucken, Germany.
C. Benzm¨uller, A.
Fiedler, M.
Gabsdil, H.
Horacek, I.
KruijffKorbayov´a, M.
Pinkal, J.
Siekmann, D.
Tsovaltzi, B.
Q. Vo, and M.
Wolska. 2003a.
Tutorial dialogs on mathematical proofs.
In Proc.
of IJCAI’03 Workshop on Knowledge Representation and Automated Reasoning for E-Learning Systems, Acapulco, Mexico.
C. Benzm¨uller, A.
Fiedler, M.
Gabsdil, H.
Horacek, I.
KruijffKorbayov´a, M.
Pinkal, J.
Siekmann, D.
Tsovaltzi, B.
Q. Vo, and M.
Wolska. 2003b.
A Wizard-of-Oz experiment for tutorial dialogues in mathematics.
In Proc.
of the AIED’03 Workshop on Advanced Technologies for Mathematics Education, Sydney, Australia.
pp. 471–481.
M. Glass.
2001. Processing language input in the CIRCSIMTutor intelligent tutoring system.
In Proc.
of the 10th AIED Conference, San Antonio, TX.
pp. 210–221.
A. Graesser, P.
Wiemer-Hastings, K.
Wiemer-Hastings, D.
Harter, and N.
Person. 2000.
Using latent semantic analysis to evaluate the contributions of students in autotutor.
Interactive Learning Environments, 8:2.
pp. 129–147.
E. Hajiˇcov´a, J.
Panevov´a, and P.
Sgall. 2000.
A manual for tectogrammatical tagging of the Prague Dependency Treebank.
TR-2000-09, Charles University, Prague, Czech Republic.
H. Horacek and M.
Wolska. 2004.
Interpreting Semi-Formal Utterances in Dialogs about Mathematical Proofs.
In Proc.
of the 9th International Conference on Application of Natural Language to Information Systems (NLDB’04), Salford, Manchester, Springer.
To appear.
G.J.M. Kruijff and I.
Kruijff-Korbayov´a. 2001.
A hybrid logic formalization of information structure sensitive discourse interpretation.
In Proc.
of the 4th International Conference on Text, Speech and Dialogue (TSD’2001), ˇZelezn´a Ruda, Czech Republic.
pp. 31–38.
G.J.M. Kruijff.
2001. A Categorial-Modal Logical Architecture of Informativity: Dependency Grammar Logic & Information Structure.
Ph.D. Thesis, Institute of Formal and Applied Linguistics ( ´UFAL), Faculty of Mathematics and Physics, Charles University, Prague, Czech Republic.
J. Moore.
1993. What makes human explanations effective?
In Proc.
of the 15th Annual Conference of the Cognitive Science Society, Hillsdale, NJ.
pp. 131–136.
P. Sgall, E.
Hajiˇcov´a, and J.
Panevov´a. 1986.
The meaning of the sentence in its semantic and pragmatic aspects.
Reidel Publishing Company, Dordrecht, The Netherlands.
Q.B. Vo, C.
Benzm¨uller, and S.
Autexier. 2003.
Assertion Application in Theorem Proving and Proof Planning.
In Proc.
of the International Joint Conference on Artificial Intelligence (IJCAI).
Acapulco, Mexico.
M. Wolska and I.
Kruijff-Korbayov´a. 2004a.
Building a dependency-based grammar for parsing informal mathematical discourse.
In Proc.
of the 7th International Conference on Text, Speech and Dialogue (TSD’04), Brno, Czech Republic, Springer.
To appear.
M. Wolska and I.
Kruijff-Korbayov´a. 2004b.
LexicalSemantic Interpretation of Language Input in Mathematical Dialogs.
In Proc.
of the ACL Workshop on Text Meaning and Interpretation, Barcelona, Spain.
To appear.
M. Wolska, B.
Q. Vo, D.
Tsovaltzi, I.
Kruijff-Korbayov´a, E.
Karagjosova, H.
Horacek, M.
Gabsdil, A.
Fiedler, C.
Benzm¨uller, 2004.
An annotated corpus of tutorial dialogs on mathematical theorem proving.
In Proc.
of 4th International Conference On Language Resources and Evaluation (LREC’04), Lisbon, Portugal.
pp. 1007–1010.
C. Zinn.
2003. A Computational Framework for Understanding Mathematical Discourse.
In Logic Journal of the IGPL, 11:4, pp.
457–484, Oxford University Press .


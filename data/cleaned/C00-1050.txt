Kana-Kanji Conversion System with Input Support Based on Prediction Yumi ICHIMURA, Yoshimi SAITO, Kazuhiro KIMURA and Hideki HIRAKAWA IIuman Interface l,aboratory Corporate Research & Development Center, TOSttIBA Corp.
1, Komukai-Toshiba-cho, Saiwai-ku, Kawasaki-shi, Kanagawa, 212-8582 Japan yumi.
i chimura@t oshiba, co.
j p Abstract We propose ~ kana-ka'~ji conversion systeln with input support based on prediction.
This system is composed o\[' l,wo pm'ts: prediction of succeeding ka'1~:ji charac/;er st, rings from l,yped l,:ana ones, and ordinary k(vna-lca'l~(\]i conversion.
It automatically shows candidates of kanji character strings which the user intends to input.
Ore' prediction method features: (i)Arbitrary positions of typed t,:ana character slarings are regm'ded as l,he top of words.
(ii)A system dictionary and a user dictionary are used, and eadl entry in the systcln dictionary has (:erl, ai.nly factor calculated fl'om the frequency of' words in corpora.
(ill)Candidates are estimated by certainty factor and 'us@l, lness factor, and likely ones with greater \['actors than l;hresholds are shown.
The proposed system could reduce the user's key inlmt operations to 78% from the original ones in ore' experinmnts.
1 Introduction
TOSHIBA developed the world's first Japanese word processor in 1978.
Unlike languages based on an alphabet, Japanese uses /,housands of Ica nji characters of varying comp\]exity.
Hence, l,o arrange all of l~a'~:ii chm'acl;ers on keyboard is; difficult.
On the other hand, kana dlaracters which are phonetic scripl,s of Japanese have 83 variations; these can be arranged on keyboa'& As a result, conversion from kana notations to kanji ones, whal, is called kana-ka,~:ji conversion, has been used.
Since Japanese is not writl,en separately by words, segmental,ion of typed kana characl,er strings has ambiguil,y.
And ~m ambiguil,y in conversion exists, too; a kana notation may correspond l,o some different t:a, nji notations.
These make t,:ana-kanji conversion challenging.
We have made efforts l,o raise a precision of kana-kaTt:ji conversion, thinking l,h~t high precision can provide a better input enviromnent for the user.
A t)rccision of our kana-kanji conversion system reaches 95-98% for several kinds o\[' texts in our previous experiments.
Neverthe\]ess, this approach is not; enough in the situations where fasl; typing is hard, e.g., lbr beginners who m'e not familiar wil,h keyboard or for palm-size comlmters.
Thus, new method to reduce key input; operations is needed.
We propose a k(vna-kanji conversion system witll input support based on prediction.
This system is composed o\[' two parts: prediction of succeeding ka'nji character strings t\]'om typed kana ones, and ordinary hrvna-kanji conversion.
It; automatically shows candidates of ka'nji character strings which the user intends to input.
The candidates change as /;lie usc, r inputs ka.na characters.
If no approt)riate ctloice is presenl;e(t, the candidates aul;Olnatictd\]y disappear when the ne×t kana character is entered.
Our system, l,here\['ore, can be used in the same manner as an ordinary ka'na-kanji conversion system, and allows the user to save time and efforts for key input without learning new key operations.
We have been considered two issues to generate accurate candidates: (i) How Co determine where t;yped kana character strings are segmented; since Japanese is not written separately by words, determination of positions where words start is needed to retrieve dictionaries.
(ii) How to determine when prediction candidates are presented; if all of retrieval results are always shown, a sysl,em cannot be convenielfl,.
Surveying previous works Dora the view on above issues, we found l,hal, the Reacl,ive Keyboard has been proposed (Darragh el, al., 1980).
It accelerates typewritten communication with 341 a computer system by predicting what the user is going to type next.
In this system, the top of typed ct~aracter strings is regarded as the top of words, because English is written separately by words; the issue of segmentation of character strings does not occur.
On the other hand, in previous works for Japanese, a predictive pen-based text input method has been proposed (Fukushima and Yalnada, 1.996).
In this system, character strings are input by h~md-writing on LCD panel.
Since the user usually inputs not only by kana but also by t~anji and an alphabet, entered character strings are segmented with the help of the wu-iety of characters.
Thus, the issue of segmentation is not considered.
The POBox (Pen-Operations Bused On eXample) which is a text input method tbr penbased computers has also been proposed (Masui, 1998).
It shows succeeding candidates from cl~aracter strings input by software keyboard.
Arbitrary positions of input character strings can be regarded as the top of words, and retrieval results are always shown as candidates; the prediction ordering is based on the user's previous choice.
Since input speed by pen is not faster than that by keyboard, time to choose candidates is shorter than that to input c.haracters.
Hence, even if many candidates are shown, this n~ethod is effective for pen-based computers.
It is, however, inefficient for ordinary keyboard.
We propose a system with following features: (i) Arbitrary positions of typed kana character strings are regarded as the top of words.
(ii) A system dictionary and a user dictionary are used, aud each entry in the system dictionary has certainty factor calculated from the frequency of words in corpora.
(iii) Candidates are estimated by certainty factor and useful'hess factor; and likely ones with greater factors than thresholds are shown.
These features provide an cfl3cicnt Japanese text input environment for ordinary keyboard without learning new key operations.
Section 2 shows an example of text input using the proposed system.
Section 3 explains an input support method based on prediction.
Section 4 shows efficiency of our system by means of experiments.
Section 5 describes conclusions.
2 Example
of Text Input Figure 1 shows an example of text input using tile proposed system.
Suppose that tile user intends to input a sentencc,,,,v,~,~ 2co -e ~" e$ & N ~ ~ ~ ~(we rcqucst yore" attendance at the following meeting)", typing ha.ha /u b ~ 9 ~ ~ ~.
~(katcino kaigiwo kaisai shimaswnodc gosanshuu ncgaimasu)".
When the user types "\]~' (ha)", "~ (hi)", and "CO (no)" keys, the system antomatically opens a prediction menu window just below the typed charactcrs, and shows two candidates in the menu window (Fig.l(a)): (at the following address, modest....
) (al.
the following address, modest ....
) The first candidate is high\]ighted.
If the menu window contains an appropriate candidate, the user can choose it by cursor; otherwise the user can continue entering the next characters.
Subsequently, when "\]0, (lea)" key is typed, the predic.tion menu window disN)pears (Fig.l(b)).
When "~ (i)" and "~" (gi)" keys are typed, the system automatically opens a prediction menu window again, and shows %ur new candidates (Fig.l (e)): (we request your a.ttenda.nce a.t the meeting) (we hold the meeting) (we hold the meeting) (we hold the meeting) Here the first one is what the user just wants; the user enters select key, thcn the prcdiction menu window disappears, and dmsen candidate is insertcd in the cdit area.
If remaining tcana charactcr string wtfich was not included in the chosen cundidate exists, l~a,na-l~anji conversion starts automatically; the first three Icana c.haracters of this sentence "?a~ ~ ~ (l~ahino)" is converted to tcanji notation 'q'~,co (the following)" (Fig.l(d)).
This is the first result of t~ana-kanji conversion, so that the user can d~ange it to others.
An overline of thc conversion rcsult in Fig.l(d) shows that this result is not fixed yet.
In above example, while 27 ~ana d~aracters are needed to input in ordinary l~ana-t~anji con342 (a) I~A l::l-w~ ~¢j U4 118 0 I0 1lI ¢o) ~¢.~ 1/4 1/8 0 10 1|i (c) NA ~-:z-~ ~.¢ I/4 I/8 0 I0 I.
I1 (d) NA H-w~ f~3 114 1/8 0 10 t-l-I Figure 1: Example of Japanese text input using word processor with input support.
(a)";~J ~'', "-~", and "03" keys are typed.
(b)"~ ~'' key is typed, subsequently.
(e)"~ ~'' and "{s'" keys are typed, subsequently.
(d)The first candidate in (c) is chosen.
version, our system can reduce the input of 21 ~:ana characters, "*L ~b' ~ ~ t~ ~ ~ b ~ J-c0 ~ "~" ~ \]u b e~ 9 talo~ ~ ~ J(wo kaisai shimasunode gosanshuu negaimasu)"; only 6 kana characters are needed to input.
3 Input
Support Method Based on Prediction In this section, an overview of the system is shown.
Then dictionaries used in the system, factors for estimation of candidates, and user learning are described.
............ -\[ InLut Character Strings 1 Kana-Kemji Coi~,'elsiot~ Ka,~a-Kanji Conve,sion '~l-~~.'~~ tJ_ Input Prediction Unit Chomc te r Sub-strings \] ~_ __~ F dictionCandidates I I "1 Estimation u~t I ~ .........
Y -.-J -~ UserLeanmlgUldt } --J (Kam-K~ji Conversion \] Adopted byUs2;-"' \[ C~ida~s ) Figure 2: Diagram of the proposed system° 3.1 Overview of the system Figure 2 shows a diagram of the proposed system.
It is composed of a kana-hanji conversion unit and au input prediction unit, and the latter has following four sub-units: Character Sub-strings Generation Unit(a) generates character sub-strings obtained from segmentation of typed kana character strings.
Dictionary Retrieval Unit(b) retrieves prediction dictionaries using character sub-strings generated by Unit(a).
Prediction Candidates Estimation Unit(c) calculates certainty factor and usefulness factor for all of retrieved results by Unit(b) to estimate candidates° User Learning Unit(d) extracts phrases adopted by the user, and automatically registers them into the user dictionary.
3.2 Prediction
Dictionary Two kinds of dictionaries are used as a prediction source: (i) System Dictionary consists of high frequent phrases.
343 (ii) User Dictionary consists of phrases learned fl'om texts which the user typed before.
Ead~ dictionm'y includes words and phrases without distinction.
This is because Japanese is not written separately by words, and high fl'equent phrases consist of various grammatical forms, sud~ as single word or two words.
And eadt entry has kana notation (phonetic script) and kanji one.
3.3 Estimation
of Prediction Candidates Two kinds of factors are used to estimate candidates: (i) Certainty Factor indicates how certain a candidate is.
(ii) Usefulness Factor indicates how useful a candidate is.
These two factors vary as the user inputs a character.
Retrieval results are sorted in order of these factors, and only ones with greater factors than thresholds are shown as candidates.
3.4 Calculation
of Certainty Factor Certainty factors fox" entries in the system dictionary and the user dictionary are calculated in different manner.
First we make some notational conventions.
A typed kana character string is denoted by S, which has right sub-strings S; (1 < i < L(S)).
L(x) is the length of a string x.
An entry in the dictionary is denoted by W, which has kanji notation WH and kana notation Wy.
3.4.1 Entry
of System Dictionary When S is typed, certainty factor fox' W in the system dictionary is calculated as follows: Certainty f actor(WlS ) = Ft~(WH) Fl((Si) ' O, when S has a right sub-string Si whid~ partiMly matches with the head of Wy otherwise where F~:(WH) is the frequency of WH in kanji notation corpus, and FK(&) is the fl'equency of Si in kana notation corpus corresponding to kanji one.
For example, certainty factor :\['or "~' ~ ~-q':'~ ~ (ka,na-kanji conversion)" is calculated using the frequency in Table 1: Table 1: Frequency for "\]a~ta:f~q':'~f~" in two corresponding corpora: kanji notation corpus with 155,000 characters, and kana one with 227,000 characters.
Character strings Frequency in kana notation corpus iJ~ 6,720 ~a~ ~ 191 ia~ Y'a: Yo~ ~ 12, 87 \]a' ~a: \]o' tu 12,,',tu 77 IJ'/a Io' A~ D ~,AJ IJ' 76 iJ' ~a: io' k~ 15 ",tu lo' /u 76 Clmrac/er strings Frequency in kanji nota.tion corpus Certainty f aclor(~a'~.~f4 I ?J't*.
) = 70/191.
= 0.366 Ccrl, ai'n, ty .f actor(ia' ~ "?~-~:~~ I io' re: "h' ) = 70/114 = 0.614 The values of certainty factor corresponding to every character sub-strings are described in tim system dictionary, and are read out at retri eval.
3.4.2 Entry
of User Dictionary Since t.he system cannot infer which phrases would be registered into the user dicl, ionax'y, calculation of certainty factor \['or an entry in the user dictionary from corpora may 10e impossible.
Hence, when S is typed, certainty factor fox' W in the user dictionary is calculated as follows: Certainty f actor (W IS) = O, when S has a right sub-string & which partially m attires with the head of Wy otherwise where N(Si) is the number of entries whose kana notations start from Si in the user dictionary, and c~ is a constant to give greater factor tbr entries in tile user dictionary than that in the system dictionary; i.e., tile user dictionary has priority.
344 3.5 Calculation of Usefidness Factor An increase in tile length of typed tca'n,a d~m'acter strings raises the certainty on prediction, but lessens the usefulness.
Hence, 'us@d'n, css factor is introduced in addition to certain, ty factor.
When S is typed, "us@tl'ness factor for W is calculated as tbllows: Use f uI,n.ess f actor(WlS ) = { O, when S has a right substring & which partially matches with the head of Wy otlmrwise 3.6 User Learning Aft, re' the user adopts prediction or t:a~ta-ha.n:ji conversion cmldidates, words wit;ll longer length than threshold and phrases which sat, isfy given grammatical conditions are extracted; these are automaticMly registered int, o the user dictionm'y.
Por example, suppose, that the user intends (;() input a phrase """*'~ mcet,ing)", typing 1,:a'na chm'acl, ers "#' v~g Vb r;,o ~ ~ g~ (ko.igi'ni sh,'ussetci sn, ru,)".
When "#' (ka)", %~ (i)", and "~" (gi)" keys ~we typed, \['om' candidates are sllowu in the predict.ion metal window (Fig.l (c) ).
IIcre tlm predict;ion menu window dose not cont:ain a candidate wlficll the user wants, the, ll tlm user conl;imms entertug the next; l~:a'n,a characters "k b r;,v ~ ~ 3-,5 ('hi sh'ussehi s'uru,)" and l,:a'n,a,-/,:an:ji cmwersion key.
As a result, bb' ~ ~-~" Vb r;,-o -g ~ 3~ (l,;a, igini,stu~ssehi suru)" is convcrt, ed to ~,aL,l+),~,3-~ (attend 31; the meeting)".
When this conversion candidate is adopted, two words ml(t a phrase are regist, ered into the user dictionary: ~N (meeting)", "/15/,'i~g-~ (ag~_~'~L,I,))I,~Y ~ (M;tend at, the meettend)", ~md "~ " "" ing)".
711" "7~, (lea)", %' (i)", and "~" ((.It)" keys I I I't; ')~ are typed after this learning, "~q~V-,bI, u 3-~ is contained in the prediction menu window.
4: Experiment, s Efficiency of the proposed system is shown by means of' experilnents.
4.1 Evaluation
Measures Neither st;art key for tn'ediction nor cancel key for prediction candidates are needed.
And stleer, key to ~dopt.
candidates is needed in both of t)rediction mid ordinary ha.ha-ha,nit conversion; we need not; tn~ke into account of l;he input of select; key.
tIence, the length of complemented hana c, haracters is just a decrease in key input; operations.
Two evaluation measures, an operation ratio and a precision, are defined as follows: P-Q Operation, ratio = p x 100 (%) R Precision, = S x 100 (%) where P is the length of the original ha'ha text;, Q is the length of ha'ha chm'acters complemented by prediction~ R is the number of sllown prediction menu windows contMning appropriate choices, and S is tile number of ~dl of shown prediction menu windows.
4.2 Data
and Conditions Two kind of texts, a paper on natm'al language processing and a let;ter, were used in ore" extmriments; these l, exl, s were not included in the corpora used to calculate certainty factor: A system dictionary with 37,926 entries was used.
Thresholds of certai'nl, ll factor mid 'us@d.ness fa, ctor were 0.1 and 2.
q~he numl mr of candidates present.ed in ~ predict;ion mmm window was five or less.
If ~ prediction menu window contained ml ~l)propri~t,e ('hoice~ it, was ~lw~ys adopted.
With ~v view to ex~mdnin 8 eacl~ contrilmtion o\[' the system (tict;ionary and user learning, experiments were carried out in three cases: (i) Only the systeln dictionary was used.
(it) Only user learning was used.
(iii) Bot;h t\]tc syst, em dictionary mid user learning were used.
~Ve calculated the lengt;h of complemented ha'ha du~r~,ct;ers automaticMly.
An operation ratio and a precision were recorded at; every input of 4,500 lcana characters.
4.3 II,esults Pigm'e 3 shows experimental results.
Decrease in key input operations: Using both the system dictionary and user learning, for the paper, an operation ratio was 97.3-78.6% (line (r3) in Fig.3(a)) and a precision was 20.0 -26.7% (line (p3) in Fig.3(c)); for the letter, an operation rat;k, was 80.7 78.1% (line (r3) in Fig.3(b)) and a precision was 26.1--29.6% (line (p3) in 345 100% 95%,.--., 90% 85% 0 0 ~'~ 65% 0 60% 55% 50% i t i t i T T t o (~ o o o o o o o o o o o o o o o o o o 00Pal)er • the llUlllber of input characters o 0 t~ © 100% 95% 90% 85% 80% 75% 70% 65% 60% 55% 50%,' "~--~.
--.. r, r i i i i i (b) Letter the nttmber of input chracters ....
(rl)System Dicti0naO" .......
(r2)U ser Learning -(r3)System Dictionary + U set Learning 50% 45% t0% "--" 35% 30% 0 25% "~ 20% 10% 5% f--2__t=--_==~,/ 50% 45% 40% /--" 35% 30%,~ 25% G'2 "~ 205'; '.I) t 15% 10% 5 % -..... -" _:.
-...... 0% t r r, ~ ~, r 0%, ~, ~, r,, e3 ~ ~3 o u~ ~ v5 o ~3 o e5 o v5 o o ~ c, e5 cD "* ~" °21 ~ ~ ~q ~ ~ ~ ~ ~ ~ +.
~ +~,,-, .+ .t (c) l?~q)er " the mtmber of (d) Letter " the munber of input characters input characters ....
(p I )System Dictionary .......
(p2)User Learning -(p 3)System Dictionary + User Learning Pigure 3: Experimental Results.
(a.)Operation ratio for the paper.
(b)Operation ratio for the letter.
(c)Precision for the paper.
(d)Precision for the letter.
Fig.3(d)). When 45,000 ka~a characters were typed, an average of the operation ratio was 78%, that is, a 22% decrease in the original operations was obtained; an average of the precision was 25~)~, that is, a quarter of shown prediction menn windows contained appropriate choices.
This precision was enough to realize comfortable operations.
Contribution of the system dictionary: Using only the system dictionary, for the paper, an operation ratio was 97.6-96.6% (line (rl) in Pig.3(a)), that is, a 2.4-3.4% decrease in the original operations was obtained; for the letter, an operation ratio was 90.6-78.8% (line (rl) in Pig.3(b)), that is, a 9.4-21..2% decrease in the original operations was obtained.
As a result, the system dictionary is effective for a text like a letter with idioms or common phrases, because 346 the system dictionary includes a lot; of such phrases.
Furthermore, eomt)ared a t)recisiou using both the system dictionm'y and user lewcning wi/;h that using only user learning, the \['orlner was worst for the paper (lines (t)2) and (p3) in Fig.ate) (d)).
As a result, for some kind of texts, the system dictionary not only is ineffective but also reduces a prec.ision.
Contribution of user learning: User learning had an effect tbv an operation ratio aI'te.v more than 9,000 ka'na chm'acters were typed (lines (r2) in Fig.(a)(b)).
In fact, if the user types about ten pages of texts, a 15 20% decrease in the original ot)erations can be obtained.
5 Conclusions
We proposed a l~ana-ka'nji (:onversion system with input sut)port based (m prediction.
Ore' system thatures: (i) It; shows prediction cmldid~tes of 1,:a'@i character strings which the 11sev int, ends to input without any special key operation.
I\[' no apt)ropriate choice is presented, the candidates disappear automatically when the next l,:a'na character is entered.
(it) Arbit;rary positions o\[' typed l:ana cJlavacter strillgS are reg~w(le(t as the top of words.
(iii) A system dietio1~avy and a user dictionary ave used, and each entry in the system (ticLionary has certainty factor calculated :from the frequency of words in corpora.
(iv) Candidates ave estimated by certainty factor and use.fill.hess factor, and likely ones with greater \['actors than thresholds rare shown.
(v) ~Zords and phrases are extracted \['rein typed texts, and registered into the user dictionary automatically.
The proposed system could reduce the.
user's key input operations to 78% h'om the original ones in the experiments using two kinds of texts.
This system was built into the TOSIIIBA Japanese word processor, the JW-8020, which was released in autumn 1.998 (Fig.4).
To raise a precision by field information and context of texts is our lhtm'e work.
Figm'e 4.: TOSHIBA Japanese word processor, the JW-8020.
where the proposed systenl was built.


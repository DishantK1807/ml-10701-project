Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 633–640, Sydney, July 2006.
c©2006 Association for Computational Linguistics Self-Organizing D2-gram Model for Automatic Word Spacing Seong-Bae Park Yoon-Shik Tae Se-Young Park Department of Computer Engineering Kyungpook National University Daegu 702-701, Korea CUsbpark,ystae,syparkCV@sejong.knu.ac.kr Abstract An automatic word spacing is one of the important tasks in Korean language processing and information retrieval.
Since there are a number of confusing cases in word spacing of Korean, there are some mistakes in many texts including news articles.
This paper presents a high-accurate method for automatic word spacing based on self-organizing D2-gram model.
This method is basically a variant of D2-gram model, but achieves high accuracy by automatically adapting context size.
In order to find the optimal context size, the proposed method automatically increases the context size when the contextual distribution after increasing it dose not agree with that of the current context.
It also decreases the context size when the distribution of reduced context is similar to that of the current context.
This approach achieves high accuracy by considering higher dimensional data in case of necessity, and the increased computational cost are compensated by the reduced context size.
The experimental results show that the self-organizing structure of D2-gram model enhances the basic model.
1 Introduction
Even though Korean widely uses Chinese characters, the ideograms, it has a word spacing model unlike Chinese and Japanese.
The word spacing of Korean, however, is not a simple task, though the basic rule for it is simple.
The basic rule asserts that all content words should be spaced.
However, there are a number of exceptions due to various postpositions and endings.
For instance, it is difficult to distinguish some postpositions from incomplete nouns.
Such exceptions induce many mistakes of word spacing even in news articles.
The problem of the inaccurate word spacing is that they are fatal in language processing and information retrieval.
The incorrect word spacing would result in the incorrect morphological analysis.
For instance, let us consider a famous Korean sentence: “A7AJAXC9D8ARA0AJDIF9FVCKDLCJH2D8AZC9A0AJB0BGAIA2AJ.” The true word spacing for this sentence is “A7AJAXC9D8ARA0AJ#DIF9FV CKDL#CJH2D8AZC9A0AJB0BGAIA2AJ.” whose meaning is that my father entered the room.
If the sentence is written as “AZC9AXC9D8AR#A0AJDIF9FVCKDL#CJH2D8AZC9A0AJB0BGAIA2AJ.”, it means that my father entered the bag, which is totally different from the original meaning.
That is, since the morphological analysis is the first-step in most NLP applications, the sentences with incorrect word spacing must be corrected for their further processing.
In addition, the wrong word spacing would result in the incorrect index for terms in information retrieval.
Thus, correcting the sentences with incorrect word spacing is a critical task in Korean information processing.
One of the most simple and strong models for automatic word spacing is D2-gram model.
In spite of the advantages of the D2-gram model, its problem should be also considered for achieving high performance.
The main problem of the model is that it is usually modeled with fixed window size, D2.
The small value for D2 represents the narrow context in modeling, which results in poor performance in general.
However, it is also difficult to increase D2 for better performance due to data sparseness.
Since the corpus size is physically limited, it is highly possible that many D2-grams which do not appear in the corpus exist in the real world.
633 The goal of this paper is to provide a new method for processing automatic word spacing with an D2-gram model.
The proposed method automatically adapts the window size D2.
That is, this method begins with a bigram model, and it shrinks to an unigram model when data sparseness occurs.
It also grows up to a trigram, fourgram, and so on when it requires more specific information in determining word spacing.
In a word, the proposed model organizes the windows size D2 online, and achieves high accuracy by removing both data sparseness and information lack.
The rest of the paper is organized as follows.
Section 2 surveys the previous work on automatic word spacing and the smoothing methods for D2gram models.
Section 3 describes the general way to automatic word spacing by an D2-gram model, and Section 4 proposes a self-organizing D2-gram model to overcome some drawbacks of D2-gram models.
Section 5 presents the experimental results.
Finally, Section 6 draws conclusions.
2 Previous
Work Many previous work has explored the possibility of automatic word spacing.
While most of them reported high accuracy, they can be categorized into two parts in methodology: analytic approach and statistical approach.
The analytic approach is based on the results of morphological analysis.
Kang used the fundamental morphological analysis techniques (Kang, 2000), and Kim et al.distinguished each word by the morphemic information of postpositions and endings (Kim et al., 1998).
The main drawbacks of this approach are that (i) the analytic step is very complex, and (ii) it is expensive to construct and maintain the analytic knowledge.
In the other hand, the statistical approach extracts from corpora the probability that a space is put between two syllables.
Since this approach can obtain the necessary information automatically, it does require neither the linguistic knowledge on syllable composition nor the costs for knowledge construction and maintenance.
In addition, the fact that it does not use a morphological analyzer produces solid results even for unknown words.
Many previous studies using corpora are based on bigram information.
According to (Kang, 2004), the number of syllables used in modern Korean is about BDBC BG, which implies that the number of bigrams reaches BDBC BK. In order to obtain stable statistics for all bigrams, a great large volume of corpora will be required.
If higher order D2-gram is adopted for better accuracy, the volume of corpora required will be increased exponentially.
The main drawback of D2-gram model is that it suffers from data sparseness however large the corpus is.
That is, there are many D2-grams of which frequency is zero.
To avoid this problem, many smoothing techniques have been proposed for construction of D2-gram models (Chen and Goodman, 1996).
Most of them belongs to one of two categories.
One is to pretend each D2-gram occurs once more than it actually did (Mitchell, 1996).
The other is to interpolate D2-grams with lower dimensional data (Jelinek and Mercer, 1980; Katz, 1987).
However, these methods artificially modify the original distribution of corpus.
Thus, the final probabilities used in learning with D2grams are the ones distorted by a smoothing technique.
A maximum entropy model can be considered as another way to avoid zero probability in D2-gram models (Rosenfeld, 1996).
Instead of constructing separate models and then interpolate them, it builds a single, combined model to capture all the information provided by various knowledge sources.
Even though a maximum entropy approach is simple, general, and strong, it is computationally very expensive.
In addition, its performance is mainly dependent on the relevance of knowledge sources, since the prior knowledge on the target problem is very important (Park and Zhang, 2002).
Thus, when prior knowledge is not clear and computational cost is an important factor, D2-gram models are more suitable than a maximum entropy model.
Adapting features or contexts has been an important issue in language modeling (Siu and Ostendorf, 2000).
In order to incorporate longdistance features into a language model, (Rosenfeld, 1996) adopted triggers, and (Mochihashi and Mastumoto, 2006) used a particle filter.
However, these methods are restricted to a specific language model.
Instead of long-distance features, some other researchers tried local context extension.
For this purpose, (Sch¨utze and Singer, 1994) adopted a variable memory Markov model proposed by (Ron et al., 1996), (Kim et al., 2003) applied selective extension of features to POS tagging, and (Dickinson and Meurers, 2005) expanded context of D2-gram models to find errors in syntactic anno634 tation.
In these methods, only neighbor words or features of the target D2-grams became candidates to be added into the context.
Since they required more information for better performance or detecting errors, only the context extension was considered.
3 Automatic
Word Spacing by D2-gram Model The problem of automatic word spacing can be regarded as a binary classification task.
Let a sentence be given as CB BP DB BD DB BE BMBMBMDB C6 . If i.i.d. sampling is assumed, the data from this sentence are given as BW BPBO B4DC BD BNDD BD B5BNBMBMBMBNB4DC C6 BNDD C6 B5 BQ where DC CX BE CA D2 and DD CX BE CUD8D6D9CTBNCUCPD0D7CTCV.
In this representation, DC CX is a contextual representation of a syllable DB CX . If a space should be put after DB CX, then DD CX, the class of DC CX,istrue.Itisfalse otherwise.
Therefore, the automatic word spacing is to estimate a function CU BM CA D2 AX CUD8D6D9CTBNCUCPD0D7CTCV.
That is, our task is to determine whether a space should be put after a syllable DB CX expressed as DC CX with its context.
The probabilistic method is one of the strong and most widely used methods for estimating CU.
That is, for each DB CX, CUB4DC CX B5BP CPD6CVD1CPDC DD CX BECUD8D6D9CTBNCUCPD0D7CTCV C8B4DD CX CYDC CX B5BN where C8B4DD CX CYDC CX B5 is rewritten as C8B4DD CX CYDC CX B5BP C8B4DC CX CYDD CX B5C8B4DD CX B5 C8B4DC CX B5 BM Since C8B4DC CX B5 is independent of finding the class of DC CX, CUB4DC CX B5 is determined by multiplying C8B4DC CX CYDD CX B5 and C8B4DD CX B5.
That is, CUB4DC CX B5BP CPD6CVD1CPDC DD CX BECUD8D6D9CTBNCUCPD0D7CTCV C8B4DC CX CYDD CX B5C8B4DD CX B5BM In D2-gram model, DC CX is expressed with D2 neighbor syllables around DB CX . Typically, D2 is taken to be two or three, corresponding to a bigram or trigram respectively.
DC CX corresponds to DB CXA0BD DB CX when D2 BP BE.
In the same way, it is DB CXA0BE DB CXA0BD DB CX when D2 BP BF.
The simple and easy way to estimate C8B4DC CX CYDD CX B5 is to use maximum likelihood estimate with a large corpus.
For instance, consider the case D2 BPBE.
Then, the probability C8B4DC CX CYDD CX B5 is represented as C8B4DB CXA0BD DB CX CYDD CX B5, and is computed by C8B4DB CXA0BD DB CX CYDD CX B5 BP C8B4DB CXA0BD DB CX B2DD CX B5 C8B4DD CX B5 (1) BP BVB4DB CXA0BD DB CX B2DD CX B5 BVB4DD CX B5 BN 0.7 0.75 0.8 0.85 0.9 0 1e+06 2e+06 3e+06 4e+06 5e+06 6e+06 7e+06 8e+06 Accuracy (%) No.
of Training Examples unigram bigram trigram 4-gram 5-gram 6-gram 7-gram 8-gram 9-gram 10-gram Figure 1: The performance of D2-gram models according to the values of D2 in automatic word spacing.
where BV is a counting function.
Determining the context size, the value of D2,in D2-gram models is closely related with the corpus size.
The larger is D2, the larger corpus is required to avoid data sparseness.
In contrast, though loworder D2-grams do not suffer from data sparseness severely, they do not reflect the language characteristics well, either.
Typically researchers have used D2 BP BE or D2 BP BF, and achieved high performance in many tasks (Bengio et al., 2003).
Figure 1 supports that bigram and trigram outperform low-order (D2 BP BD) and high-order (D2 AL BG) D2-grams in automatic word spacing.
All the experimental settings for this figure follows those in Section 5.
In this figure, bigram model shows the best accuracy and trigram achieves the second best, whereas unigram model results in the worst accuracy.
Since the bigram model is best, a selforganizing D2-gram model explained below starts from bigram.
4 Self-Organizing D2-gram Model To tackle the problem of fixed window size in D2gram models, we propose a self-organizing structure for them.
4.1 Expanding
D2-grams When D2-grams are compared with B4D2B7BDB5-grams, their performance in many tasks is lower than that of B4D2 B7BDB5-grams (Charniak, 1993).
Simultaneously the computational cost for B4D2 B7BDB5-grams is far higher than that for D2-grams.
Thus, it can be justified to use B4D2 B7BDB5-grams instead of D2635 Function HowLargeExpand(DC D2 ) Input: DC D2 : D2-grams Output: an integer for expanding size 1.
Retrieve B4D2 B7BDB5-grams DC D2B7BD for DC D2 . 2.
Compute BW BP C3C4B4C8B4DDCYDC D2 B5CYCYC8B4DDCYDC D2B7BD B5B5BM 3.
If BWBOAI EXP Then return 0.
4. return HowLargeExpand(DC D2B7BD )+1.
Figure 2: A function that determines how large a window size should be.
grams only when higher performance is expected.
In other words, B4D2 B7BDB5-grams should be different from D2-grams.
Otherwise, the performance would not be different.
Since our task is attempted with a probabilistic method, the difference can be measured with conditional distributions.
If the conditional distributions of D2-grams and B4D2 B7BDB5-grams are similar each other, there is no reason to adopt B4D2 B7BDB5-grams.
Let C8B4DD CX CYDC D2CX B5 be a class-conditional probability by D2-grams and C8B4DD CX CYDC B4D2B7BDB5CX B5 that by B4D2B7BDB5grams.
Then, the difference BWB4D2BND2 B7BDB5between them is measured by Kullback-Leibler divergence.
That is, BWB4D2BND2 B7BDB5 BP C3C4B4C8B4DD CX CYDC D2CX B5CYCYC8B4DD CX CYDC B4D2B7BDB5CX B5BN which is computed by CG DEBECUD8D6D9CTBNCUCPD0D7CTCV D4B4DECYDC D2CX B5D0D3CV D4B4DECYDC D2CX B5 D4B4DECYDC B4D2B7BDB5CX B5 BM (2) BWB4D2BND2 B7 BDB5 that is larger than a predefined threshold AI EXP implies that C8B4DD CX CYDC B4D2B7BDB5CX B5 is different from C8B4DD CX CYDC D2CX B5.
In this case, B4D2B7BDB5-grams is used instead of D2-grams.
Figure 2 depicts an algorithm that determines how large D2-grams should be used.
It recursively finds the optimal expanding window size.
For instance, let bigrams (D2 BPBE) be used at first.
When the difference between bigrams and trigrams (D2 BP BF) is larger than AI EXP, that between trigrams and fourgrams (D2 BP BG) is checked again.
If it is less than AI EXP, then this function returns 1 and trigrams are used instead of bigrams.
Otherwise, it considers higher D2-grams again.
Function HowSmallShrink(DC D2 ) Input: DC D2 : D2-grams Output: an integer for shrinking size 1.
If D2BOBD Then return 0.
2. Retrieve B4D2A0BDB5-grams DC D2A0BD for DC D2 . 3.
Compute BW BP C3C4B4C8B4DDCYDC D2 B5CYCYC8B4DDCYDC D2A0BD B5B5BM 4.
If BWBQAI SHR Then return 0.
5. return HowSmallShrink(DC D2A0BD )-1.
Figure 3: A function that determines how small a window size should be used.
4.2 Shrinking
D2-grams Shrinking D2-grams is accomplished in the direction opposite to expanding D2-grams.
After comparing D2-grams with B4D2A0BDB5-grams, B4D2A0BDB5-grams are used instead of D2-grams only when they are similar enough.
The difference BWB4D2BND2 A0 BDB5 between D2-grams and B4D2A0 BDB5-grams is, once again, measured by Kullback-Leibler divergence.
That is, BWB4D2BND2A0BDB5 BP C3C4B4C8B4DD CX CYDC D2CX B5CYCYC8B4DD CX CYDC B4D2A0BDB5CX B5BM If BWB4D2BND2 A0 BDB5 is smaller than another predefined threshold AI SHR, then B4D2 A0 BDB5-grams are used instead of D2-grams.
Figure 3 shows an algorithm which determines how deeply the shrinking is occurred.
The main stream of this algorithm is equivalent to that in Figure 2.
It also recursively finds the optimal shrinking window size, but can not be further reduced when the current model is an unigram.
The merit of shrinking D2-grams is that it can construct a model with a lower dimensionality.
Since the maximum likelihood estimate is used in calculating probabilities, this helps obtaining stable probabilities.
According to the well-known curse of dimensionality, the data density required is reduced exponentially by reducing dimensions.
Thus, if the lower dimensional model is not different so much from the higher dimensional one, it is highly possible that the probabilities from lower dimensional space are more stable than those from higher dimensional space.
636 Function ChangingWindowSize(DC D2 ) Input: DC D2 : D2-grams Output: an integer for changing window size 1.
Set exp := HowLargeExpand(DC D2 ).
2. If expBQ BC Then return exp.
3. Set shr := HowSmallShrink(DC D2 ).
4. If shrBO BC Then return shr.
5. return 0.
Figure 4: A function that determines the changing window size of D2-grams.
4.3 Overall
Self-Organizing Structure For a given i.i.d. sample DC CX, there are three possibilities on changing D2-grams.
First one is not to change D2-grams.
It is obvious when D2-grams are not changed.
This occurs when both BWB4D2BND2B7 BDB5 AL AI EXP and BWB4D2BND2 A0 BDB5 AK AI SHR are met.
This is when the expanding results in too similar distribution to that of the current D2-grams and the distribution after shrinking is too different from that of the current D2-grams.
The remaining possibilities are then expanding and shrinking.
The application order between them can affect the performance of the proposed method.
In this paper, an expanding is checked prior to a shrinking as shown in Figure 4.
The function ChangingWindowSize first calls HowLargeExpand.
The non-zero return value of HowLargeExpand implies that the window size of the current D2-grams should be enlarged.
Otherwise, ChangingWindowSize checks if the window size should be shrinked by calling HowSmallShrink.IfHowSmallShrink returns a negative integer, the window size should be shrinked to (D2 + shr).
If both functions return zero, the window size should not be changed.
The reason why HowLargeExpand is called prior to HowSmallShrink is that the expanded D2grams handle more specific data.
(D2 B7BD)-grams, in general, help obtaining higher accuracy than D2grams, since (D2 B7BD)-gram data are more specific than D2-gram ones.
However, it is time-consuming to consider higher-order data, since the number of kinds of data increases.
The time increased due to expanding is compensated by shrinking.
After shrinking, only lower-oder data are considered, and then processing time for them decreases.
4.4 Sequence
Tagging Since natural language sentences are sequential as their nature, the word spacing can be considered as a special POS tagging task (Lee et al., 2002) for which a hidden Markov model is usually adopted.
The best sequence of word spacing for the sentence is defined as DD A3 BDBNC6 BP CPD6CVD1CPDC DD BDBNC6 C8B4DD BDBNC6 CYDC BDBNC6 B5 BP CPD6CVD1CPDC DD BDBNC6 C8B4DC BDBNC6 CYDD BDBNC6 B5C8B4DD BDBNC6 B5 C8B4DC BDBNC6 B5 BP CPD6CVD1CPDC DD BDBNC6 C8B4DC BDBNC6 CYDD BDBNC6 B5C8B4DD BDBNC6 B5 by where C6 is a sentence length.
If we assume that the syllables are independent of each other, C8B4DC BDBNC6 CYDD BDBNC6 B5 is given by C8B4DC BDBNC6 CYDD BDBNC6 B5BP C6 CH CXBPBD C8B4DC CX CYDD CX B5BN which can be computed using Equation (1).
In addition, by Markov assumption, the probability of a current tag DD CX conditionally depends on only the previous CZ tags.
That is, C8B4DD BDBNC6 B5BP C6 CH CXBPBD C8B4DD CX CYDD CXA0CZBNCXA0BD B5BM Thus, the best sequence is determined by DD A3 BDBNC6 BP CPD6CVD1CPDC DD BDBNC6 C6 CH CXBPBD C8B4DC CX CYDD CX B5A1C8B4DD CX CYDD CXA0CZBNCXA0BD B5BM (3) Since this equation follows Markov assumption, the best sequence is found by applying the Viterbi algorithm.
5 Experiments
5.1 Data Set The data set used in this paper is the HANTEC corpora version 2.0 distributed by KISTI 1 . From this corpus, we extracted only the HKIB94 part which consists of 22,000 news articles in 1994 from Hankook Ilbo.
The reason why HKIB94 is chosen is that the word spacing of news articles is relatively more accurate than other texts.
Even though this data set is composed of totally 12,523,688 Korean syllables, the number of unique syllables is just 1 http://www.kisti.re.kr 637 Methods Accuracy (%) baseline 72.19 bigram 88.34 trigram 87.59 self-organizing bigram 91.31 decision tree 88.68 support vector machine 89.10 Table 1: The experimental results of various methods for automatic word spacing.
2,037 after removing all special symbols, digits, and English alphabets.
The data set is divided into three parts: training (70%), held-out (20%), and test (10%).
The held-out set is used only to estimate AI EXP and AI SHR . The number of instances in the training set is 8,766,578, that in the held-out set is 2,504,739, and that in test set is 1,252,371.
Among the 1,252,371 test cases, the number of positive instances is 348,278, and that of negative instances is 904,093.
Since about 72% of test cases are negative, this is the baseline of the automatic word spacing.
5.2 Experimental
Results To evaluate the performance of the proposed method, two well-known machine learning algorithms are compared together.
The tested machine learning algorithms are (i) decision tree and (ii) support vector machines.
We use C4.5 release 8 (Quinlan, 1993) for decision tree induction and CBCEC5 D0CXCVCWD8 (Joachims, 1998) for support vector machines.
For all experiments with decision trees and support vector machines, the context size is set to two since the bigram shows the best performance in Figure 1.
Table 1 gives the experimental results of various methods including machine learning algorithms and self-organizing D2-gram model.
The ‘selforganizing bigram’ in this table is the one proposed in this paper.
The normal D2-grams achieve an accuracy of around 88%, while decision tree and support vector machine produce that of around 89%.
The self-organizing D2-gram model achieves 91.31%.
The accuracy improvement by the selforganizing D2-gram model is about 19% over the baseline, about 3% over the normal D2-gram model, and 2% over decision trees and support vector machines.
In order to organize the context size for D2-grams Order No.
of Errors Expanding then Shrinking 108,831 Shrinking then Expanding 114,343 Table 2: The number of errors caused by the application order of context expanding and shrinking.
online, two operations of expanding and shrinking were proposed.
Table 2 shows how much the number of errors is affected by their application order.
The number of errors made by expanding first is 108,831 while that by shrinking first is 114,343.
That is, if shrinking is applied ahead of expanding, 5,512 additional errors are made.
Thus, it is clear that expanding should be considered first.
The errors by expanding can be explained with two reasons: (i) the expression power of the model and (ii) data sparseness.
Since Korean is a partially-free word order language and the omission of words are very frequent, D2-gram model that captures local information could not express the target task sufficiently.
In addition, the classconditional distribution after expanding could be very different from that before expanding due to data sparseness.
In such cases, the expanding should not be applied since the distribution after expanding is not trustworthy.
However, only the difference between two distributions is considered in the proposed method, and the errors could be made by data sparseness.
Figure 5 shows that the number of training instances does not matter in computing probabilities of D2-grams.
Even though the accuracy increases slightly, the accuracy difference after 900,000 instances is not significant.
It implies that the errors made by the proposed method is not from the lack of training instance but from the lack of its expression power for the target task.
This result also complies with Figure 1.
5.3 Effect
of Right Context All the experiments above considered left context only.
However, Kang reported that the probabilistic model using both left and right context outperforms the one that uses left context only (Kang, 2004).
In his work, the word spacing probability C8B4DB CX BNDB CXB7BD B5 between two adjacent syllables DB CX and DB CXB7BD is given as C8B4DB CX BNDB CXB7BD B5 BP BCBMBEBH A2C8 C4 B4DB CXA0BD BNDB CX B5 BCBMBH A2C8 C5 B4DB CX BNDB CXB7BD B5 (4) BCBMBEBH A2C8 CA B4DB CXB7BD BNDB CXB7BE B5BN 638 0.7 0.75 0.8 0.85 0.9 0.95 1 0 1e+06 2e+06 3e+06 4e+06 5e+06 6e+06 7e+06 8e+06 Accuracy (%) No.
of Training Examples Figure 5: The effect of the number of training examples in the self-organizing D2-gram model.
Context Accuracy (%) Left Context Only 91.31 Right Context Only 88.26 Both Contexts 92.54 Table 3: The effect of using both left and right context.
where C8 CA BNC8 C5 BNC8 C4 are computed respectively based on the syllable frequency.
In order to reflect the idea of bidirectional context in the proposed model, the model is enhanced by modifying C8B4DB CXA0BD DB CX CYDD CX B5 in Equation (1).
That is, the likelihood of C8B4DB CXA0BD DB CX CYDD CX B5 is expanded to be DI C8B4DB CXA0BD DB CX CYDD CX B5 BP AB BD A2C8B4DB CXA0BE DB CXA0BD CYDD CX B5 AB BE A2C8B4DB CXA0BD DB CX CYDD CX B5 AB BF A2C8B4DB CX BNDB CXB7BD CYDD CX B5BM Since the coefficients of Equation (4) were determined arbitrarily (Kang, 2004), they are replaced with parameters AB CX of which values are determined using a held-out data.
The change of accuracy by the context is shown in Table 3.
When only the right context is used, the accuracy gets 88.26% which is worse than the left context only.
That is, the original D2-gram is a relatively good model.
However, when both left and right context are used, the accuracy becomes 92.54%.
The accuracy improvement by using additional right context is 1.23%.
This results coincide with the previous report (Lee et al., 2002).
The AB CX ’s to achieve this accuracy are AB BD BPBCBMBHBNAB BE BPBCBMBF, and AB BF BPBCBMBE.
Method Accuracy(%) Normal HMM 92.37 Self-Organizing HMM 94.71 Table 4: The effect of considering a tag sequence.
5.4 Effect
of Considering Tag Sequence The state-of-the-art performance on Korean word spacing is to use the hidden Markov model.
According to the previous work (Lee et al., 2002), the hidden Markov model shows the best performance when it sees two previous tags and two previous syllables.
For the simplicity in the experiments, the value for CZ in Equation (3) is set to be one.
The performance comparison between normal HMM and the proposed method is given in Table 4.
The proposed method considers the various number of previous syllables, whereas the normal HMM has the fixed context.
Thus, the proposed method in Table 4 is specified as ‘self-organizing HMM.’ The accuracy of the self-organizing HMM is 94.71%, while that of the normal HMM is just 92.37%.
Even though the normal HMM considers more previous tags (CZ BP BE), the accuracy of the self-organizing model is 2.34% higher than that of the normal HMM.
Therefore, the proposed method that considers the sequence of word spacing tags achieves higher accuracy than any other methods reported ever.
6 Conclusions
In this paper we have proposed a new method to learn word spacing in Korean by adaptively organizing context size.
Our method is based on the simple D2-gram model, but the context size D2 is changed as needed.
When the increased context is much different from the current one, the context size is increased.
In the same way, the context is decreased, if the decreased context is not so much different from the current one.
The benefits of this method are that it can consider wider context by increasing context size as required, and save the computational cost due to the reduced context.
The experiments on HANTEC corpora showed that the proposed method improves the accuracy of the trigram model by 3.72%.
Even compared with some well-known machine learning algorithms, it achieved the improvement of 2.63% over decision trees and 2.21% over support vector machines.
In addition, we showed two ways for improving the 639 proposed method: considering right context and word spacing sequence.
By considering left and right context at the same time, the accuracy is improved by 1.23%, and the consideration of word spacing sequence gives the accuracy improvement of 2.34%.
The D2-gram model is one of the most widely used methods in natural language processing and information retrieval.
Especially, it is one of the successful language models, which is a key technique in language and speech processing.
Therefore, the proposed method can be applied to not only word spacing but also many other tasks.
Even though word spacing is one of the important tasks in Korean information processing, it is just a simple task in many other languages such as English, German, and French.
However, due to its generality, the importance of the proposed method yet does hold in such languages.
Acknowledgements This work was supported by the Korea Research Foundation Grant funded by the Korean Government (KRF-2005-202-D00465).
References Y.
Bengio, R.
Ducharme, P.
Vincent, and C.
Jauvin. 2003.
A Neural Probabilistic Language Model.
Journal of Machine Learning Research, Vol.
3, pp.
1137–1155. E.
Charniak. 1993.
Statistical Language Learning.
MIT Press.
S. Chen and J.
Goodman. 1996.
An Empirical Study of Smoothing Techniques for Language Modeling.
In Proceedings of the 34th Annual Meeting of the Association for Computational Linguistics, pp.
310–318. M.
Dickinson and W.
Meurers. 2005.
Detecting Errors in Discontinuous Structural Annotation.
In Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics, pp.
322–329. F.
Jelinek and R.
Mercer. 1980.
Interpolated Estimation of Markov Source Parameters from Sparse Data.
In Proceedings of the Workshop on Pattern Recognition in Practice.
T. Joachims.
1998. Making Large-Scale SVM Learning Practical.
LS8, UniversitDJCPt Dortmund.
S.-S. Kang, 2000.
Eojeol-Block Bidirectional Algorithm for Automatic Word Spacing of Hangul Sentences.
Journal of KISS, Vol.
27, No.
4, pp.
441– 447.
(in Korean) S.-S.
Kang. 2004.
Improvement of Automatic Word Segmentation of Korean by Simplifying Syllable Bigram.
In Proceedings of the 15th Conference on Korean Language and Information Processing, pp.
227–231. (in Korean) S.
Katz. 1987.
Estimation of Probabilities from Sparse Data for the Language Model Component of a Speech Recognizer.
IEEE Transactions on Acoustics, Speech and Signal Processing.
Vol. 35, No.
3, pp.
400–401. K.-S.
Kim, H.-J.
Lee, and S.-J.
Lee. 1998.
ThreeStage Spacing System for Korean in Sentence with No Word Boundaries.
Journal of KISS, Vol.
25, No.
12, pp.
1838–1844. (in Korean) J.-D.
Kim, H.-C.
Rim, and J.
Tsujii. 2003.
SelfOrganizing Markov Models and Their Application to Part-of-Speech Tagging.
In Proceedings of the 41st Annual Meeting on Association for Computational Linguistics, pp.
296–302. D.-G.
Lee, S.-Z.
Lee, H.-C.
Rim, and H.-S.
Lim, 2002.
Automatic Word Spacing Using Hidden Markov Model for Refining Korean Text Corpora.
In Proceedings of the 3rd Workshop on Asian Language Resources and International Standardization, pp.
51–57. T.
Mitchell. 1997.
Machine Learning.
McGraw Hill.
D. Mochihashi and Y.
Matsumoto. 2006.
Context as Filtering.
Advances in Neural Information Processing Systems 18, pp.
907–914. S.-B.
Park and B.-T.
Zhang. 2002.
A Boosted Maximum Entropy Model for Learning Text Chunking.
In Proceedings of the 19th International Conference on Machine Learning, pp.
482–489. R.
Quinlan. 1993.
C4.5: Program for Machine Learning.
Morgan Kaufmann Publishers.
D. Ron, Y.
Singer, and N.
Tishby. 1996.
The Power of Amnesia: Learning Probabilistic Automata with Variable Memory Length.
Machine Learning, Vol.
25, No.
2, pp.
117–149. R.
Rosenfeld. 1996.
A Maximum Entropy Approach to Adaptive Statistical Language Modeling.
Computer, Speech and Language, Vol.
10, pp.
187– 228.
H. Sch¨utze and Y.
Singer. 1994.
Part-of-Speech Tagging Using a Variable Memory Markov Model.
In Proceedings of the 32nd Annual Meeting of the Association for Computational Linguistics, pp.
181– 187.
M. Siu and M.
Ostendorf. 2000.
Variable N-Grams and Extensions for Conversational Speech Language Modeling.
IEEE Transactions on Speech and Audio Processing, Vol.
8, No.
1, pp.
63–75. 640


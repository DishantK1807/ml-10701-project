Transformational Dec~npos£t~on z A Simple Description of an Algorithm for Transformational ' Analysis of English Sentences~ Danuta Hi~ AravlndK.
Joshl • University of Pennsylvanla ABSTRACT In this paper, we will present a ra~her simplified description o£ an algorithm for transformationalanalysls (decomposition) of English sentences, our purpose here is not to discuss the transformational theoryj the full details of the theoretical formulations of the algorlthmj or of the gran~ar.
Ratherj we will present a set of examples of the decomposition and some discussion of them with the hope that it will give enough insight into the capability of the algorlthm and indicate to some extent the power of transformational analysis.
•This work was carried out in the Transformations and Discourse Analysis Projectj University of Pennsylvania, sponsored by the National Science Foundation.
1.0 Here, we will present a rather simplified description of an algorithm for transformational analysis (decomposition) of English sentences.
Our purpose here is not to discuss the transformational theory 3 the full details of the theoretical formulations of the algorlthm 3 or ofthe grammar W.
Rather, we will present a set of examples of the decomposition and some discussion of them with the hope that it will give enough insight into the capability of the algorithm and indicate to some extent the power of transformational analysis• I.i Transformations are certain relations among sets of sentences and in particular, it is possible to relate a given sentence to a set of elementary sentences (kernel sentences) by means of transformations.
The kernel sentence forms (for English) are defined as the string of class marks N ~ ~ followed by one of the kernel Object strings: ~, N, ~, ~P__~, __~, e~, D, A (m Noun; ~: ~ense/aux; ~: verb; ~: preposition; D: adverb; ~: adjective; ~ : zero).
Thus John bou~h't'a book; Nar~ will come etc.
are kernel sentences.
Each transformation is characterized by certain permutations, deletions or additions of specific class marks or constants.
In the resultant of a transformation one may look for s ubsequenceswhich remain~xg~n~ even when the resultant is subjected to further transformations.
The 5asic features of the algorithm are a) stating the various invarlant sequences and b) formulating I) a grammar of such Invarlant sequences, 2) a corre~ spondlng recognition procedure, and 3) a systematic procedure for computing the kernel sentences as well as other kernel-like sentences and the corresponding transformational history.
It should be emphasized tha t i t is not assumed and also not impl~ed in the algorithm that any kind of prior analysis (either strlng analysis or constituent analysis) is requlred as a prere~uisltelfor the present algorithm.
~Such a detailed description will appear later elsewhere.
++,+,..+ ++..., /i/+\~ 1.2 Transformations are initially defined on kernel sentence forms.
Howeverj they work on certain other sentence forms which are not kernel sentence forms.
Thus a transformation is completely defined by first deflnlng it on a suitable kernel sentence form(s) and then extendlng • the ~omaln of the transformation to other "sentence forms.
This exte~.slon which contains infinitely many sentence forms can be represented by+ first listing a finite number of sentence forms in the extension and all the remaining sentence forms in the extension are obtained by certain recurslve rules (see the i-llsts in 1.3). 1.3 A unan~.z, transformation transforms one sentence form into another sentence form and a bi~nary transformation transforms a pair of sentence forms into another sentence form.
Each unary transformation defined on a sentence form may be represented by a sequence of class marks constituting another sentence form.
Most binary transformations can be defined as interruptions of certain unary transformation sequences at stated positions by certain other sequences of class marks.
These Interruptlng sequences are not sentence forms but are deformatlons_-o~ sen" -------"--'se ~ o~ <+ tence forms corresponding to the ~ sentence form of the binsry transformation.
For example, John was detained by the old woman decom~ses into woman detained John and woman t be old with a passive transformation on the first kernel and a binary transformation on the sentence John was detained by the woman and the kernel sentence woman t be old.
~ The sentence form corresponding to the passive transformation, N t be en V by N is then interrupted by the sequence AN before the last AN is a deformation of the kernel sentence form N t be A symbol.
-which is the second sentence form of the binary transformation.
The resulting sentence form is thus N t be en V by A B,.
In the resulting sentence form the shared symbol N appears only once.
Such a symbol which two transformation sequences • share (or on which t_hey overlap) be ignore here the article th.._~e for simplicity.
a. 2 -wlll be called a residue of one.sequence with respect to another.
2 In
addition to the transformation sequences which are sentence forms, and the interrupting sequences (deformed sentence forms) which correspond to most binary transformations, there is yet another type of interrupting sequences (again deformed sentence forms) which correspond tonominalizatlons.
For example consider: the book was written by Brown and John's travel to Italy was descrlbed by Mar~.
In the second sentencej the kernel sentence John travelled to Italy is mappedonto the object of Mary described before the resultant undergoes the same passive which acted on Brown wrote the book giving the first sentence.
N's nV P N (John's travel to Italy) is a nominalizati0n which appears in many dlfferent transformations and carries in them the associated kernel into one of the positions which could be occupied by a noun.
For each transformation sequence in each intersymbol position we llst all interrupting sequences (including both the second and the third kind of sequences as dlscussedabove).
Of course, the interrupting sequences have their own interrupting sequences, etc.
These Intersymbol interrupting lists will be called i-lists.
2. A sketch of the algorithm 2.0 As stated in i, in order to define the set of all transforms we need a set Of sequences of class marks (or class mark-llke symbols) which has 3 subsets.
1. Sequences each of which corresponds to a sentence form (e.g.
the passive sequence N t be en V by N); 2.
Sequences each of which represents a deformed kernel-form and Is not a sentence form, but when inserted between specified neighboring symbols of a sequence of the first set~ preserves the character of the sentence form (e.g.
_~j en V N); 3.
Sequences each of which represents a deformed kernel-form and is ~he concept of the residue can be extended to shared sequences as well as sequences which replace a given symbol in another sequence.
The term carrier is used in this context.
This device has been extensively used in this algorithm.
-3not a sentence form, but, when substituted for a symbol in a sequence (of ~et I or 2 or 3), preserves the character of that sequence (e.g.
er V or/L, n A of N).
There are also rules for inserting sequences from the second set into other sequences or into sequences of the third set, without changing the character of either.
All insertion or replacement rules are stated in the interruption lists appearing between every pair of adjacent symbols of each sequence.
Most of the sequences in the first set represent unary transformations of kernel forms.
Many are extended (often by permitting the replacement of certain symbols with selected sequences from the third set) to include analogous unary transforms of kernel-llke forms.
The second set of sequencesj together with the rules of their insertion in the sequences for unary transformations, account for most of the binary transformations.
Other binary transformations are represented by replacement in pairs of class marks in unary transformation sequences by members of the third sets most of which consist of nomlnalizations.
An arbitrarily long English sentence form can be seen as composed of a finite number of such sequences recurstvely embedded in one another.
2.1 Corresponding
to the above three subsets of sequences and their mutual embedding rules, we recognize three sets of strings.
Each string is a program for comparing one of the sequences with a portion of the analyzed sentence form of the data.
The program is equipped to permit interruption by other such programs according to the i-lists of the sequence.
Each string, when entirely matched by a segment Of data, replaces that segment with the carrier of the string.
The carrier is sometimes null.
In strings from the second set it is usually the residue of the binary insert (e.g.
the center symbol of a noun phrase: N of AN, of~,etc.).
In strings from the third set the carrier is a class-mark-llke symbol which, by replaclng a classmark in a formderlved from a kernel form I extends it to one simi--4 -larly derived from a kernel-llke form.
Let the carrier be~\[nV~\] for a noun phrase built around an nV.
The extended passive form: N\[or~\[nV\]\] t be en V by N represents the form of the sentence John's travel to Italy was described by Haryas soon as the carrier of the str~ng replaces in the data the nomlr~ ! segment John's travel to Italy.
The carrier from all strings in the first set is s, a symbol of a wellformed sentence.
The program'of eachl string, whose sequence is a deformed (Or transforme~) kernel or kernel-like form, reconstructs that form for decomposition and attaches £o it a labe___~l descrlptive of the deformation (or transformation).
The result of a decomposition is a set of kernel or kernel-llke sentences with labels.
Some of the kernel sentences are / incomplete and have blanks in them because a transformation may de t ~....... elements.
Some kernel-llke sentences may contain, instead of a wo/rd) a class-mark-llke symbol (e.g,~) with a reference.to aprevlous com) ponent of the decomposition.
If that previous component is a kernel sentence (with or without blanks), then the label (describlr~ the deformation) with the kernel-llke form (containing the reference) with its label, together constitute a description of the transformation undergone by the component kernel sentence.
If the previous component itself is a kernel-llke sentence with a reference in turn to another component, both'kernel-llke sentences and all three labeis constitute the description of the transformatlonundergone by the c~,nponent kernel sentence ultimately referred to s etc.
If the symbol x appears, instead of a word, in a kernel or ker' nel-llke sentence, it replaces a regular noun there.
It is introduced in the sentence as a carrier from a nominallzation such as a teacher of Latln, .the driving instructor, etc.
The same x must appear in two or more sentences of the decomposition •(onewhere the nominal stands for a noun, and one in the sentence of whlch the nominallzatlon is a deformation, e.g. x teach Latin).
Which x's require identical substitutions is discoverable, because each x has in a sharp bracket (< >) the names of every prevlous llne in which the same x appeared, often no actual substltutionls posslble and the x serves only to identlfy ~ with each other, two or more blanks in different components.
The substitution of the noun replacing N for x in lines aj bj . . . d is implied when one kernel-llke component has the form I t be x ~/a~ b . . . d> . 2.2 The three sets of strings (programs) constitute the major portion of granmmtlcal material in the algorithm.
Another body o£ such material is the dlctlonar~.
• The dictionary associates to each English word a symbol representing the wordts grannnatlcal class~ together with markers of certain additional characteristics the word may reveal by restricting its environment in the sentence.
Some words may occur in more than one role and have therefore several equlvalents in thedictlonary.
(e.g. the word labor should be given four different class marks: present tense Vs V(untensed verb)j (nomlnallzatlon deslgnatlngthe activity of laboring)~ er'V (nominalIzatlon designating the actor(s), possibly laborers in aggregate)).
:al The dictionary for Transformation^Crannnar must carry far more details than is needed for the String Analysis alone.
Thus for example the transformational analysis must be able to discover in Johnts sleep not only a nouh phrase~ but also the incomplete kernel sentence Johnsleep ~ which underlies each transformation containing such a noun phrase.
Hence• the class marks: nV (sleep)j ~ (sharing) vA (brave y), (teacher), eeV (e loyee), (brotherho L aV (helpful) and several others.
~:AV-entrY in the String Analysis dictionary contains information /about: the L~nd of objects required by the verb V.
An nV may require objects differ/~t from its V and this must be indicated (e.g.
th~ attacked the enemy vs.
they made an attack " on the enemy).
Noun phrases like n V, IngV, etc.
can occur in place o£ a sentence object or a subject of a sentence but only when it is organized ', \ . around a verb requiring such subjects or obJectsj and such, verbs are marked accordingly in the dictionary.
The subject and object restrictions for a verb or a verb-related -6wordare recorded in pairs~because they are not mutually independent.
(0-" is the label for a subject (Z) requirement; _.~_~for an object (~) requirement of a tensed or untensed verb and some in_~ occurrences; t~nV labels an object requirement of nV-nominallzatlonj ~ingV those of an i~ V-nomlnalizatlonl etc.
When neededj~ I is distinguished from ~ 2 (which usually is the same as the corresponding ~-~) to mark the form assumed by the object when it precedes the verb or verb related word (compare for instance house construction with construction of house where c~ nVl (the same as o~ ) is N, while ~ nV2 (the same as nV ) IsP \[of\] N)).
The analysis is preceded by a replacement of the Words in the sentence by corresponding entries in the dictionary.
2.3 The
process of analyzing a sentence begins in postulatlng (in turn) all those strings in the grammar which may occur at the beglnnlngP--q~o//~ of a sentence (and whose initial symbol is the s~me as the first symbol in the data).
(See i I of #30).
Each verified postulate forces other • postulates as its consequences I until the termlnal period of the sentence is found which is consistent with a hypothesis.
It is qulte likely that an analysis will produce more than one correct reading of a sentencej because structural ambiguity is even more frequent in transformational grammar than it is in the mere s~ring analysis.
-73.
Examples of decomposition Four examples of decomposition obtained by the algorithm follow.
These examples are intended to exhibit the power of the algorithm.
It is posslble I without changing the algorithm I to increase the power and depth of the analysis by incorporating more details about transformations as they become available by adding either new transformation sequences or adding new classes and new co-occurencerestrlctlons in the dictionary or both.
Among the various issues which are nowrecelvlng further attentlon, some are as follows: a) a better characterization of nF-nouns and the underlylng kernel sentences in terms of which the modifiers can he explained (e.g.
school prlnclpa~ (example 3), French teacher; ~ueen~ etc); b) the relation of classifier nouns to each other and their kernel positions with respect to'thelr modifiers (e.g.
organ~ ~e~¢er Ic chemistryj helpful trip, friendly ~e~j etc.); ¢) precise relatlon of constants (e.g.
hi__ss~ both in example h) or classifier nouns with a definite artlcle to other nouns or phrases for which they are a replacement.
Examples: The first column lists the kernel sentences or kernel-llke sentences (or intermediate resultants).
The second column glvesthe rest of the transformational history.
Here the names as stated are partial in the sense that the corresponding strings do not always correspond to complete transformatlal sequences as discussed previously.
ID Text: • The fact that John is a T N that N pres.be\[3\] T w his 1lie here unbearable.
R'B nV D aV • stranger makes N present V\[3\] I .~I indicates here 3rd person.
lo 2.
3. Decomposition: Kernel or Kerneltransformation llke sentences ~(partlal .@mes) carrier John pres.be stranger (a) container 2 noun: N w that S Nw.
~/l> Helive here; N~'-nomlnaliztion; g's n~ "1 "N <'2> cannot bear~(2> adJectlvlzatlon : aV ~ ~3> N < l>pres, make'N< 2>AC3> container: N V NA S w w -2.
Text: Our algebra teacher Rls N erV was requested by the school past be \[3\] enV by T N prlnclpal to interview nF Co V Decomposition: Kernel or Kernelllke sentences a woman candidate from Swarthmore.
T N N P N transformations (partial .names) carrier first reading: 1.
x teach algebra 2.
Wehave x~l> 3.
x heads 3 school ~.
woman-'V P candidate (a) app app -a(V pp= be; Papp = ~) 5.
candldate-be from Swarthmore noun, right modified: •candidate "i P Na 6.
x <1,27 interview . .-'~ passive of container: S candldate<~,5)~ N t VwN infinitive 7x (3~pas~ request x \[ <1,2 (6> -) x-nomlnallzation: GerV x ~i> • left modified noun: N's N x <1.,2> x-nominallzation: NnF x 43>,., compound noun: NIN 2 candldate<~2 k %oughly, container forms are sentence forms In which 1) there is a verb (Vw) requiring a sententlal subject or a sententlal object or both or 2) there is a noun (N w) or fidJectlve (Aw) requiring sententlal complements.
~eads is a V for nF principal as found in dictionary.
-appropriate -9 : !Kernel or Kernelllke sentences second reading: I.
2. 3.
transformations .(partial names) x teach us algebra x head school woman V P candidate (a) compound • noun: app app 4.
candidate-be from Swarthmore noun I right mod' ifled: NIPN 2 ~.
x~J> interview candidate ~passlve ofcontalner: )Jlnfinitlve 6.
x<2>past request x <1%2<, ° • Text: x-nomlnallzation: flerv x-nominalization: NnF 5N2 Accident insurance of an employee by N nV P T eeV P protects both.
present, V: \[3\] Q Decomposition: Kernel or Kernel~llke sentences first reading: I.
employ x 2.
x employ him 3.
x <2>insure x < l>(an) P accident .app ~.
N ~3~ present protect both his employer R's erV second reading: 1.
employ x 2.
x -.employ 3.
he ~ve x /~2> h.
x <2> insure x <OCin) P accident app ~.
N ~h> present protect both Note: he Text: carrier x <l> x ~2> candidate <3> candidate z3, > S transformation (partlalnames) carrier x-nomlnallzation: eeV x ~I> x-nomlnalizati0n: erV ..x <2> ~-nomlnallzatlon: nV N\[nV+~ • ÷z\] <3) container: N t V N W S W x-nomlnallzatlon: eeV x-nomlnalizatlon: erV left modified noun: • N'sN 2 ~-nominallzatlon: nV container: N t V N W . <l> x <2> X <2,3 > N\[nV+ ~ ÷z\] <3> s The analysis would reach even deeper if the words ~hls and ~b°th were treated as reference words leading to a substltutlonj e.g. of x <I.__.~> for he, x ~I> and x <2> for both.
Crop sharing between the tenant and the land owner N Ing V P T N and T N err Q may replace N.
-10Is present be \[3\] T organized labor.
enV erV Decomposition: Kernel or Kernellike sentences an economic arrangement unsatisfactory to aN nV aV P I.
X own land 2.
tenant (the) and x ~l>(the)share crop 3arrange -; P economy app h.
x labor x-nominallzatlon: erV ~.
organize x ~h> left modified noun: enVN 6.
~<3> -not satlsfy x <~,5> q right modlfled:~aV 7N<2> present be'N~3,6~ (an) container: N'~t be'N transformations ~(partlal names) carrier x-nomlnallzatlon: erV ..x ~I> "~-nomlnallzatlon: Ingv N\[ingVd• ~~2> N"~-nomlna llzat ion: nV N\[nv\] ~3> x< ~,5> IS k.
AnillustratiQn of the procedure Example 5 John is a good story teller This example illustrates the process of analysis in some detail.
Because of space limitations for this paper a rather simple structure had to be chosen for this purpose.
A short dictionary of the words in the sentence has been prepared and also a small set of grammar strings in provided for this illustration.
Both were greatly simplified so that rich grammatical material will not obscure the demonstratl6n of the choice of hypotheses, their verification or rejection, the use of the carrler~ changes of levels in analysis and the exploration of alternative readings.
The analysis always begins with the strlng ~30 postulated.
A decomposition ends I when the program associated with thls~trlng is finished.
All possible sentence beginnings are included in i I of ~30.
--Aftert-hee-nd of--~30-aiternatfve-decompositlons are sought.
When a new string is postulated on the basis of an i-llst of .... another strlngj the verification of thenew string takes place in the next level of a push-down memory~ so that the state of computation of the suspended string is not affected.
Whenever two or more alternative paths open up for the analy~s~i~sj each must be pursuedto a successful completion or until failure occurs.
(The analysis must produce every possible decomposition of a structurally ambiguous sentence).
In our analyslsj different paths are pursued ~ 11 serially.
Every time an inspection of i-lists allows more than one hypothesls~ .one is chosen~ while a list of the remaining ones together with all relevant positions of the.memory goes on top of another push-down storage.
The contents of that •storage is examined . after the end of the chosen path.
The analysis ends'after all posslble paths have been explored and thlsstorage is empty.
~n the example of analysis given herej we markbypassed open branches by asterisks on the left margin and their resumption by slmilar aster~ Isks encircled.
~ Dictionary used in Example ~.
John N \[proper, hu~anj singular\] . Is present be \[3~; ~r-: N\[or x\];¢~= NA/PN/D.
o-: S\[nV/inO\]; to.
~, ~, ~\[nV/ingv\] etc.\] a T\[a\] good A \[A-ly =well\] story N tellererV \[& : human, count; ~J=~erVl: N/N\[nV\]/~;~JerV2; PN\[or x or N: nV .~ Grammar Strings used in example 5Nominal strings (each gives a noun-like carrier): I° T\[ the/a/an\] ll i N\[or x; or~: nV/ingV/nA/nl~\] 2 Dame= kernel: carrier: N\[the article\] (as matched) 2.
~x i .\[orx\] i I 2,~,5, " i 2 name: . left modified noun: AN kernel: N be A carrier: N< address of kernel> ~eslgnatesthlrd person, ZZ~ . . e I0IiN\[ object \] i I .~ • it.
# x\]i2 A N\[nV/ingV; or i 1 .3,, i 2 name: left modified nominal: A N \[or x\] addition to kernel of'N : ; A-ly (Alas matched) carrier: ~ ~as matched from data) i I err i I name: x-nomlnallzatlon kernel: x-V• carrier: x \[subclasses required from subject of V\]~address of kernel> i I i 2 erV name: x-nominalization kernel: xV N '(N,V as matchedfromdata), carrier: x \[subclasses required from subject .of V\] ~address of.
kernel> i 1, i 2 nV • nv i 1 • t 2 name: N-nomlnallzatlon: nV\[+~ \] kerne I: f/n " carrier: ~n;\] v <a~dress of kernel~) Object Strings: .\[or x\] i: I I • nameobject contribution to kernel in carrier carrier: ~\[N\] il N\[or x\] P i I i 2 1,2,~,9 i s (as matched from data) (N as matched in data) i 2 i 3 N\[or x\] w 13 name object contribution to kernel in carrier carrier:• ~\[N P N\] =.
(N P N as matched in data) Sentence Strings 20 N t V g i I i 2 i 3 10,11,1,~,3,~,~,6 % 21DaJme: kernel: carrier: S < address of kernel> 11 12 13 ~i~ N t be N t 1 i 2 1,3,6 name: ~containing "be" : N is N kernel: N t be N carrier: S 4 address of kernel> identity of kernel form: N t V N t V ~ (as found in data) (as matched from data) Monitor String i I i 2 i B 30 " S " i I 1,2,3,~,~,6,20,21 i 2 i 3 Zllustratlon of the process of analysis: Data:.
N\[John\] pres.V\[3,be\] T\[a\] A\[good\] N\[story\] erV\[teller\].
~30:= .° S . (levell) S # N i I of 30 allows the following strilgs beginning with N to interupt 30 here: ~,20.
Try 20, mark ~ for the branch opening with 9 on level 2.
W Data: N\[John\] pres V\[3,be\] Tie\] A\[good\] N\[story\] er V\[teller\] ~20 : N tV ~ (level 2) N=N\[John\] t =present V=V b_e accepts Joh____nn as subject.
For a human subject, the obJect cannot be~ 6(in this simplified grammar).
The verb b~e 14 rejects object form of ~Ii.
R ~ T Among the remaining strings of i 3 only 1 starts by T.
Data: T\[a\] A\[good\] N\[story\] ~i : T N T~T N~A f I of i has 2,3 beginning wlthA.
bypassed 3.
of 2o (1,2,3,a,%10) erV\[teller\].
(level 3) Try 2, mark ~.__~ for Data: A\[goodJ N\[story\] er V\[teller\].
(level ~).
A---A ~/ N=N note:i I of 2 has string 5 beginning withN.
Mark ~-~ for the bypassed branch, end 2.
kernel I: story-be good.
Resume I.
Data: ~\[story\] ~l> erV\[tener\].
(level 3) continue ~I $/~ N=N note:i I of I has string ~ beginning with N.
Mark open branch ~-~.
end 1.
Resume 20.
Data: N\[story\] < 1 > (a) er y\[teller\].
(level 2) contfnue~20 of the strings from i 3 allowed by object requirement of the verb b ej ~ and I0 begin wfth N.
Try 10j mark ___ ~ for bypassed ~.
D ta: \[story\] (a) err\[teller\].
(level 3) #IO: N N= N end i0.
Resume 20.
Data: ~ \[N\[Story\]< I> (a) J erV\[teUer\].
(level 2) contlnue~20.
~=~ \[N\[storyL<l> (a)\] End 20.
Ke~del 2: John pres.
be story < I> (a).
Resume 30.
D.ta= s crY\[teller> ( evel l) continue ~3o S =S -~er There is no string in f 2 of 30 which begins with er.
Resume the nearest open branch: #~ at level 3Erase mark ~ (kernel 2 is also erased) ~ Data: N\[story\] ~I> (a) erV\[teller\].
(level 3) ~5 : N erV N=N er • er V = V story ls a proper object f~r teller 15 End ~.
Ker~e~ 2: x tell story <I> (a).
Resume 20.
/ Data: x < 2> . (level 2) contlnue~20 The only string beglnning with x among those of i 3 allowed as object of be is I0 Data: x < 27.
(level 3) ~I0: N\[or x\] • N ~x end of I0.
Resume ~20.
Data: ~\[x <2>\] contlnue~0.
= ~ \[x\[humanj ct., slngular\] < 2>\].
Howeverj the verb be with a count-noun subject requires from a noun object an article or an artlcle-replacer.
This lackingj the current branch fails, the branch marked ~ is reopened with #9 onlevel ~.
(Kernel 2 of the fai-~ng branch is erased).
Erase ~+~-~.
Data: N\[story\] erV\[teller\].
(level h) ~ : N erV N = N er = er V= V story is appropriate object for teller.
End ~.
Kernel 2: x tell story < I~'.
Resume I.
Data: x < 2 >.
(levei 3) continue ~i N=x end 1.
Resume 20.
Data: continue ~30 S=S End 30 Prin t output: Data: x continue ~x only one Data: ~I0 : < 2>(a) . (level 2) 20 string beginning by x can interrupt here;it is I0.
CLevel 3) ~\[or x\] N~ X end IO.
Resume 20 Data: fi\[x < 2> (a)\] . (level 2) contlnue~20 fl = fi end 20.
Kernel 3: John pres.
be x ~ 2> (a).
S .--=-(level I) Resume 30.
1. story be good (left modified noun) 2.
x tell story < 1 > \ (x-nomfnalfzatfon: flerV) 3.
John present be x < 2> (a) (identity of extended NtVN) "16 Are there any branches open?
Erase ~ek.
Yes, ~-~ at level ~.
#~ will be tried.
Data: N\[story\] erV\[teller\].
(level 5) • ~5 : N erV N=N er = er V = V ~ is appropriate object of teller end ~.
.Kernel la: x tell story.
Resume 2.
Data: xXl>.
(level~) continue -~ N-x End 2.
Kernel 2a: x ~I~be good.
Resume I.
Data: continue ~i # N----x end I.
Resume 20.
(level 3) Data: x (1,2> (a).
(l.~el 2) continue The on!y string allowed to interrupt here is 10.
Data: x ~1,2~ (a).
(level 3) ~Io: N\[orx\] N=x End 10.
Resume 20.
End 20.
Kernel 3a: John pres.
be X ~It2~ Data: s ~3>.
(level l) continue 30 S~S e-• end 30.
(a). Resume 30.
print output: I.
x tell story (x-nomfnallzation: ~erV) 2.
x ~i> be good (left modifier noun) 3.
John pres.
be x ~1,2> (a) (identity of extended Are there any branches open?
Yes, ~l~ at level ~.
(To abbreviate, we will,just say t~-t--this branch will be very much llke the last one, except that, due to the difference between strings 2 and 3~ it will give the output: 17 1.
xtell story; well (x-nominalication: ~erV; left modified nominal) 2.
John pres.
be x < I> (a) (identity of extended NtVN) The last open branch, marked ~ fails immediately).
. 2.
References 3oshij A.
K., Hi~1D.j "String representation of transformations and a decomposition procedure"~ Part I and Part IIj Transformations and Discourse Analysis Project PaperIUnlverslty of Pennsylvania; Dec.
1965. 3oshi s A.
K.~ "Transformational analysis by computer with some:i appllcation~'j Presented at the National Institute of Health Seminar on Computational Linguistics, Bethesda, Oct.
1966~: (To be published) .


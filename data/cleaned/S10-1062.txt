Proceedings of the 5th International Workshop on Semantic Evaluation, ACL 2010, pages 276–283,
Uppsala, Sweden, 15-16 July 2010. c 2010 Association for Computational Linguistics
TRIPS and TRIOS System for TempEval-2: Extracting Temporal In-
formation from Text 
 
 
Naushad UzZaman 
University of Rochester 
Rochester, NY, USA 
naushad@cs.rochester.edu 
James F. Alen 
University of Rochester 
Rochester, NY, USA 
james@cs.rochester.edu 
 
Abstract 
Extracting temporal information from raw text 
is fundamental for dep language understand-
ing, and key to many aplications like ques-
tion answering, information extraction, and 
document summarization. In this paper, we 
describe two systems we submited to the 
TempEval 2 chalenge, for extracting temporal 
information from raw text. The systes use a 
combination of deep semantic parsing, 
Markov Logic Networks and Conditional 
Random Field clasifiers. Our two submited 
systems, TRIPS and TRIOS, aproached all 
tasks and outperformed al teams in two tasks. 
Furthermore, TRIOS mostly had second-best 
performances in other tasks. TRIOS also out-
performed the other teams that attempted al 
the tasks. Our system is notable in that for 
tasks C – F, they operated on raw text while 
all other systems used taged events and tem-
poral expresions in the corpus as input. 
1 Introduction

The recent emergence of language procesing 
applications like question answering, information 
extraction, and document sumarization has 
drawn atention to the ned for systems that are 
temporally aware. For example, for a QA system 
in newswire domain, if we want to know who 
was the President of Bangladesh in the January 
of 1983, and we only had documents that tel us 
about the President from 1980 to 1985 then a 
temporally aware system will help the QA sys-
tem to infer who was president in the January of 
1983 as well. In medical domain for patient’s 
history record, doctors write all the information 
about patients’ medical record, usually not in 
chronological order. Extracting a temporal struc-
ture of the medical record will help practitioner 
understand the patient’s medical history easily. 
For people who have trouble reading and under-
standing, be it dyslexic people, or people who are 
not native English speakers, a temporal structure 
of document could help them to follow the story 
better. Extracting temporal information will 
benefit in almost any application processing 
natural language text. 
In this paper, we present the first step towards 
our goal of building such temporal structures. 
We particpated in all tasks in TempEval 2, 
which includes work on extracting events, event 
features, temporal expresions, and various tem-
poral relations. 
We first describe our systems. Next, we show 
the performance of our system and compare with 
best performing systems on TempEval-2. Fi-
nally, we describe our future directions. 
2 Our
System Modules 
Our aproach for al the tasks is best described as 
hybrid betwen linguistically motivated solutions 
and machine learning classifiers. We do deep 
semantic parsing and use hand-coded rules to 
extract events, features and temporal expressions 
from the logical forms produced by the parser. In 
parallel, we filter events, extract event features, 
temporal expressions, classify temporal relations 
using machine-learning classifiers. We describe 
these modules briefly here and in the next sec-
tions will describe how these modules are used in 
solving different subtasks. 
2.1 TRIPS
Parser 
We use the existing TRIPS parser (Allen et al, 
2008) to produce deep logical forms from text. 
The system is generic and no gramatical rules 
or lexical entries were added specifically for this 
task. The TRIPS gramar is lexicalized context-
free gramar, augmented with feature structures 
and feature unification. The gramar is moti-
vated from X-bar theory, and draws on principles 
from GPSG (e.g., head and foot features) and 
HPSG. The parser uses a packed-forest chart rep-
resentation and builds constituents botom-up 
using a best-first search strategy similar to A*, 
276
based on rule and lexical weights and the influ-
ences of statistical preprocessing. The search 
terminates when a pre-specified number of span-
ning constituents have been found or a pre-
specified maximum chart size is reached. The 
chart is then searched using a dynamic pro-
graming algorithm to find the least cost se-
quence of logical forms acording to a cost table 
that can be varied by genre. 
The TRIPS system here uses a wide range of 
statistically driven preprocessing, including part 
of speech tagging, constituent bracketing, inter-
pretation of unknown words using WordNet, and 
named-entity recognition (Alen et al, 208). Al 
these are generic of-the-shelf resources that ex-
tend and help guide the deep parsing process. 
The TRIPS LF (logical form) ontology
1
 is de-
signed to be linguistically motivated and domain 
independent. The semantic types and selectional 
restrictions are driven by linguistic considera-
tions rather than requirements from reasoning 
components in the system (Dzikovska et al. 
2003). As much as possible the semantic types in 
the LF ontology are compatible with types found 
in FrameNet (Johnson & Fillmore 2000). Fra-
meNet generaly provides a god level of ab-
straction for applications since the frames are 
derived from corpus examples and can be relia-
bly distinguished by human annotators. However 
TRIPS parser uses a smaller, more general set of 
semantic roles for linking the syntactic and se-
mantic arguments rather than FrameNet's exten-
sive set of specialized frame elements. The LF 
ontology defines approximately 2500 semantic 
types and 30 semantic roles. The TRIPS parser 
wil produce LF representations in terms of this 
linguistically motivated ontology
1
.   
As an example, the result of parsing the sen-
tence, He fought in the war, is expresed as set of 
expressions in an unscoped logical formalism 
with reified events and semantic roles. 
(SPEECHACT V1 SA-TELL :CONTENT V2)  
(F V2 (:* FIGHTING FIGHT) :AGENT V3 :MODS 
(V4)  :TMA ((TENSE PAST)))  
(PRO V3 (:* PERSON HE) :CONTEXT-REL HE)  
(F V4 (:* SITUATED-IN IN) :OF V2 :VAL V5)  
(THE V5 (:* ACTION WAR)) 
The main event (V2) is of ontology type fight-
ing, which is a subclas of intentional-action, 
and which corresponds to the first WordNet 
sense of fight, and includes verbs such as fight, 
defend, contend and struggle. The agent role of 
                                                
1
 TRIPS ontology browser: 
http:/ww.cs.rochester.edu/ 
research/trips/lexicon/browse-ont-lex.html 
this event is the referent of the pronoun he, and 
the event is situated in an event described by the 
word war. For words not in the TRIPS core lexi-
con, the system loks up the WordNet senses and 
maps them to the TRIPS ontology. The word war 
is not in the core lexicon, and via WordNet is 
classified into the TRIPS ontology as the abstract 
type action. 
2.2 Markov
Logic Network (MLN) 
One of the statistical relational learning (SRL) 
frameworks that has recently gained momentum 
as a platform for global learning and inference in 
AI is Markov Logic (Richardson and Domingos, 
2006). arkov logic is a combination of first 
order logic and Markov networks. It can be seen 
as a formalism that extends first-order logic to 
allow formulae to be violated with some penalty. 
For our diferent clasification tasks, we used 
different classifiers based on MLNs. We used an 
off-the-shelf MLN classifier Markov thebeast
2, 
using Cutting Plane Inference (Riedel, 2008) 
with an Integer Linear Programing (ILP) solver 
for inference. 
To use thebeast or any other MLN framework, 
at first we have to write the formulas, which cor-
responds to defining features for other machine 
learning approaches. The Markov network then 
learns the weights for thes formulas from the 
training corpus and uses these weights for infer-
ence in testing phase. 
One easy example wil give a brief idea about 
these weights. To classify the event feature clas, 
we have a formula that captures influence of both 
tense and aspect together. Here are two examples 
that show the learned weights for the forula 
from training data. 
tense(e1, INFINITIVE) & aspect(e1, NONE) => 
class(e1, OCCURRENCE) weight = 0.3199  
tense(e1, PRESPART) & aspect(e1, NONE) => 
class(e1, REPORTING) weight = -0.2681 
The MLN then uses these weights for reason-
ing about the clas. Generaly, larger the weights 
are, the more likely the formula holds. These 
weights could be negative as wel, i.e. the formu-
las are most likely not to hold. 
Finding useful features for MLNs is the same 
as any other ML algorithm. However, the MLN 
framework gives the oportunity to capture the 
relations between different features in first order 
logic, which can lead to better inference. For ex-
ample, when filtering events, we have formula 
combining word and pos, or word and previous 
                                                
2
 http:/code.google.com/p/thebeast/ 
277
word, or pos and next pos, where we can capture 
relationship of two predicates together. Many of 
these predicates (features) could be encoded in 
other classifiers concatenating the features. But 
when the size of relations betwen features in-
creases it complicates maters and we have to 
regenerate the whole classifier data, every time 
we introduce a new relationship. 
3 Event
and Event Feature Extraction 
(Task B) 
Because event extraction from the raw text is a 
prerequisite to everything else we do, we discus 
this capability first. 
3.1 Event
Extraction 
For event extraction, we parse the raw text with 
the TRIPS parser. Then we take the resulting 
Logical Form (LF) and aply around hundred of 
hand-coded extraction patterns to extract events 
and features, by matching semantic patterns of 
phrases. These hand-coded rules are devised by 
checking the parse output in our development 
set. It was 2-3 weks of work to come up with 
most of the extraction rules that extract the 
events. There were minor incremental improve-
ments in rules afterwards. It is worth mentioning, 
these rules are very generic and can be used in a 
new domain without any extra work, because, 
the TRIPS parser and ontology are domain inde-
pendent, and use mappings from WordNet to 
interpret unknown words. Hence, the extraction 
rules wil apply (and can be tested) for any natu-
ral language text without any extra work. 
Because of the ontology, we can usualy 
express general rules that capture a wide range of 
phenomena. Forinsace, alnou-phrases 
describing objects that fall under the TRIPS 
Ontology's top-level type situation-root are
extracted as described events. This situation  is 
captured by the extraction rule: 
((THE ?x (? type SITUATION-ROOT)) 
 -extract-noms> 
(EVENT ?x (? type SITUATION-ROOT)  
 :pos NOUN :class OCCURRENCE )) 
Since war has the type action, which fals 
under situation-root in TRIPS ontology, this 
extraction rule wil match the LF (THE V5 (:* 
ACTION WAR)) and wil extract war as event. 
Beside matching war under situation-root in 
ontology, it also matches the specifier the, which 
indicates that it is a definite noun phrase.  
The result of matching around hundred of such 
rules to the sentence above is: 
<EVENT eid=V2 word=FIGHT 
 pos=VERBAL ont-type=FIGHTING 
 class=OCCURRENCE tense=PAST 
 voice=ACTIVE aspect=NONE 
polarity=POSITIVE  
nf-morph=NONE> 
<RLINK eventInstanceID=V2  
 ref-word=HE 
 ref-ont-type=PERSON  
 relType=AGENT> 
<SLINK signal=IN 
 eventInstanceID=V2 
 subordinatedEventInstance=V5 
 relType=SITUATED-IN> 
<EVENT eid=V5 word=WAR pos=NOUN 
 ont-type=ACTION 
 class=OCCURRENCE 
 voice=ACTIVE 
 polarity=POSITIVE 
 aspect=NONE tense=NONE> 
 
In this way, we extract events and TimeML-
suggested event features (clas, tense, aspect, 
pos, polarity, modality). We also extract a few 
additional features such as ontolgy type (ont-
type). TimeML tries to capture event information 
by very coarse-grained event features clas or 
pos. The ontology type feature captures more 
fine-grained information about the event, but still 
coarse-grained than the words. The extraction 
rules also map our fine-grained types to the 
coarse-grained TimeML event class. We also 
extract relations between events (SLINK), when-
ever one event syntactically dominates the other, 
so it extracts more than TimeML’s SLINKs and 
another new relation, relation betwen event and 
its arguments (RLINK). Details about these new 
additions can be found in UzZaman and Allen 
(2010). 
This system extracts events from the Tem-
pEval-2 corpus with high recall. However, this 
high performance comes with the expense of 
precision. The reasons for lower precison in-
clude, (i) the fact that generic events are not 
coded as events in TempEval, (ii) errors in pars-
ing and, (i) legitimate events found by the 
parser but missed by TempEval annotators. To 
remedy this problem, we introduced a MLN 
based filtering classifier, using the event features 
extracted from the TRIPS parser. The formulas 
in MLN for filtering were derived by linguistic 
intuition and by checking the erors in our devel-
opment set. We devised around 30 formulas. 
There were two goals for this filtering step: (1) 
Eliminating events that result from erors in the 
parse, and (2) Removing event-classes, such as 
generics, that were not coded in TempEval. 
The second goal is neded to perform a 
meaningful evaluation on the TempEval 
challenge. For our long-term goal of using the 
278
For our long-term goal of using the temporal 
summary in natural language understanding task, 
however, we would retain these other events. 
The resulting system, including parsing, extrac-
tion, and post-filtering, is named as TRIOS sys-
tem.  
2.3 Event
Feature Extraction 
The TRIPS parser and extraction rules already 
give us event features along with events, which 
is reported in the results as the TRIPS system. 
To improve performance, we implemented MLN 
classifiers (TRIOS system) for the clas, tense, 
aspect and pos features, using the features gener-
ated from the TRIPS parser plus lexical and syn-
tactical features generated from the text using the 
Stanford POS tager
3
. The TRIOS system re-
ports the polarity and modality performance of 
TRIPS system, i.e. we don’t have any extra clas-
sifiers to classify those features in TRIOS sys-
tem. The Table 1 gives a summary of features 
used to classify these event features. 
 
Event 
feature 
Common fea-
tures 
Extra features 
Pos 
none 
Tense 
pos, polarity, modality, 
voice (active or pas-
sive) 
Aspect 
pos, polarity, modality, 
voice (active or pas-
sive), pos+previous-
pos, pos+next-pos 
Clas 
Event word, 
event pen tag, 
verb pos se-
quence
4, verb 
word sequence, 
previous word 
of verb se-
quence, previ-
ous pos of verb 
sequence, next 
word, next pos 
TRIPS clas sugestion, 
ont-type, 
slink_core_rel
5, 
tense+aspect, pos, stem, 
contains dollar 
Table 1: Atributes/features used for clasifying event 
features pos, tense, aspect and clas 
3 Temporal
Expresion Extraction 
(Task A) 
3.1 Recognizing
Temporal Expresion 
The TRIPS parser extracts temporal expres-
sions the same way as we extract events. The 
                                                
3
 http:/nlp.stanford.edu/software/tagger.shtml 
4
 One Pen tag derived features is verb word sequence, 
which captures al previous verbs, or TO (infinitive), or 
modal verbs, of the event word. That is, it wil capture al 
consecutive verbs before the event until we get non-
verbal word. Similarly verb pos sequence is the pen tag 
sequence of these verbs. 
5
 SLINK captures relation betwen two events, when one 
syntacticaly dominates other. This feature captures the 
relation-type as feature for core events. 
performance of TRIPS parser’s temporal extrac-
tion doesn’t outperform state-of-the-art tech-
niques on the evaluation measures. To improve 
on this, we also use a traditional machine learn-
ing classifier straight from the text. We used a 
token-by-token classification for temporal ex-
pressions represented by B-I-O encoding with a 
set of lexical and syntactic features, using Condi-
tional Random Field (CRF) classifier
6
. CRF is 
widely used for labeling and segmenting se-
quence data. Unlike Hiden Markov Models, 
CRFs are based on exponential models in which 
probabilities are computed based on the values of 
a set of features induced from both the observa-
tion and label sequences. They have ben used in 
POS taging, shalow parsing, named entity rec-
ognition and also for temporal expression extrac-
tion in TERN dataset [Ahn et al. (2005), Hacio-
glu et al. (2005) and Poveda et al. (2007)]. 
We used lexical features like word, shape, is 
year, is date of week, is month, is number, is 
time, is day, is quarter, is punctuation, if belong 
to word-list like init-list
7, folow-list
8, etc. We 
then use CRF+ templates to capture relation 
betwen different features to extract the se-
quence. For example, we will write a template to 
capture the current word is in init-list and the 
next word is in follow-list, this rule wil train the 
model to capture sequences like this wekend, 
earlier morning, several years, etc. 
On the other hand, the TRIPS parser does ex-
tract temporal relations betwen events and tem-
poral expressions, which helps us in the temporal 
relation identification tasks. So we take the tem-
poral expressions from the CRF based extractor 
and for the cases where TRIPS parser extracts 
the temporal expression, we use TRIPS parser id, 
so that we can relate to relations generated by the 
parser.  
The temporal expresions that are suggested 
by CRF based system, are passed to a filtering 
step that tries to extract a normalized value and 
type of the temporal expression. If we can find a 
normalized value and type, we accept the tempo-
                                                
6
 We used of the shelf CRF+ implementation. 
http:/crfp.sourceforge.net/ 
7
 init-list contains words like: this, mid, first, almost, 
last, next, early, recent, earlier, beginning, nearly, few, 
following, several, around, the, les, than, more, no, of, 
each, late. 
8
 folow-list contains words like: century, centuries, day, 
days, era, hour, hours, milisecond, minute, minutes, 
moment, month, months, night, nights, sec, second, time, 
week, weeks, year, years, am, pm, weekend, sumer, fal, 
winter, fiscal, morning, evening, afternoon, noon, EST, 
GMT, PST, CST, ago, half. 
279
ral expressions. We reported this CRF based sys-
tem with filtering as both TRIPS and TRIOS 
systems.  
3.2 Determining
The Normalized Value and 
Type of temporal expression 
Temporal expressions are most useful for later 
processing when a normalized value and type is 
determined. We implemented a rule-based tech-
nique to determine the types and values. We 
match regular expresions to identify the type of 
temporal expressions. Type could be either of 
time, date, duration and set. 
Then in next step we extract the normalized 
value of temporal expression, as suggested by 
TimeML scheme. We take the Document Crea-
tion Time (DCT) and then calculate the values 
for different dates in terms of document creation 
date, e.g. last month, Sunday, today. We wil 
make our type and value extractor and temporal 
expression extractor modules available
9
 for pub-
lic use. 
4 Temporal
Relation Identification 
(Task C – F) 
We identify temporal relations using a Markov 
Logic Network clasifier, namely thebeast, by 
using linguistically motivated features that we 
extracted in previous steps. Our work matches 
closely with the work of Yoshikawa et al. (2009). 
We only consider the local classifiers, but we use 
more linguisticaly motivated features and fea-
tures generated from text, whereas they used 
TempEval-1’s (Verhagen et al., 2007) annota-
tions as input, along with their derived features. 
Other participants in TempEval 2 also used fea-
tures from annotated corpus, making us the only 
group in TempEval-2 to use own-generated enti-
ties (events and temporal expression) and fea-
tures. 
TempEval-2 has four subtasks for identifying 
temporal relations. The tasks are:  
(C) Determine the temporal relation between 
an event and temporal expression in the same 
sentence;  
(D) Determine the temporal relation between 
an event and the document creation time (DCT); 
(E) Determine the temporal relation betwen 
the main events in two adjacent sentences; and  
                                                
9
 Available online at: 
http:/ww.cs.rochester.edu/u/naushad/temporal 
(F) Determine the temporal relation between 
two events, where one event syntactically domi-
nates the other event. 
 
Both TRIPS and TRIOS use the same MLN 
classifier with same feature-set for each task. 
However the diference is, they take events and 
temporal expressions from respective systems, 
e.g. in Task C (temporal relation between events 
and temporal expressions), TRIPS system wil 
classify relations for instances where TRIPS 
event extractor extracted events (in task B) and 
TRIPS temporal expression extractor extracted 
temporal expression (in task A). The recall 
measure of task C wil represent the acuracy of 
extracting events, temporal expression and iden-
tifying temporal relations together. This applies 
for all C – F task and for both RIOS and 
TRIPS systems. 
Tables 2 and 3 show the features we used for 
each of these tasks. We used some features that 
we extracted from TRIPS parser. Related infor-
mation about these concepts can be found in Uz-
Zaman and Allen (2010). 
 
Features Task C Task D 
Event Clas YES YES 
Event Tense YES YES 
Event Aspect YES YES 
Event Polarity YES YES 
Event Stem YES YES 
Event Word YES YES 
Event Constituent
10
  YES 
Event Ont-type 
11
  YES 
Event LexAspect 
12
 x 
Tense 
 YES 
Event Pos YES YES 
Timex Word  YES 
Timex Type YES YES 
Timex Value YES YES 
Timex DCT relation YES YES 
Event to Argument 
conective ont-type
13
 
YES YES 
Event’s argument’s 
ont-type 
YES YES 
TLINK event-time sig-
nal
14
 
YES  
                                                
10
 TRIPS parser identifies the event constituent along 
with event word. 
11
 Ontology-type is described in Event Extraction sub-
section. 
12
 LexicalAspect feature is a subset of feature clas and it 
clasifies the events into Event, State and Reporting 
clas. 
13
 Ontology type of conective that conects the event 
and its argument 
280
Table 2: Features used for TempEval-2 Task C and D 
 
Features Task E Task F 
Event Clas e1 x e2 e1 x e2
15
 
Event Tense e1 x e2 e1 x e2 
Event Aspect e1 x e2 e1 x e2 
Event Polarity e1 x e2 e1 x e2 
Event Stem e1 x e2 e1 x e2 
Event Word YES YES 
Event Constituent e1 x e2 e1 x e2 
Event Ont-type e1 x e2 e1 x e2 
Event LexAspect x 
Tense 
e1 x e2 e1 x e2 
Event Pos e1 x e2 e1 x e2 
SLINK event-event 
relation type
16
 
 e1 x e2 
Table 3: Features used for TempEval-2 Task E and F 
 
5 Results

5.1 Event
and Event Feature Extraction 
(Task B) 
On event extraction, the TRIPS system has the 
highest recall, while the TRIOS system is second 
best in precision with the highest scoring system, 
TIPSem. But overal they do very wel compared 
to our system on event extraction. Performance 
of our both systems and the best performing 
TIPSem system is reported in Table 4. 
 
 Precision Recall Fscore 
TRIPS 0.55 0.88 0.67 
TRIOS 0.80 0.74 0.77 
Best 
(TIPSem) 
0.81 0.86 0.84 
Table 4: Performance of Event Extraction (Task B) 
 
On event feature extraction, our TRIOS sys-
tem, which is based on MLN based classifiers, 
has the best performance on aspect and polarity; 
we also do very wel (second-best performances 
mostly) on tense, class, pos and modality.  
 
Feature TRIPS TRIOS Best 
Clas 0.67 0.77 0.79 (TIPSem) 
                                                                       
14
 TRIPS parser generated event-time TLINK conective 
or signal (similar to TimeML) 
15
 Task E and F is temporal relations betwen events. In 
MLN framework, we can write formula in first-order logic. 
e1 x e2 instances are cases, where we capture both events 
together. For example, in case of Tense, it wil learn the 
weights for temporal relations given first event’s tense is 
PRESENT and second event’s tense is PAST. Instead of 
just considering first event is PRESENT and second 
event is PAST, we are considering first event is PRE-
SENT and second event is PAST together. 
16
 The SLINK relation type that conects two events, 
more at UzZaman and Alen (2010). 
Tense 0.67 0.91 0.92 (Ed.-LTG) 
Aspect 0.97 0.98 0.98 
Pos 0.88 0.96 0.97 (TIPSem, 
Edinburg-LTG) 
Polarity 0.99 0.99 0.98 
Modality 0.95 0.95 0.99 (Ed.-LTG) 
Table 5: Performance of Event Features (Task B) 
5.2 Temporal
Expresion Extraction (Task 
A) 
Both the TRIPS and TRIOS systems use the 
same CRF-based approach for temporal expres-
sion extraction. Our system has the second best 
performance on combined temporal expression 
extraction and normalization task (identifying 
type and value). It is worth mentioning that the 
average of identifying value performance is 0.61 
and if we remove our systems and the best sys-
tem, HeidelTime-1, the average is only 0.56. 
Hence, our frely distributed normalization tool 
could be beneficiary to many people. Perform-
ance of our system and the best system on task A 
is reported in Table 5. 
 
 TRIPS 
TRIOS 
Best (Hei-
delTime-1) 
Precision 0.85 0.90 Timex 
extraction Recal 0.85 0.82 
type 0.94 0.96 Normali-
zation value 0.76 0.85 
Table 5: Performance on Temporal Expresion extrac-
tion (Task A) 
5.3 Temporal
Relation Identification (Task 
C – F) 
For temporal relation identification (Task C – F), 
other teams used events, temporal expressions 
and their features from human-annotated corpus, 
whereas, we used our extracted entities and their 
features that we extracted in Task A and B. So 
our performances represent the capability of 
identifying these relationships from raw text and 
it is also harder classification task, since we are 
starting with imperfect features. 
Even though we are using our own generated 
features, we outperformed other groups in task C 
(temporal relation between event and temporal 
expression) and task E (temporal relation be-
twen main events of consecutive sentences). We 
also have second-best/equivalent performance 
for other two tasks (temporal relation between 
event and DCT; and temporal relation between 
events, where one syntactically dominates other). 
Table 6 reports our systems’ performances 
with precision (P) and recal (R). For others, 
281
since they take annotated events and features, 
they don’t actually have a recall, so their recall is 
not reported. 
Since TRIPS system for these tasks uses 
events (task B) from TRIPS system, which has 
higher recall, it will have higher recall in rela-
tions as well. 
 TRIPS TRIOS Best 
Task P R P R P 
Task 
C 
0.63 0.52 0.65 0.52 0.65 
Task 
D 
0.76 0.69 0.79 0.67 0.82  
(TIPSem) 
Task 
E 
0.58 0.50 0.56 0.42 0.58 
Task 
F 
0.59 0.54 0.6 0.46 0.66  
(NCSU-indi) 
Table 6: Performance on identifying temporal rela-
tions (Task C – F) 
5.4 Overal
Performance 
Many teams chose just to atempt one task be-
twen task A and B, or both, or only attempt 
some of tasks C to F. Only thre teams atempted 
all tasks, our team, TIPSem and 
JU_CSE_TEMP. For tasks C – F, we used our 
generated features, whereas all other teams used 
the features provided in the corpus. 
In this section, we wil show head-to-head 
comparison of the performance of these thre 
systems to se which team handles the overall 
challenge of TempEval-2 better.  Table 6 sum-
marizes our analysis. 
 
Task Description Best 
Task A Temporal expresion 
extraction 
TRIOS 
Task B Event extraction TIPSem 
Task C Event-Timex relation-
ship 
TRIOS 
Task D Event-DCT relationship TIPSem 
Task E Main event-event rela-
tionship 
TRIOS 
Task F Subordinate event-
event relationship 
TRIOS 
 
Table 6: Head-to-head comparison of TRIOS, TIP-
Sem and JU_CSE_TEMP (teams that aproached al 
tasks) in TempEval-2 challenge 
 
Note that JU_CSE_TEMP didn’t perform best 
in any particular task. However, they do a little 
better than us in Task D (TRIOS 0.79, 
JU_CSE_TEMP .80). They also didn’t extract 
temporal expression type and value.  
Both TRIOS and TIPSem teams submitted 
two systems. For this comparison, we pick the 
best system of each team then compare betwen 
them. On temporal expression extraction, we 
have very close extraction scores (TRIOS fscore 
0.85 and TIPSem fscore 0.85). However on 
temporal expression attributes, we are far supe-
rior to TIP-Sem. So overal in Task A, we claim 
we did better. TIPSem clearly did better on the 
event extraction task. 
On the other hand, given that task A and task 
B has many subtasks, if we split them into entity 
extraction and attribute extraction, then we have 
four tasks of extraction and four tasks on relation 
identification. In that case, TIPSem does better 
than us on event extraction, but on event feature 
extraction we have a tie; for temporal expression 
extraction, we have another tie, but we outper-
form in temporal expression attribute extraction. 
6 Future
Work 
Our interest is in constructing a domain-
independent system for temporal information 
extraction. We expect that our system wil per-
form closely to TRIPS system (not the beter 
TRIOS) in new domains, since it uses a domain 
independent semantic parser and domain inde-
pendent extraction rules. On the other hand, the 
TRIOS system is dependent on machine learning 
classifiers, which depends on having a training 
corpus. So in those cases, we plan to explore 
bootstrapping a corpus in the new domain using 
TRIPS, to obtain performance similar to the 
TRIOS system. 
   In parallel to that, we plan to build a system 
that generates reliable tmporal structre of 
documents that can be used in information ex-
traction and language understanding in general. 
We are particularly interested in generating the 
temporal structure of documents in medical ap-
plications, and in applications that would help 
people who have trouble reading and understand-
ing documents. To do that, we plan to represent 
our events, temporal expressions, and temporal 
relations in a reprsntaion like Tiegrph 
(Miler and Schubert, 1990), which is very easy-
to-understand representation for humans and also 
very scalable and efficient solution for temporal 
reasoning. This would also open the dor for ap-
plications that require shisticated temporal 
reasoning. 
Finaly, we plan to use the system to semi-
automatically create a larger temporaly ano-
tated corpus based on TimeML scheme. The sys-
282
tem would produce an initial version that could 
be reviewed by human judges before making it 
public. 
7 Conclusion

We have shown that a hybrid system combining 
domain-independent dep understanding tech-
niques with machine learning can extract signifi-
cant amounts of temporal information from 
documents. Our submitted systems, TRIPS and 
TRIOS for TempEval-2 challenge, approached 
all tasks and outperformed all teams in two tasks 
(out of six) and TRIOS mostly had second-best 
performances in other tasks. TRIOS also outper-
forms the other teams that approached all tasks, 
even though for task C F we operated on fea-
tures automatically computed from raw text 
rather than using the taged events and temporal 
expressions in the corpus.  
 
Acknowledgments 
This work was suported in part by the National 
Science Foundation, grant #0748942, and the 
Office of Naval  Research (N00140510314). 
We thank Mary Swift and Wiliam DeBeaumont 
for help with the TRIPS parser, Benjamin van 
Durme for many useful sugestions ad
Sebestian Reidel for help on using the very 
useful MLN tool TheBeast. We are also very 
thankful to Marc Verhagen and other organizers 
and annotators of TempEval-2 challenge for or-
ganizing a very sucesful event and also for be-
ing very cooperative. Finally, we are thankful to 
the SemEval-2 chairs, Katrin Erk and Carlo 
Straparava for granting us extra pages to de-
scribe our approach to all tasks with two sys-
tems.    
References 
D. Ahn, S.F. Adafre, M. de Rijke, 205. Extracting 
Temporal Information from Open Domain Text: A 
Comparative Exploration, Digital Information 
Management, 2005. 
J. Alen, M. Swift, and W. de Beaumont, 208. Dep 
semantic analysis of text. In Symposium on Seman-
tics in Systems for Text Processing (STEP), 208. 
M. Dzikovska, J. Alen and M. Swift. 203. Integrat-
ing linguistic and domain knowledge for spoken 
dialogue systems in multiple domains. Workshop 
on Knowledge and Reasoning in Practical Dia-
logue Systems, IJCAI, Acapulco. 
K. Hachioglu, Y. Chen and B. Douglas, 205. Auto-
matic Time Expresion Labeling for English and 
Chinese Text. In Procedings of CICLing-2005. 
C. Johnson and C. Filmore. 200. The FrameNet 
tagset for frame-semantic and syntactic coding of 
predicate-argument structure. ANLP-NAACL, Seat-
tle, WA. 
J. Poveda, M. Surdeanu and J. Turmo, 2007. A Com-
parison of Statistical and Rule-Induction Learners 
for Automatic Taging of Time Expresions in 
English. In Procedings of the International Sym-
posium on Temporal Representation and Reason-
ing, 207.  
S.A. Miler and L.K. Schubert, Time Revisited, Com-
putational Inteligence 6(2), 108-118, 1990. 
James Pustejovsky, Jos M. Castao, Robert Ingria, 
Roser Sauri, Robert J. Gaizauskas, Andrea Setzer, 
Graham Katz, and Dragomir R. Radev, 203. 
TimeML: Robust Specification of Event and Tem-
poral Expressions in Text. In Mark T. Maybury, 
editor, New Directions in Question Answering, 
pages 28–34. AAI Pres, 2003. 
Mathew Richardson and Pedro Domingos, 206. 
Markov logic networks. Machine Learning, 206. 
Sebastian Riedel. 208. Improving the acuracy and 
efficiency of map inference for markov logic. In 
Procedings of UAI 208. 
Naushad UzZaman and James Alen, 2010, TRIOS-
TimeBank Corpus: Extended TimeBank corpus 
with help of Deep Understanding of Text, To 
Appear in the Procedings of The seventh interna-
tional conference on Language Resources and 
Evaluation (LREC), Malta, 2010. 
Marc Verhagen, Robert Gaizauskas, Frank Schilder, 
Mark Heple, Graham Katz and James Puste-
jovsky, 207. SemEval-2007 Task 15: TempEval 
Temporal Relation Identification, Proceedings of 
4th International Workshop on Semantic Evalua-
tions (SemEval 207). 
Katsumasa Yoshikawa, Sebastian Riedel, Masayuki 
Asahara and Yuji Matsumoto. 209. Jointly Identi-
fying Temporal Relations with Markov Logic. Pro-
ceedings of the Joint Conference of the 47th An-
nual Meting of the ACL and the 4th International 
Joint Conference on Natural Language Procesing 
of the AFNLP, 2009. 
 
283


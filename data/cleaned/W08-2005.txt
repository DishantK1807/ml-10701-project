Coling 2008: Proceedings of 3rd Textgraphs workshop on Graph-Based Algorithms in Natural Language Processing, pages 33–40
Manchester, August 2008
Graph-based Clustering for Semantic Classication of Onomatopoetic
Words
Kenichi Ichioka
Interdiscipli nary Graduate School of
Medicine and Engineering
University of Yamanashi, Japan
g07mk001@yamanashi.ac.jp
Fumiyo Fukumoto
Interdiscipl inary Graduate School of
Medicine and Engineering
University of Yamanashi, Japan
fukumoto@yamanashi.ac.jp
Abstract
This paper presents a method for seman-
tic classication of onomatopoe tic words
like “uni3072.891uni3085.910uni30FC.660uni3072.891uni3085.910uni30FC.660 (hum)” and “uni304B.852uni3089.914uni3093.924
uni3053.860uni308D.918uni3093.924 (clip clop)” which exist in ev-
ery language, especially Japanese being
rich in onomat opoetic words. We used
a graph-based clustering algorithm called
Newman clustering. The algorithm cal-
culates a simple quality function to test
whether a particular division is meaning -
ful. The quality function is calculated
based on the weights of edges between
nodes. We combin ed two different sim-
ilarity measure s, distributional similarit y,
and orthographic similarity to calculate
weights . The results obtained by using
the Web data showed a 9.0% improvement
over the baseline single distributional sim-
ilarity measure .
1 Introduction
Onomatop oeia which we call onomato poetic word
(ono word) is the formati on of words whose sound
is imitative of the sound of the noise or action des-
ignated, such as ‘hiss’ (McLeod, 1991). It is one
of the linguistic features of Japanese. Consider two
sentences from Japanese.
(1) uni79C1.2226uni306F.888uni5ECA.4051uni4E0B.1340uni306E.887uni30B9.949uni30EA.998uni30C3.959uni30D1.973uni306E.887uni97F3.1339uni3067.880uni8D77.1609uni3053.860uni3055.862uni308C.917uni305F.872uni306E.887uni3067.880uni3001.634
uni3068.881uni3066.879uni3082.907uni7720.3774uni3044.845uni3002.635
“I’m too sleepy because I awoke to the slip-
pers in the hall.”
c©2008. Licensed under the Creative Commons
Attribution-Noncommer cial-Sh are Alike 3.0 Unported li-
cense (http://creati vecommon s.org/licenses/by-nc-sa/3.0/).
Some rights reserved.
(2) uni79C1.2226uni306F.888uni5ECA.4051uni4E0B.1340uni3092.923uni3071.890uni305F.872uni3071.890uni305F.872uni8D70.2808uni308B.916uni30B9.949uni30EA.998uni30C3.959uni30D1.973uni306E.887uni97F3.1339uni3067.880uni8D77.1609
uni3053.860uni3055.862uni308C.917uni305F.872uni306E.887uni3067.880uni3001.634uni3068.881uni3066.879uni3082.907uni7720.3774uni3044.845uni3002.635
“I’m too sleepy because I awoke to the pit-a-
pat of slippers in the hall.”
Sentenc es (1) and (2) are almost the same sense.
However, sentence (2) which includes ono word,
“uni3071.890uni305F.872uni3071.890uni305F.872 (pit-a-pat)” is much better to make
the scene alive, or represents an image clearly.
Therefo re large-scale semantic resource of ono
words is indispensable for not only NLP, but
also many semantic-oriented applications such as
Questio n Answerin g, Paraphras ing, and MT sys-
tems. Although several machine-readable dictio-
naries which are ne-grained and large-scale se-
mantic knowledge like WordNet, COMLEX, and
EDR dictionary exist, there are none or few ono-
matopo etic thesaurus. Because (i) it is easy to un-
derstand its sense of ono word for Japanese, and
(ii) it is a fast-changing linguistic expressions, as
it is a vogue word. Therefor e, considering this re-
source scarcity problem, semantic classication of
ono words which do not appear in the resource but
appear in corpora is very importa nt.
In this paper, we focus on Japanese onomatopo-
etic words, and propose a method for classifying
them into a set with similar meanin g. We used
the Web as a corpus to collect ono words, as they
appear in different genres of dialogues including
broadcast news, novels and comics, rather than a
well-edi ted, balanced corpus like newspaper arti-
cles. The problem using a large, heterogeneous
collection of Web data is that the Web counts are
far more noisy than counts obtained from textual
corpus. We thus used a graph-based clustering al-
gorithm, called Newman clustering for classify-
ing ono words. The algorithm does not simply cal-
culate the number of shortest paths between pairs
of nodes, but instead calculates a quality function
33
of how good a cluster structure found by an algo-
rithm is, and thus makes the computation far more
efcient. The efcacy of the algorithm depends
on a quality function which is calculated by us-
ing the weights of edges between nodes. We com-
bined two different similarity measures, and used
them to calculate weights. One is co-occurrence
based distributional similarity measure . We tested
mutual informa tion (MI) and a χ
2
statistic as a
similarity measure . Another is orthographic sim-
ilarity which is based on a feature of ono words
called “sound symbolism”. Sound symbol ism in-
dicates that phonemes or phonetic sequences ex-
press their senses. As ono words imitate the sounds
associated with the objects or actions they refer to,
their phonetic sequences provide semantic clues
for classication. The empirical results are encour-
aging, and showed a 9.0% improvement over the
baseline single distributio nal similarity measure .
2 Previous
Work
There are quite a lot of work on semant ic classi-
cation of words with corpus-based approach. The
earliest work in this direction are those of (Hindle,
1990), (Lin, 1998), (Dagan et al., 1999), (Chen
and Chen, 2000), (Geffet and Dagan, 2004) and
(Weeds and Weir, 2005). They used distributional
similarity. Similarity measure s based on distribu-
tional hypothesis compar e a pair of weighte d fea-
ture vectors that characterize two words. Features
typically correspond to other words that co-occur
with the characterized word in the same context.
Lin (1998) proposed a word similarity measure
based on the distributio nal pattern of words which
allows to construct a thesaurus using a parsed cor-
pus. He compared the result of automat ically cre-
ated thesaurus with WordNet and Roget, and re-
ported that the result was signicantly closer to
WordNet than Roget Thesaurus was.
Graph representations for word similarity have
also been proposed by several researchers (Jan-
nink and Wiederhold, 1999; Galley and McKeown,
2003; Muller et al., 2006). Sinha and Mihalcea
(2007) proposed a graph-based algorithm for un-
supervised word sense disambiguation which com-
bines several semanti c similarity measures includ-
ing Resnik’s metric (Resnik , 1995), and algorithms
for graph centrality. They reported that the results
using the SENSEVAL-2 and SENSEVAL-3 En-
glish all-words data sets lead to relative error rate
reductions of 5 − 8% as compar ed to the previous
work (Mihalcea, 2005).
In the context of graph-based clustering of
words, Widdows and Dorow (2002) used a graph
model for unsupervised lexical acquisition. The
graph structure is built by linking pairs of words
which participate in particular syntactic relation-
ships. An incremen tal cluster-building algorithm
using the graph structure achieved 82% accuracy at
a lexical acquisition task, evaluated against Word-
Net 10 classes, and each class consists of 20 words.
Matsuo et al. (2006) proposed a method of word
clustering based on a word similarity measure by
Web counts. They used Newman clustering for
clustering algorithm. They evaluated their method
using two sets of word classes. One is derived from
the Web data, and another is from WordNet.
1
Each
set consists of 90 noun words. They reported that
the results obtained by Newman clustering were
better than those obtained by average-link agglom-
erative clustering. Our work is similar to their
method in the use of Newman clustering. How-
ever, they classied Japanese noun words, while
our work is the rst to aim at detecting seman-
tic classication of onomato poetic words. More-
over, they used only a single similarity metric, co-
occurrence based similarity, while Japanese, espe-
cially “kanji” characters of noun words provide se-
mantic clues for classifying words.
3 System
Description
The method consists of three steps: retrieving co-
occurrences using the Web, calculating similarity
between ono words, and classifying ono words by
using Newman clustering.
3.1 Retrieving
Co-occurrence using the Web
One criterion for calculating semantic similarity
between ono words is co-occurrence based similar-
ity. We retrieved frequency of two ono words oc-
curring together by using the Web search engine,
Google. The similarity between them is calcu-
lated based on their co-occurrence frequency. Like
much previous work on semant ic classication of
the lexicons, our assumption is that semantically
similar words appear in similar contexts. A lot
of strategies for searching words are provided in
Google. Of these we focused on two method s:
Boolean search AND and phrase-based search.
1
They used WordNet hypernym information. It consists
of 10 classes. They assigned 90 Japanese noun words to each
class.
34
When we use AND boolean search, i.e., (O
i
O
j
)
where O
i
and O
j
are ono words, we can retrieve
the number of documents which include both O
i
and O
j
. In contrast, phrase-based search, i.e.,
(“O
i
O
j
”) retrieves documents which include two
adjacent words O
i
and O
j
.
3.2 Similarity
Measures
The second step is to calculate semantic similar ity
between ono words. We combined two different
similar ity measur es: the co-occurrence frequency
based similarity and orthographic similarit y mea-
sures.
3.2.1 Co-occurrence based Similarit y
Measure
We focused on two popular measures : the mu-
tual information (MI) and χ
2
statistics.
1. Mutual Informatio n
Church and Hanks (1990) discussed the use
of the mutual information statistics as a way
to identify a variety of interesting linguistic
phenomena, ranging from semanti c relations
of the doctor/nurse type (content word/content
word) to lexico-syntactic co-occurrence prefer-
ences between verbs and prepositions (content
word/function word). Let O
i
and O
j
be ono words
retrieved from the Web. The mutual information
MI(O
i, O
j
) is dened as:
MI(O
i, O
j
) = log
S
all
× f(O
i, O
j
)
S
O
i
× S
O
j, (1)
where S
O
i
=
summationdisplay
k∈O
all
f(O
i, O
k
), (2)
S
all
=
summationdisplay
O
i
∈O
all
S
O
i
. (3)
In Eq. (1), f(O
i, O
j
) refers to the frequency of O
i
and O
j
occurring together, and O
all
is a set of all
ono words retrieved from the Web.
2. χ
2
statistic
The χ
2
(O
i, O
j
) is dened as:
χ
2
(O
i, O
j
) =
f(O
i, O
j
) − E(O
i, O
j
)
E(O
i, O
j
), (4)
where E(O
i, O
j
) = S
O
i
×
S
O
j
S
all
. (5)
S
O
i
and S
all
in Eq. (5) refer to Eq. (2) and (3),
respectively. A major difference between χ
2
and
MI is that the former is a normali zed value.
3.2.2 Orthographic
Similarity Measure
Orthogr aphic similarity has been widely used
in spell checking and speech recognition systems
(Damerau, 1964). Our orthographic similar ity
measure is based on a unit of phonetic sequence.
The key steps of the similarit y between two ono
words is dened as:
1. Convert each ono word into phonetic se-
quences.
The “hiragana” characters of ono word are
converted into phonetic sequences by a
unique rule. Basically, there are 19 conso-
nants and 5 vowels, as listed in Table 1.
Table 1: Japanese consonants and vowels
Conson ant –, N, Q, h, hy, k, ky, m, my, n,
ny, r, ry, s, sy, t, ty, w, y
Vowel a, i, u, e, o
Conside r phonetic sequences “hyu-hyu-” of
ono word “uni3072.891uni3085.910uni30FC.660uni3072.891uni3085.910uni30FC.660” (hum). It is seg-
mented into 4 consonants “hy”, “-”, “hy” and
“-”, and two vowels, “u” and “u”.
2. Form a vector in n-dimens ional space.
Each ono word is represented as a vector
of consonants(vowels), where each dimen-
sion of the vector corresponds to each con-
sonant and vowel, and each value of the di-
mension is frequencies of its corresponding
consonant(vowel).
3. Calculat e orthographic similar ity.
The orthographic similar ity between ono
words, O
i
and O
j
is calculated based on the
consonant and vowel distributio ns. We used
two popular measure s, i.e., the cosine similar-
ity, and α-skew divergence. The cosine mea-
sures the similarity of the two vectors by cal-
culating the cosine of the angle between vec-
tors. α-skew divergence is dened as:
αdiv(x, y) = D(y || α · x + (1 − α) · y),
where D(x||y) refers to Kullback-Leibler
and dened as:
D(x||y) =
n
summationdisplay
i=1
x
i
∗ log
x
i
y
i
. (6)
35
Lee (1999) reported the best results with α
= 0.9. We used the same value. We dened a
similari ty metric by combini ng co-occurrence
based and orthographic similarit y measures
2
:
Sim(O
i, O
j
) =
MI(O
i, O
j
) × (Cos(O
i, O
j
) + 1) (7)
3.3 The
Newman Clustering Algorithm
We classied ono words collected from the WWW.
Therefo re, the clustering algorithm should be ef-
cient and effective even in the very high dimen-
sional spaces. For this purpose, we chose a graph-
based clustering algorithm, called Newman clus-
tering. The Newman clustering is a hierarchical
clustering algorithm which is based on Network
structure (Newman, 2004). The network structure
consists of nodes within which the node-node con-
nections are edges. It produces some division of
the nodes into communiti es, regardless of whether
the network structure has any natural such divi-
sion. Here, “communit y” or “cluster” have in com-
mon that they are groups of densely interconnected
nodes that are only sparsely connected with the rest
of the network. To test whether a particular divi-
sion is meaning ful a quality function Q is dened:
Q =
summationdisplay
i
(e
ii
− a
2
i
)
where e
ij
is the sum of the weight of edges be-
tween two commun ities i and j divided by the sum
of the weight of all edges, and a
i
=
summationtext
j
e
ij, i.e., the
expected fraction of edges within the cluster. Here
are the key steps of that algorithm:
1. Given a set of n ono words S = {O
1, · · ·,
O
n
}. Create a network structure which con-
sists of nodes O
1, · · ·, O
n, and edges. Here,
the weight of an edge betwee n O
i
and O
j
is a similarity value obtained by Eq. (7). If
the “network density” of ono words is smaller
than the parameter θ, we cut the edge. Here,
“network density” refers to a ratio selected
from the topmost edges. For example , if it
2
When we used χ
2
statistic as a co-occurren ce based sim-
ilarity, MI in Eq. (7) is replaced by χ
2
. In a similar way,
Cos(O
i, O
j
) is replaced by max − αdiv(x, y), where max
is the maximum value among all αdiv(x, y) values.
was 0.9, we used the topmost 90% of all
edges and cut the remain s, where edges are
sorted in the descending order of their simi-
larity values.
2. Starting with a state in which each ono word
is the sole member of one of n communi ties,
we repeatedly joined communiti es together in
pairs, choosing at each step the join that re-
sults in the greatest increase.
3. Suppose that two communit ies are merged
into one by a join operation. The change in
Q upon joining two communiti es i and j is
given by:
triangleQ
ij
= e
ij
+ e
ji
− 2a
i
a
j
= 2(e
ij
− a
i
a
j
)
4. Apply step 3. to every pair of communi ties.
5. Join two commun ities such that triangleQ is maxi-
mum and create one communit y. If triangleQ < 0,
go to step 7.
6. Re-calcu late e
ij
and a
i
of the joined commu-
nity, and go to step 3.
7. Words within the same community are re-
garded as semantically similar.
The computational cost of the algorithm is known
as O((m + n)n) or O(n
2
), where m and n are the
number of edges and nodes, respectively.
4 Experimen
ts
4.1 Experimental
Setup
The data for the classication of ono words have
been taken from the Japanese ono dictionary (Ono,
2007) that consisted of 4,500 words. Of these, we
selected 273 words, which occurred at least 5,000
in the docume nt URLs from the WWW. The min-
imum frequency of a word was found to be 5,220,
while the maximum was about 26 million. These
words are classied into 10 classes. Word classes
and examples of ono words from the dictionary are
listed in Table 2.
“Id” denotes id number of each class. “Sense”
refers to each sense of ono word within the same
class, and “Num” is the number of words which
should be assigned to each class. Each word
36
Table 2: Onomatop oetic words and # of words in each class
Id Sense Num Onomatopo etic words
1 laugh 63 uni3042.843uni3063.876uni306F.888uni3063.876uni306F.888 (a,Q,h,a,Q,h,a), uni3042.843uni306F.888uni306F.888 (a,h,a,h,a), uni308F.920uni306F.888uni306F.888 (w,a,h,a,h,a)
uni3042.843uni306F.888uni3042.843uni306F.888 (a,h,a,a,h,a), uni3044.845uni3072.891uni3072.891 (i,h,i,h,i), uni3046.847uni3063.876uni3057.864uni3063.876uni3057.864 (u,Q,s,i,Q,s,i), · · ·
2 cry 34 uni3042.843uni30FC.660uni3093.924 (a,–,N), uni3046.847uni308F.920uni30FC.660uni3093.924 (u,w,a,–,N), uni3042.843uni3093.924uni3042.843uni3093.924 (a,N,a,N), uni3048.849uni3093.924uni3048.849uni3093.924 (e,N,e,N)
uni3046.847uni308B.916uni3046.847uni308B.916 (u,r,u,u,r,u), uni3046.847uni308B.916uni308B.916uni3093.924 (u,r,u,r,u,N), uni3046.847uni308B.916uni3063.876(u,r,u,Q), uni3048.849uni30FC.660uni3093.924 (e,–,N), · · ·
3 pain 34 uni3044.845uni304C.853uni3044.845uni304C.853 (i,k,a,i,k,a), uni3072.891uni308A.915uni3072.891uni308A.915 (h,i,r,i,h,i,r,i), uni304C.853uni3058.865uni304C.853uni3058.865 (k,a,s,i,k,a,s,i)
uni304C.853uni3093.924uni304C.853uni3093.924 (k,a,N,k,a,N), · · ·
4 anger 33 uni304B.852uni30FC.660uni3063.876(k,a,–,Q), uni304B.852uni3061.874uni3093.924 (k,a,t,i,N), uni304B.852uni3064.877uni3093.924 (k,a,t,u,N), uni304B.852uni3063.876(k,a,Q), uni304B.852uni3063.876uni304B.852 (k,a,Q,k,a),
uni304C.853uni307F.904uni304C.853uni307F.904 (k,a,m,i,k,a,m, i), uni304B.852uni308A.915uni304B.852uni308A.915 (k,a,r,i,k,a,r,i), uni304B.852uni3093.924uni304B.852uni3093.924 (k,a,N,k,a,N), · · ·
5 spook 31 uni3042.843uni308F.920uni308F.920 (a,w,a,w,a), uni3046.847uni304E.855uni3083.908uni30FC.660 (u,ky,a,–), uni304C.853uni30FC.660uni3093.924 (k,a,–,N), uni304E.855uni304F.856 (k,i,k,u)
uni304E.855uni304F.856uni3063.876(k,i,k,u,Q), uni304E.855uni304F.856uni308A.915 (k,i,k,u,r,i), uni304E.855uni304F.856uni3093.924 (k,i,k,u,N), · · ·
6 panic 25 uni3042.843uni304F.856uni305B.868uni304F.856 (a,k,u,s,e,k,u), uni3042.843uni305F.872uni3075.894uni305F.872 (a,t,a,h,u,t,a), uni3042.843uni3063.876uni3077.896uni3042.843uni3063.876uni3077.896 (a,Q,h,u,a,Q,h,u),
uni3042.843uni308F.920uni3042.843uni308F.920 (a,w,a,a,w,a)· · ·
7 bloodless 27 uni304B.852uni304F.856uni3063.876(k,a,k,u,Q), uni304C.853uni304F.856uni3063.876(k,a,k,u,Q), uni304C.853uni3063.876uni304B.852uni308A.915 (k,a,Q,k,a,r ,i), uni304C.853uni3063.876uni304F.856uni308A.915 (k,a,Q,k,u,r ,i)
uni304B.852uni304F.856uni3093.924 (k,a,k,u,N), uni304E.855uni3083.908uni3075.894uni3093.924 (ky,a,h,u,N), uni304E.855uni3085.910uni30FC.660 (ky,u,–), · · ·
8 deem 13 uni3046.847uni3063.876uni3068.881uni308A.915 (u,Q,t,o,r,i), uni304D.854uni3085.910uni30FC.660uni3093.924 (ky,u,–,N), uni304D.854uni3085.910uni3093.924 (ky,u,N)
uni3064.877uni304F.856uni3065.878uni304F.856 (t,u,k,u,t,u,k,u), · · ·
9 feel delight 6 uni3046.847uni3057.864uni3046.847uni3057.864 (u,s,i,u,s,i ), uni304D.854uni3083.908uni3074.893uni304D.854uni3083.908uni3074.893 (ky,a,h,i,ky,a,h,i)
uni3046.847uni306F.888uni3046.847uni306F.888 (u,–,h,a,–,u,–,h,a), uni307B.900uni3044.845uni307B.900uni3044.845 (h,o,i,h,o,i), uni308B.916uni3093.924uni308B.916uni3093.924 (r,u,N,r,u,N), · · ·
10 balk 7 uni3044.845uni3058.865uni3044.845uni3058.865 (i,s,i,i,s,i), uni3046.847uni3058.865uni3046.847uni3058.865 (u,s,i,u,s,i), uni304A.851uni305A.867uni304A.851uni305A.867 (o,s,u,o,s,u)
uni3050.857uni3060.873uni3050.857uni3060.873 (k,u,t,a,k,u,t,a), uni3082.907uni3058.865uni3082.907uni3058.865 (m,o,s,i,m,o,s,i), · · ·
Total 273
marked with bracket denotes phonetic sequences
consisting of consonants and vowels.
We retrieved co-occurrences of ono words
shown in Table 2 using the search engine, Google.
We applied Newman clustering to the input words.
For comparison, we implemen ted standard k-
means which is often used as a baseline, as it is
one of the simplest unsupervised clustering algo-
rithms, and compare d the results to those obtained
by our method. We used Euclidean distance (L
2
norm) as a distance metric used in the k-means.
For evaluation of classication, we used
Precisio n(P rec), Recall(Rec), and F-measur e
which is a measure that balances precision and re-
call (Bilenko et al., 2004). The precise denitions
of these measur es are given below:
P rec =
#P airsCorrectlyP redictedInSamecluster
#T otalP airsP redictedInSameCluster
(8)
Rec =
#P airsCorrectlyP redictedInSameCluster
#T otalP airsInSameCluster
(9)
F − measure =
2 × P rec× Rec
(P rec + Rec)
(10)
4.2 Results
The results are shown in Table 3. “Co-occ . &
Sounds ” in Data refers to the results obtained by
our method. “Co-oc c.” denotes the results ob-
tained by a single measur e, co-occurrence based
distributional similarity measure, and “Sound s”
shows the results obtained by orthographic sim-
ilarity. “θ” in Table 3 shows a paramet er θ
used in the Newman clustering.
3
Table 3 shows
best performance of each method against θ val-
ues. The best result was obtained when we used
phrase-based search and a combin ed measure of
co-occurrence(MI) and sounds (cos), and F-score
was 0.451.
4.2.1 AND
vs phrase-based search
Table 3 shows that overall the results using
phrase-based search were better than those of
AND search, and the maximum difference of F-
score betwee n them was 20.6% when we used a
combin ed measure . We note that AND boolean
search did not consider the position of a word in
a document, while our assumpt ion was that se-
mantica lly similar words appeared in similar con-
texts. As a result, two ono words which were
not semant ically similar were often retrieved by
AND boolean search. For example , consider two
antonymous words, “a,h,a,h ,a” (grinning broadly)
and “w,a,–,N” (Wah, Wah). The co-occurrence fre-
quency obtained by AND was 5,640, while that of
phrase-based search was only one. The observa-
tion shows that we nd phrase-based search to be
a good choice.
3
In case of k-means, we used the weights which satises
network density.
37
Table 3: Classication results
Data Algo. Sim (Co-occ.) Sim (Sounds) Search method θ Prec Rec F # of clusters
χ
2
AND .050 .134 .799 .229 10
cos
Phrase .820 .137 .880 .236 10
MI
AND .050 .134 .562 .216 10
k-means
Phrase .150 .190 .618 .289 10
χ
2
AND .680 .134 .801 .229 10
αdiv
Phrase .280 .138 .882 .238 10
MI
AND .040 .134 .602 .219 10
Co-occ. & Sounds
Phrase .140 .181 .677 .285 10
χ
2
AND .170 .182 .380 .246 9
cos
Phrase .100 .322 .288 .304 14
MI
AND .050 .217 .282 .245 13
Newman
Phrase .080 .397 .520 .451 7
χ
2
AND .130 .212 .328 .258 9
αdiv
Phrase .090 .414 .298 .347 17
MI
AND .090 .207 .325 .253 6
Phrase .160 .372 .473 .417 8
χ
2
AND .460 .138 .644 .227 10
k-means –
Phrase .110 .136 .870 .236 10
MI
AND .040 .134 .599 .219 10
Co-occ.
Phrase .150 .191 .588 .286 10
χ
2
AND .700 .169 .415 .240 8
Newman –
Phrase .190 .301 .273 .286 14
MI
AND .590 .159 .537 .245 3
Phrase .140 .275 .527 .361 5
k-means –
cos – .050 .145 .321 .199 10
Sounds
αdiv – .020 .126 .545 .204 10
Newman –
cos – .270 .151 .365 .213 4
αdiv – .350 .138 .408 .206 3
4.2.2 A
single vs combined similarity measure
To examine the effectiveness of the combined
similarity measure, we used a single measur e as
a quality function of the Newman clustering, and
compar ed these results with those obtained by our
method . As shown in Table 3, the results with
combin ing similarity measur es improved overall
performance. In the phrase-based search, for ex-
ample, the F-score using a combine d measur e “Co-
occ(MI) & Sounds( cos)” was 23.8% better than
the baseline single measure “Sounds(cos)”, and
9.0% better a single measure “Co-occ(MI)”.
Figure 1 shows F-score by “Co-occ(MI) &
Sounds (cos)” and “Co-occ (MI)” against changes
in θ. These curves were obtained by phrase-
based search. We can see from Figure 1 that the
F-score by a combined measure “Co-occ(MI) &
Sounds (cos)” was better than “Co-occ (MI)” with
θ value ranged from .001 to .25. One possible rea-
son for the difference of F-score between them is
the edges selected by varying θ. Figure 2 shows
the results obtained by each single measure , and a
combin ed measur e to examine how the edges se-
lected by varying θ affect overall performance, F-
measur e. “Precision” in Figure 2 refers to the ratio
of correct ono word pairs (edges) divided by the to-
tal number of edges. Here, correct ono word pairs
were created by using the Japanese ono dictionary,
i.e., we extracted word pairs within the same sense
of the dictionary. Surprisingly, there were no sig-
nicant difference between a combine d measure
“Co-occ (MI) & Sounds(cos)” and a single mea-
sure “Co-oc c(MI)” curves, while the precision of
a single measur e “Sounds” was constantly worse
than that obtained by a combin ed measure . An-
other possible reason for the difference of F-score
is due to product of MI and Cos in Eq. (7). Fur-
ther work is needed to analyze these results in de-
tail.
4.2.3 k-means vs Newman algorithms
We examined the results obtained by standard k-
means and Newman clustering algorithms. As can
be seen clearly from Table 3, the results with New-
man clustering were better than those of the stan-
dard k-means at all search and similarity measures ,
especially the result obtained by Newman clus-
tering showed a 16.2 % improvement over the k-
means when we used Co-occ.( MI) & Sounds(cos)
& phrase-based search. We recall that we used
273 ono words for clustering. However, Newman
clustering is applicable for a large number of nodes
and edges without decreasing accuracy too much,
as it does not simply calculate the number of short-
38
 0.1
 0.15
 0.2
 0.25
 0.3
 0.35
 0.4
 0.45
 0.5
 0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1
F-measure
Lower bound values
Co-occ(MI)
Co-occ(MI) & Sounds(cos)
Figure 1: F-score against θ values
 0.1
 0.15
 0.2
 0.25
 0.3
 0.35
 0.4
 0.45
 0.5
 0.55
 0.6
 0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1
Precision
Lower bound values
Co-occ(MI)
Co-occ(MI) & Sounds(cos)
Sounds(cos)
Figure 2: Precision against θ values
est paths between pairs of nodes, but instead calcu-
lates a simple quality function. Quantitative eval-
uation by applying the method to larger data from
the Web is worth trying for future work.
4.3 Qualitati
ve Analysis of Errors
Finally, to provide feedback for further devel-
opment of our classication approach, we per-
formed a qualitative analysis of errors. Con-
sider the following clusters (the Newman output
for Co-occ .(MI), Sounds(cos) and phrase-based
search), where each parenthetic sequences denotes
ono word:
A1: (t,o,Q) (t,o,Q,t,o) (t,o,Q,k, i,N,t,o,Q,k ,i,N)
A2: (o,h,o,h,o), (e,h,e,h,e), (h,e,h,e,h,e), (o,-,o,-)
A3: (u,s,i,u,s, i), (m,o,s,i,m,o,s,i), (m,o,s,o,m,o,s,o)
Three main error types were identied:
1. Morpho logical idiosyncrasy: This was
the most frequent error type, exemplied
in A1, where “(t,o,Q,k,i,N,t,o,Q,k,i,N)“
(pain sense) was incorrectly clustered with
other two words (laugh sense) merely be-
cause orthographic similarit y between them
was large, as the phonetics sequences of
“(t,o,Q,k,i,N,t,o,Q,k,i,N)” included “t” and
“o”.
2. Sparse data: Many of the low frequency ono
words performed poorly. In A2, “(o,-,o,-)”
(cry sense) was classied with other three
words (laugh sense) because it occurred few
in our data.
3. Problems of polysemy: In A3,
“(m,o,s,o,m,o,s,o)” (pain sense) was
clustered with other two words (balk sense)
of its gold standard class. However, the ono
word has another sense, balk sense when it
co-occurred with action verbs.
5 Conclusion
We have focused on onomatopoetic words, and
proposed a method for classifying them into a set
of semant ically similar words. We used a graph-
based clustering algorithm, called Newman clus-
tering with a combined different similar ity mea-
sures. The results obtained by using the Web
data showed a 9.0% improvement over the base-
line single distributional similarity measure. There
are number of interesting directions for future re-
search.
The distributional similarit y measure we used
is the basis of the ono words, while other content
words such as verbs and adverbs are also effective
for classifying ono words. In the future, we plan to
investigate the use of these words and work on im-
proving the accuracy of classication. As shown
in Table 2, many of the ono words consist of du-
plicative character sequences such as “h” and “a”
of “a,h,a,h,a”, and “h” and “i” of “i,h,i,h,i” . More-
over, characters which consist of ono words within
the same class match. For example, the hiragana
character “uni306F.888” (h,a) frequently appears in laugh
sense class. These observations indicate that in-
tegrating edit-distance and our current similar ity
measure will improve overall performance.
Another interesting direction is a problem of
polysemy. It clearly supports the classication
of (Ono, 2007) to insist that some ono words
belong to more than one cluster. For example,
“(i,s,o,i,s,o) ” has at least two senses, panic and feel
delight sense. In order to accommodate this, we
39
should apply an appropriate soft clustering tech-
nique (Tishby et al., 1999; Reichardt and Born-
holdt, 2006; Zhang et al., 2007).
Acknowledgment s
We would like to thank the anonymous reviewers
for their helpful suggestions. This material is sup-
ported in part by the Grant-in-aid for the Japan So-
ciety for the Promotion of Science(JSPS).
References
Bilenko, M., S. Basu, and R. J. Mooney. 2004. In-
tegrating Constraints and Metric Learning in Semi-
Supervised Clustering. In Proc. of 21st International
Conference on Machine Learning , pages 81–88.
Chen, K. J. and C. J. Chen. 2000. Automatic Seman-
tic Classication for Chinese Unknown Compound
Nouns. In Proc. of 38th Annual Meeting of the As-
sociation for Computatio nal Linguistics , pages 125–
130.
Church, K. and P. Hunks. 1990. Word Association
Norms, Mutual Information and Lexicography. In In
Proc. of 28th Annual Meeting of the Association for
Computa tional Linguistics. , pages 76–83.
Dagan, I., L. Lee, and F. Pereira. 1999. Similarity-
based Models of Cooccurrence Probabilities. Ma-
chine Learning, 34(1-3):43–69.
Damerau , F. 1964. A Technique for Computer Detec-
tion and Correction of Spelling Errors. Communica -
tions of the ACM, 7:171–176.
Galley, M. and K. McKeown. 2003. Improving Word
Sense Disambigu ation in Lexical Chaining . In Proc.
of 19th International Joint Conference on Articial
Intelligence, pages 1486–1488.
Geffet, M. and I. Dagan. 2004. Feature Vector Quality
and Distributional Similarity. In Proc. of 20th Inter-
national Conference on Computa tional Linguistics ,
pages 247–253.
Hindle, D. 1990. Noun Classication from Predicate-
argument Structures. In Proc. of 28th Annual Meet-
ing of the Association for Computational Linguistics ,
pages 268–275.
Jannink, J. and G. Wiederhold. 1999. Thesaurus Entry
Extractio n from an On-line Dictionary. In Proc. of
Fusion’99.
Lee, L. 1999. Measures of Distributional Similarity. In
Proc. of the 37th Annual Meeting of the Association
for Computational Linguistics, pages 25–32.
Lin, D. 1998. Automatic Retrieval and Clustering
of Similar Words. In Proc. of 36th Annual Meet-
ing of the Association for Computa tional Linguis-
tics and 17th Internatio nal Conference on Compu-
tational Linguistics , pages 768–773.
Matsuo, Y., T. Sakaki, K. Uchiyam a, and M. Ishizuka.
2006. Graph-based Word Clustering using a Web
Search Engine. In Proc. of 2006 Conference on
Empirical Methods in Natural Language Processing
(EMNLP200 6), pages 542–550.
McLeod, W. T. 1991. The COLLINS Dictiona ry and
Thesauru s. HarperCollin sPublishers.
Mihalcea, R. 2005. Unsuperv ised Large Vocabulary
Word Sense Disambigua tion with Graph-based Al-
gorithms for Sequence Data Labeling. In Proc. of the
Human Language Technology / Empirical Methods
in Natural Language PRocessing Conference, pages
411–418.
Muller, P., N. Hathout, and B. Gaume. 2006. Synonym
Extraction Using a Semantic Distance on a Dictio-
nary. In Proc. of the Workshop on TextGraphs, pages
65–72.
Newman, M. E. J. 2004. Fast algorithm for detecting
community structure in networks. In Physics Review
E, (69, 066133).
Ono, M. 2007. Nihongo Omomato pe Jiten (in
Japanese). Shougakukan.
Reichardt, J. and S. Bornholdt. 2006. Statistical Me-
chanics of Community Detection . PHYICAL RE-
VIEW E, (74):1–14.
Resnik, P. 1995. Using Information Content to Eval-
uate Semantic Similarity in a Taxonomy. In Proc.
of 14th International Joint Conference on Articial
Intelligence, pages 448–453.
Sinha, R. and R. Mihalcea. 2007. Unsupervised
Graph-based Word Sense Disambigu ation Using
Measures of Word Semantic Similarity. In Proc.
of the IEEE International Conference on Semantic
Computin g, pages 46–54.
Tishby, N., F. C. Pereira, and W. Bialek. 1999. The In-
formation Bottleneck Method. In Proc. of 37th An-
nual Allerton Conference on Communica tion Con-
trol and Computing , pages 368–377.
Weeds, J. and D. Weir. 2005. Co-occurrence Retrieval:
A Flexible Framework for Lexical Distributional
Similarity. Computatio nal Linguistics , 31(4):439–
476.
Widdows, D. and B. Dorow. 2002. A Graph Model for
Unsupervised Lexical Acquisition . In Proc. of 19th
International conference on Computa tional Linguis-
tics (COLING200 2), pages 1093–1099.
Zhang, S., R. S. Wang, and X. S. Zhang. 2007. Iden-
tication of Overlapping Community Structure in
Complex Networks using Fuzzy C-means Cluster-
ing. PHYSICA A, (374):483–490.
40


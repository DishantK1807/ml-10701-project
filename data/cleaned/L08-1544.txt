<algorithm name="ParsCit" version="080917">
<citationList>
<citation valid="true">
<authors>
<author>S Bird</author>
</authors>
<title>NLTK: The Natural Language Toolkit</title>
<date>2006</date>
<booktitle>In Demonstration Session, 45th Annual Meeting of the ACL</booktitle>
<location>Sydney, Australia</location>
<contexts>
<context> brief system notes. We end with a discussion and some concluding thoughts in Section 10. 2. UIMA Configurable Annotators Frameworks like UIMA (Ferrucci &amp; Lally, 2004), GATE (Cunningham, 2002), NLTK (Bird, 2006) facilitate a decomposition of the analysis process into individual components, each of which is responsible for a certain aspect of the analysis (Cunningham &amp; Scott, 2004). Broadly speaking, analysi</context>
</contexts>
<marker>Bird, 2006</marker>
<rawString>Bird, S. (2006). NLTK: The Natural Language Toolkit. In Demonstration Session, 45th Annual Meeting of the ACL, Sydney, Australia.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Boguraev</author>
<author>M Neff</author>
</authors>
<title>An annotation-based finite state system for UIMA: User Documentation and Grammar Writing Manual</title>
<date>2007</date>
<journal>IBM T. J. Watson Research</journal>
<location>Center, Yorktown Heights, New York</location>
<contexts>
<context>Dictionary CAT which enables the graphical development of concepts that can be defined by listing terms that represent instances of the concept. 2) An Annotation-Based Finite State Transducer (AFST) (Boguraev &amp; Neff, 2007 and 2008) CAT provides the ability to graphically create models that consist of patterns that consider upstream annotations as well as other features of the text. 3) An AFST Cascade Editor CAT that a</context>
</contexts>
<marker>Boguraev, Neff, 2007</marker>
<rawString>Boguraev, B., Neff, M. (2007). An annotation-based finite state system for UIMA: User Documentation and Grammar Writing Manual, IBM T. J. Watson Research Center, Yorktown Heights, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Boguraev</author>
<author>M Neff</author>
</authors>
<title>Navigating through Dense Annotation Spaces</title>
<date>2002</date>
<booktitle>In Proceedings of the Sixth International Conference on Language Resources and Evaluation LREC</booktitle>
<location>Marrakech, Morocco</location>
<marker>Boguraev, Neff, 2002</marker>
<rawString>Boguraev, B., Neff, M. (2002). Navigating through Dense Annotation Spaces. In Proceedings of the Sixth International Conference on Language Resources and Evaluation LREC, Marrakech, Morocco.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Cunningham</author>
</authors>
<title>GATE, a general architecture for language engineering</title>
<date>2002</date>
<journal>Computers and the Humanities</journal>
<volume>36</volume>
<pages>223--254</pages>
<contexts>
<context>xpert. Section 9 provides brief system notes. We end with a discussion and some concluding thoughts in Section 10. 2. UIMA Configurable Annotators Frameworks like UIMA (Ferrucci &amp; Lally, 2004), GATE (Cunningham, 2002), NLTK (Bird, 2006) facilitate a decomposition of the analysis process into individual components, each of which is responsible for a certain aspect of the analysis (Cunningham &amp; Scott, 2004). Broadl</context>
</contexts>
<marker>Cunningham, 2002</marker>
<rawString>Cunningham, H. (2002). GATE, a general architecture for language engineering. Computers and the Humanities, 36, pp. 223--254.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Cunningham</author>
<author>D Scott</author>
</authors>
<title>Software architectures for language engineering</title>
<date>2004</date>
<journal>Special Issue, Natural Language Engineering</journal>
<volume>10</volume>
<contexts>
<context>ly, 2004), GATE (Cunningham, 2002), NLTK (Bird, 2006) facilitate a decomposition of the analysis process into individual components, each of which is responsible for a certain aspect of the analysis (Cunningham &amp; Scott, 2004). Broadly speaking, analysis components (also referred to as annotators or analysis engines) find and annotate a number of concept instances: domain or application specific named entities, their prop</context>
</contexts>
<marker>Cunningham, Scott, 2004</marker>
<rawString>Cunningham, H., Scott, D. (2004). Software architectures for language engineering. Special Issue, Natural Language Engineering, 10(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Dale</author>
</authors>
<title>Industry watch</title>
<date>2005</date>
<journal>Natural Language Engineering</journal>
<volume>11</volume>
<pages>435--439</pages>
<contexts>
<context>oses of defining, configuring and running technology-agnostic multi-component NLP annotators over text, speech and other multi-media. UIMA has been gaining broad acceptance both in industry contexts (Dale, 2005) and in academic communities (see the UIMA Component Repository at CMU2; recently, it has become widely available as an Apache Open Source Incubator project3, and is currently the subject of an Open </context>
</contexts>
<marker>Dale, 2005</marker>
<rawString>Dale, R. (2005). Industry watch. Natural Language Engineering 11, pp. 435--439.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Ferrucci</author>
<author>A Lally</author>
</authors>
<title>UIMA: an architectural approach to unstructured information processing in the corporate research environment</title>
<date>2004</date>
<journal>Natural Language Engineering</journal>
<booktitle>Special Issue on Software</booktitle>
<volume>10</volume>
<contexts>
<context>ractitioner who is not an NLP expert. Section 9 provides brief system notes. We end with a discussion and some concluding thoughts in Section 10. 2. UIMA Configurable Annotators Frameworks like UIMA (Ferrucci &amp; Lally, 2004), GATE (Cunningham, 2002), NLTK (Bird, 2006) facilitate a decomposition of the analysis process into individual components, each of which is responsible for a certain aspect of the analysis (Cunningh</context>
<context> a useful one, for the purpose of insulating domain experts from run-time details, and enabling them, and us, to focus on model elicitation and formulation. Our runtime framework is provided by UIMA (Ferrucci &amp; Lally, 2004), the Unstructured Information Management 1 There may, and likely will, be multiple models for a single concept. Architecture, which defines mechanisms and interfaces for the purposes of defining, co</context>
</contexts>
<marker>Ferrucci, Lally, 2004</marker>
<rawString>Ferrucci, D., Lally, A. (2004). UIMA: an architectural approach to unstructured information processing in the corporate research environment. Natural Language Engineering, 10, Special Issue on Software .</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Moore</author>
</authors>
<title>Diving into Data, InfoWorld</title>
<date>2002</date>
<contexts>
<context>formation they need. This information comes not only from traditional structured sources, but extends to a broad range of unstructured information (email, web content, etc.) which comprises over 80% (Moore, 2002) of all information available. Information analysis and extraction of this unstructured information from large multi-media data repositories (text, speech, video, etc.) are critical to Information Ma</context>
</contexts>
<marker>Moore, 2002</marker>
<rawString>Moore, C. (2002). Diving into Data, InfoWorld, October 25.</rawString>
</citation>
</citationList>
</algorithm>


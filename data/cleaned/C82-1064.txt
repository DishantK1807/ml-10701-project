COLING 82, Z Horeck)~ (ed.
\] Nor~-Holland Pub~hing Company © Academ~ 1982 UTILISATION DO PARALLELISME EN TRADUCTION AUTOMATISEE PAR ORDINATEUR J.
Nelson VERASTEGUI C.
Institut National Polytechnique de Grenoble Groupe d'Etudes pour la Traductien Automatique B.P. 53 38041 Grenoble C~dex FRANCE On pr~sente un syst6me de transformation de structures arborescentes adapt~ au traitement parall~le.
Les structures de donn~es, appel~es mat, permettent une manipulation aisle des ambiguTt~s et des choix structuraux.
Les r6gles et grammaires du syst6me, appel6 STAR-PALE, ~euvent exprimer un certain nombre d'options de contr61e, de reconnaissance et de transformation.
On donne les id6es de base pour l'impl~mentation de ce type de syst~mes.
INTRODUCTION Le parall~lisme pr~sente un grand int~r~t en informatique : c'est un moyen d'augmenter la puissance des syst~mes de calcul en faisant le maximum de travail possible simultan~ment ou d'une fagon concurrente.
L'utilisation extensive des sys~mes informatiques qui n'exploitent pas cette possibilit~ a 6t~ un grand obstacle au d6veloppement de programmes parall~les darts tousles domaines d'application.
Beau¢oup de calculs poss~dent un haut degr~ de parall~lisme qui n'est pas exploit~ dans les architectures des ordinateurs classiques et les utilisateurs de ces syst6mes ne peuvent pas voir les effets du parall~lisme sur la solution de leurs probl~mes.
Dans le passe, le parall~lisme a ~t~ principalement utilis6 au niveau des syst~mes d'e×ploitation, afin de profiter des v~ritables architectures de multitraitement ou bien pour simuler ce concept sur des machines classiques.
On peut esp~rer que les meilleurs candidats au parall~lisme sent les processus qui consomment beaucoup de temps ou qui sent tr~s complexes.
Par consequent, les domaines de la traduction automatique, de la reconnaissance de la parole ou des formes et l'analyse de sc~nes visuelles sent des candidats imm~diats ~ l'application de m~thodes parall~les (I).
Dans cet article, je donne les principaux r~sultats d'une ~tude sur l'utilisation du parall~lisme en traduction automatis~e par ordinateur (T.A.O.
par opposition traduction automatique) et qui ont 6t6 pr~sent~s int~gralement dans une th~se de Docteur-lng~nieur en Informatique ~ l'Institut National Polytechnique de Grenoble (2).
Dans ce domaine, on peut appliquer le parall~lisme de diff~rentes fa~ons et ~ des niveaux divers.
II y ale cas tr~s simple de la division d'un texte ~ traduire en un certain hombre de sous-textes ou paragraphes, qui peuvent ~tre traduits ind~pendamment les uns des autres.
II y a aussi le cas de ROBRA, qui r~alise des transformations d'arborescences en parall~le.
On pourrait ajouter encore d'autres exemples, comme la simultan~t~ possible des diff~rentes phases de traduction, comme l'analyse morphologique en parall~le avec l'analyse structurale, ou la g~n~ration morphologique en parall~le avec la g~n~ration syntaxique.
Ceci n'a jamais 6t~ r~alis~e dans un syst~me de traduction automatis~e par ordinateur, mais seulement dans certains compilateurs munis de coroutines (3).
II existe certainement des probl6mes de temps de r~ponse de chacune de ces ~tapes, qui emp~chent une 397 398 J.N.
VERASTEGUI-CARVAJAL r~duction pratique des temps de traduction.
La consultation des dictionnaires pourrait ~tre am~lior~e par une recherche simultan~e de plusieurs cha~nes, qui ne sont pas des prefixes ni des suffixes les unes des autres, car une organisation particuli~re des dictionnaires pourrait donner directement tousles prefixes d'une cha~ne sans recourir au parall61isme.
Le type de parall~lisme qui nous int~resse en particulier est l'application simultan~e de r~gles de r~criture.
Par exemple, les r~gles R1 et R2 appliqu~es ~ la m.a.t. 0 figure la.
On pourrait dire qu'il suffit de d~finir une seule r~gle partir des deux qui veulent s'appliquer en parall~le, par exemple R3:A(B~C))== A(C,C), et continuer ~ travailler de mani~re s~quentielle, mais l'ensemble de r~gles serait trop grand pour consid~rer toutes les possibilit~s.
D'autre part, il y a des cas off l'application parall~le n'a pas le m~me effet que l'application s~quentielle, par exemple si R2 s'applique avant Rlo Nous avons voulu faire une approche vers un syst~me de traduction automatis~e de ce type sur la base d'une application extensive du parall~lisme.
II s'agit en effet d'une extension de ROBRA, un des quatre langages specialists pour la programmation linguistique du logiciel de base du laboratoire GETA (4, 5).
R1 : A == A ; R2 : B == C 0 : A I A I I B BB C B I C ~RI IIR2 0 -R1----~ A -R2----~ A A B/~ C C II C C (a) (c) (d) BAc G/XH A D E F (f) (g) I A B~C D E F (b) (e) r.
A r.~ B .o / 4 .~ ).
(h) FIGURE 1 PARALLELISME EN TRADUCTION AUTOMATISEE 399 Le syst~me propos~ est une extension dans deux sens : il permet un contr61e et un pouvoir d'expression plus d~taill~ et d'autre part il permet la r~alisation de beaucoup plus de travaux en p~rall~le grace ~ la suppression d'un certain nombre de restrictions.
Dans une premiere partie, on d~finit le type de structures manipul~es par le syst~me.
Dans une deuxi~me partie, nous pr~sentons les r~gles et grammaires du syst~me pour la manipulation de ces structures.
Dans une troisi~me partie, on montre une m~thode d'impl~mentation pour le syst~me STAR-PALE (Syst~me de Transformation d'ARborescences en PAralI~LE).
STRUCTURES A TRANSFORMER L'id~e est de d~finir une structure de donn6es qui soit, en un certain sens, paral161e.
Etant donn~ que la structure d'arbre appara~t dans de nombreux syst~mes de representation m~talinguistique (arbres syntagmatiques, arbres de d~pendance, arbres applicationnels, arbres projectifs ....
), ainsi que presque partout en informatique, en particulier dans les langages de programmation, et en alg~bre, nous avons cherch6 une structure pour la manipulation d'arbres qui permette de factoriser une multiplicit~ de r~sultats arborescents.
Nous d6finissons plusieurs fonctions et propriQt~s sur cette classe d'objets qui peuvent ~tre utiles dans le processus de transformation.
Les multi-arborescences A tranches (m.a.t).
sont des structures arborescentes qui repr~sentent des familles d'arborescences qui ont ~t~ "factoris~es" d'une certaine fa~on et qui s'adaptent naturellement ~ la manipulation d'ambigu~t~s.
Dans le cas !e plus simple, on ales arborescences classiques orient~es telles qu'a la figure Ib que l'on appelle A une tranche.
S'il y a plus d'une tranche, il s'agit d'arborescences du type pr6c~dent, mais qui portent au moins une feuille rattach~e ~ une deuxi6me tranche.
Ces feuilles peuvent ~tre de trois types : ensemble, liste ou piste.
Si c'est un ensemble, on trouvera dans une deuxi~me tranche un ensemble d'au moins deux multi-arborescences, qui seront affect~es ~ cette feuille sans ordre sp~cifique.
Les multi-arborescences de type ensemble permettent d'exprimer d'une fa~on condens~e un ensemble de choix possibles, par exemple Ic et d (elles sont 6quivalentes).
Ceci est int~ressant pour le traitement des ambiguTt~s ou pour l'application des analyseurs "context-free" ~ programmation dynamique (6).
Si c'est une liste, on aura une s~quence non vide et ordonn~e de multi-arborescences.
Les listes sont une mani~re commode de manipuler un sous-ensemble de fils d'un noeud.
Par exemple figure le et f (elles sont ~quivalentes).
Si c'est une piste, on aura une s~quence non vide et ordonn~e de multi-arborescences avec un ~16ment distingu~ appel~ trace, qui permet de mettre en relief un chemin dans la m.a.t.
Par exemple, le chemin marqu~ par les doubles traits sur l'arborescence de la figure Ig est repr~sent~ dans la figure lh.
Ce type de structure peut ~tre int~ressant pour llutilisation de grammaires projectives.
On accepte des multi-arborescences a plusieurs tranches mais avec un hombre fini de noeuds, et par cons6quent un nombre fini de tranches.
II n'y a pas de retour arri~re entre les diff~rentes liaisons inter-tranches de sorte que les boucles sont interdites.
Voir un exemple plus complexe d'une m.a.t.
A 5 tranches dans la figure 2a.
Chaque noeud feuille qui ne fait pas de r~f~rence ~ d'autres tranches porte une d~coration.
C'est-~-dire, une structure de donn~es g~n~rale qui peut 6ire compl~tement manipul~e et d~finie par l'utilisateur.
Dans les exemples donn~s, les lettres A, B, C, etc.
sont les d~corations affect~es aux noeud.
400 J.N.
VERASTEGUI-CARVAJAL Nous avons d~finit une s~rie d'op~rateurs sur les m.a.t, qui permettent de connaitre, entre autres, le type du noeud, son contenu, le nombre d'arbres ou de noeuds rattach6s directement ou indirectement a un noeud donn~, le nombre de fils apparents ou v~ritables d'un noeud, le niveau d'un noeud ou distance ~ la racine de la m.a.t, et la tranche ~ laquelle appartient un noeud.
Nous avons d~finit des relations d'~quivalence et d'ordre entre m.a.t, et deux op~rateurs (~clatement et factorisation) tr6s utiles qui permettent de tester si deux m.a.t, sont ~quivalentes.
II y a aussi une s~rie d'op~rateurs pour l'extraction de sous-m.a.t, d'une m.a.t. donn~e qui permettent de trouver, par exemple, un noeud ou un chemin d'une m.a.t.
REGLES ET GRAMMAIRES Une grammaire consiste en un ensemble de r~gles de r~criture muni d'une relation d'ordre partiel, qui s'appliquent sur une structure ~ transformer.
Dans notre cas, il s'agit d'une multi-arborescence a tranches (m.a.t.).
Les r~gles ont un haut degr~ implicite de parall~iisme dans la phase de reconnaissance ainsi que dans la phase de transformation.
L'expression de l'ordre relatif entre noeuds fr~res est raffin~e pour permettre un contr61e des choix de patrons et d'images dans les r6gles.
En effet, nous avons ~tudi~ des expressions d'ordre pour des ensembles de permutations d'~l~ments d'un ensemble donn~ et nous avons d~fini plusieurs op~rateurs qui r6sument bien les diff~rentes possibilit~s.
A ! .-IN,,I 1 ..... ...,," i A 'A ........
B I P Q ~ ',S "S I G a I b I C I e h I i R01:(÷,#) (a) R02: (+,+) 0 I 1 I 2 I 3 dec(6)='g' 6//~'4 1 5 R~gles : (1<2) 0 1/~2 == I I 3 4 dec(4)='g' 0 I 2 A 4 3 5 I 0 I 2 I 3 A 6< I dec(6) :=dec(4) 1 (b) FIGURE 2 PARALLI~L1SME EN TRADUCTION AUTOMATISI~E 401 Soit + l'op~rateur bool~en "ou", a~b l'ordre tel que a est avant bet aucun autre ~l~ment se trouve entre a et.b, a<b l'ordre tel que a est avant bet au moins un autre ~l~ment se trouve entre a et b.
Voici quelques expressions et leur 6quivafence en terme d'autres op~rateurs : (a ~ b) ~ (a • b + a < b) (a ~b) z (a • b + b < a) (a ~ b) ~ c ~ (a ~ b + b ~ a) ~ c z a ~ b ~ c + c ~ a ~ b + b ~ a ~ c + c m b ~ a (a #b) ~ c ~ (a < b + b < a) ~ c z a < b ~ c + c < a < b + b < a m c + c < b < a (a < b) ; (c < d) z a < b ~ c < d + c < d ~ a < b + a< b<c<d+c<d<a < b (a < b) II (c < d) ~ a < b~c < d + a <c <b <d +a<c<d~b+c<a<b<d +c<a~d<b+c<d~a< b Nous d~finissons plus pr~cis~ment le contexte d'une r~gle pour maximiser le parall~lisme et ~liminer le risque de destruction de la structure arborescente sur laquelle on travaille.
Ce contexte, qui peut ~tre d~termin~ de mani~re statique par le compilateur, n'est pas une nouvelle source de descriptions d~taill~es 6crites par l'utilisateur mais une convention naturelle.
D'autre part, l'utilisateur dispose d'un contr61e sur le parall~lisme par l'expression d'un ordre de priorit6s sur l'application des r~gles et grammaires.
Une r~gle comporte une partie gauche, dite "de reconnaissance", et une partie droite, dite "de transformation".
Dans la partie gauche, on trouve un sch6ma et un pr~dicat sur les valeurs des d~corations associ~es aux noeuds de la m.a~.t.
La par ~ ~te est constitute d'une m.a.t, ima__~et des modifications des d~corations port~es par les noeuds de la m.a~tTTmage.
~our tout noeud de l~m.a.t, objet, chaque r~gle d6finit une ~num~ration canonique des occurrences possibles de cette r~gle, enracin~es sur ce noeud, ce qui donne une priorit~ de ces occurrences entre elles : soit priorit~ vers la gauche ou vers la droite, ou vers le haut ou vers le bassi elles partent du m~me niveau ou pas.
Un schema est un ensemble de "points" en forme de structure arborescente qui d~finit~onditions g~om~triques ou structurales demand~es aux sous-ensembles de noeuds d'une m.a.t, objet.
Un sous-ensemble ainsi choisi, est li~ ~ l'ensemble de points du schema de sorte que a chaque point corresponde un ou plusieurs noeuds de la m.a.t.
Chaque sch6ma peut comporter des sous-sch~mas de diff~rents types parmi lesquels, les schemas verticaux et horizontaux qui servent ~ rep~rer des chemins et des listes d'une m.a.t.
Une occurrence d'une r~gle est un ensemble de noeuds d'une m.a.t, qui V~rifie le sch~pr~dicat de la r~gle.
Un schema est divis~ en deux parties : une passive et une autre active.
Un point est actif si l'un~ au moins des conditions suivantes est r~alis~e : il n'appara~t pas dans l'image ; il change de p~re ou de liste ; sa d~coration est modifi~e ; l'ordre de ses fils ou ~l~ments est modifi~ ; il porte un nouveau fils ou ~16ment dans l'image ; il perd un de ses fils ou ~l~ments.
Les points correspondant a des schemas verticaux ou horizontaux sont tous actifs si leurs noms n'apparaissent pas dans l'image.
Tousles points modifies par des op~rateurs dans l'image sont actif.
Un point qui n'est pas actif est passif.
L'ensemble des points passifs--d-r~nschama est appel~ le contexte.
On ~onc que, l~contexte peut ~tre non connexe (au contraire de ROBRAT~il peut atre d~termin~ statiquement.
Dans la figure 2b, on a une m.a.t, compos~ de neuf noeuds, chacun avec une variable simple comme d~coration associ~e, et deux r~gles a appliquer en paral1~le.
La r~gle 1 est plus prioritaire que la r~gle 2.
S'il y a plusieurs occurrences de la r6gle I qui s'intersectent sur un m~me noeud qui est actif pour les deux, on prend 402 J.N.
VERASTEGUI-CARVAJAL la plus ~ gauche (÷) et la plus haute (~), et si c'~st la r~gle 2 on prend la plus droite (÷) et la plus basse (+).
La r~gle 1 contient 3 points actifs (1,2,3) et 2 points passifs (0,4), on demande que la valeur du point 4 soit "g", et on veut que les noeuds 4 et 3 soient adjacents dans l'image.
La r~gle 2 contient 6 points actifs (0,1,2,4,5,6) et i point passif (3), on demande que les points 6 et 4 soient adjacents et que la valeur du point 6 soit "g", et on veut que la valeur du noeud 6 soit ~gale A celle du noeud 4 dans l'image.
Comme on peut le v0ir dans la figure 2b, ces deux r~gles sont applicables en parall61e sur les noeud 3 et 1 de l'arborescence, mais si on les applique darts un ordre s6quentiel, seulement une des deux pourra 6tre utilis~e.
Une grammaire est compos~e d'un ensemble de r6gles, muni d'une relation d'ordre partiel, et d'un ensemble d'options de contr61e.
La relation d'ordre donne une priorit~ d'application aux r~gles en cas de conflit hors des contextes, et les options indiquent la faGon dont ces r~gles seront utilis~es dans le processus de transformation d'une m.a.t.
La composition de grammaires permet de cr6er des sy__sst~mes transformationnels (ST), c'est-~-dire un ensemble de grammaires structur~ en r~seau ou graphe orient~ et ordonn~ qui porte des conditions de parcours sur les arcs et des conditions d'application d'une grammaire sur les noeuds.
Le syst~me prend un ST et une m.a.t. 0 et donne comme r~su!tat la m.a.t, produite par l'application du ST sur 0o Ceci ~st r~alis~ par unc s~quence d'applications des grammaires du ST .sur les transformations successives de 0.
Les options de contr61e sur les grammaires et les r~seaux essayent entre autres de rendre le syst6me d~cidable.
Le syst~me transformationnel le plus simple est cempos6 d'une seule grammaire avec un pr~dicat toujours vrai comme condition de parcours.
Soit G une grammaire compos~e des r~gles R1, R2 .....
Rm et soit 0 une m.a.t, que l'on veut transformer par G.
Chacune des m r~gles d~finit une conjecture locale sur 0 que l'on note CLi pour i E (1,m) compos~e des occurrences de la r~gle i dans 0.
Si aucune des r6gles n'est applicable, alors toutes les CLi seront vides et le r6sultat de l'application de G sur 0 est 0, on dit qu'il y a eu un nombre de passages ~gal ~ z~ro.
Sinon, un sous-ensemble d'occurrences sera choisi parmi tous I-~--C-\[T~-, tel qu'il n'y ait pas d'intersections des parties actives (hors du contexte) de chaque occurrence.
a (b) FIGURE 3 PARALU~LISME EN " TRADUCTION AUTOMATISEE 403 II d~termine la conjecture globale de chaque r~gle, conjecture sans conflits avec les autres.
On ap-plique en parall~le les transformations indiqu~es ; avec des appels r~cursifs ~ventuels et on retrouve une m.a.t.
O' comme r~sultat.
Cet ensemble d'op~rations est appel~ un passage.
L'it~ration contr61~e, par les options de la grammaire, peut continuer jusq-~'arriv~e dans un ~tat d'arr~t, avec une m.a.t. 0" comme r~sultat final, apr~s un nombre de passages sup~rieur ou ~gal z~ro.
REALISATION DE STAR-PALE L'id6e de base est de ne regarder ni les r~gles ni les m.a.t, comme des ~l~ments passifs qu'on manipule, mais comme des processus qui coop~rent ~ la r~alisation d'une tache commune, lls sent donc en communication entre eux et d~veloppent un travail simultan~.
Des applications semblables a celle-ci peuvent se trouver en (7, 8).
Cette idle peut ~tre g~n~ralis~e au niveau des grammaires dans un syst~me transformationnel, en ajoutant une communication entre les processus qui repr~sentent les grammaires.
Pour chacune des r~gles, on active un processus qui sera charg~ de questionner les noeuds de la m.a.t, pour savoir si la r~gle est applicable ~ cet endroit, c'est-~dire s'il existe une occurrence de la r~gle enracin~e sur ce point.
II y a deux ~tapes dans chaque processus : il faut reconnaitre un schema dans la structure, puis transformer une partie de celle-ci.
Chacune de ces ~tapes est faite en parall~le, mais on ne commence la transformation que lorsque la reconnaissance globale a 6t6 r~alis~e pour tousles noeuds et routes les r~gles, en tenant compte de toutes les restrictions d'application entre les r~gles, c'est-a-dire lorsqu'une conjecture globale est trouv~e.
Par centre, la reconnaissance peut d~marrer pour le passage suivant des r~gles s'il yen a, en parall~le avec la transformation pr~c~dente.
Pour r~aliser une transformation, le syst~me utilise deux principes qui seront d~crits d'une mani~re g~n~rale.
Chaque processus repr~sentant un noeud de la m.a.t, se trouve dans un ~tat particulier, depuis lequel il est capable d'envoyer et de recevoir des messages.
Ces messages contr61ent la synchronisation et le changement d'~tat de chaque processus.
Le graphe de la figure 3a illustre les possibilit6s de transitions d'6tat d'un noeud en STAR-PALE.
L'~tat libre (L) est affect~ aux noeuds de la m.a.t, qui sent "inactifs", soit parce qu'~iennent d'etre cr~s et n'ont pas encore commenc~ l'~tape de reconnaissance ou de transformation, soit parce qu'ils viennent de finir une reconnaissance ou une transformation et qu'ils sent pr~ts ~ recevoir des messages, lls ont aussi le r61e de "retransmettre" des messages qui vent en direction de leurs descendants.
L'~tat test (T) indique que le noeud se trouve en train de d~terminer la conjecture locale-des r~gles.
Le r~sultat des operations r~alis~es dans cet ~tat d~termine si le noeud se trouve dans la zone d'action d'au moins une r~gle applicable.
Si ce n'est pas le cas, il peut se preparer pour le prochain passage de r6gles et pour cela il passe a l'~tat initialisation (I)~ Autrement, il doit attendre la d~finition de la conjecture ~ passage pour savoir le sort qui lui est destin~.
L'~tat attente (A) sert ~ la d~termination de la conjecture globale partielle (parce qu oT-on-ne--tient cempte que des conflits depuis le niveau du noeud vers le bas) par une recherche de conflits de bas en haut de la m.a.t.
Une fois finie cette operation pour le noeud, il passe ~ l'~tat pr~t (P) de faGon directe ou bien au travers de l'~tat r~vision (R).
L'6tat pr~t est un ~tat interm~diaire oQ le noeud.a une conjecture globale partielle (ve--rs-le bas) et attend ou bien un message qui lui indique qu'elle est bien 404 J.N.
VERASTEGU1-CARVAJAL d~finitive, ou des messages indiquant des modifications ~ lui faire avant de passer la transformation.
S'il y a des changements, il revient ~ l'~tat attente en passant par l'~tat r~vision.
Sinon, une fois connue la conjecture glob~initive, il change d'~tat pou-~ phase de transformation.
II passe dans l'~tat m~tamorphose (M) s'il participe d'une faGon active aux changements, et sinon difectement dans l'~tat initialisation.
L'6tat r~vision sert ~ constater des modifications de la conjecture globale partielle du~ un moment donn~.
II s'agit d'un ~tat interm~diaire et obligatoiFe dans les deux sens entre les ~tats pr6__~t et attente, en cas de "retour arri~re" jusqu'~ ce dernier.
L'~tat m~tamorphose est r~serv~ aux noeuds racines des r6gles applicables.
Ces noeuds seront charges d'effectuer la transformation.
Un noeud dans cet ~tat ale droit de crier ou de supprimer d'autres noeuds et de modifier leurs d~corations.
II peut s' "autosupprimer" ~ la fin de la transformation si c'est n~cessaire, sinon il passe ~ l'~tat initialisation, L'~tat initialisation est un ~tat d'attente d'autorisation d'aller au passage suivant de r~gles.
~ffet, un noeud dans cet ~tat peut encore #tre supprim~.
Dans ce cas, il passe a l'~tat suppression (S), sinon, il arrive a l'~tat libre pour un nouveau passage de r~gles.
Le cycle est ainsi fermi.
L'~tat suRpression est un ~tat final o~ un noeud est maintenu pour indiquer le nom du noeu~ quile remplace, ou simplement pour noter qu'il ne dolt plus ~tre pris en compte.
Une fois qu'il ne sera plus n~cessaire, il pourra ~tre ~limin~ r~ellement, en lib~rant la place occup~e.
Les messages repr~sentent des signaux ou des questions et peuvent produire des changements d'~tat des destinataires.
Nous avons d~finit 13 types de messages : reconnaissance, d~part, confirmation, refus, prevention, reconfiguration, modification, pas de modification, ordre de transformation, suppression, nouveau nom, identification et fin de transformation.
Le syst~me de communication des messages se comporte de sorte que, lorsqu'un noeud envoie plusieurs messages a un m~me noeud, ils seront reGus par le destinataire dans le m~me ordre que celui dans lequel ils ont ~t~ exp~di~s.
Nous avons pu constater en faisant des transformations avec cette m~thode que les diff~rents processus peuvent travailler en parall~le et en synchronisation avec une bonne performance.
Ceci peut ~tre visualis~ a l'aide d'un graphe de messages (voir figure 3b qui est une partie du graphe correspondant a l'application des r~gles de la figure 2b)oO chaque noeud repr~sente un message et un arc du noeud i au noeud j indique que le message i precede le message j.
Par cons#quent, tousles messages sur la m~me colonne sont susceptibles d'etre envoy~s en parall~le et les diff#rents travaux r~alis~s entre temps peuvent ~tre executes simultan~ment.
CONCLUSION Le syst~me pr~sent~ iciest plus puissant et plus g~n~ral que ROBRA.
II s'agit d'un syst~me de transformation de structures arborescentes qui permet une exploitation du parall~lisme ~ des niveaux divers, depuis la d~finition de la structure de donn~es jusqu'aux contr61es d'application de r6gles et de grammaires.
Le parall~lisme peut ~tre applique, m~me au niveau de la manipulation de d~corations.
De m~me, on ale cas des dictionnaires qui implique aussi des recherches 6ventuelles en parall~le.
Les phases de reconnaissance et de transformation sont susceptibles d'ut~liser le parall~lisme, ~ cause des expressions d'ordre et de l'usage de priorit~s horizontales et verticales, ce qui permet en effet la description de plusieurs possibilit~s avec une seule r~gle.
s • PARALLELISME EN TRADUCTION AUTOMATISEE 405 Les syst~mes transformationnels munis de plusieurs points d'entr@e, et des options de contr61e, permettent le test de diff~rentes strat@gies en parall~le, la production de diff@rents r@sultats et leurs comparaisons en parall@le, ou la recherche non-d~terministe d'une ou plusieurs solutions.
Le fait d'avoir la possibilit~ de m.a.t, d'entr@e et de sortie de type liste ou arbre, ainsi que l'introduction de dictionnaires, laisse supposer qu'un syst~me comme STAR-PALE pourrait remplacer non seulement ROBRA mais aussi ATEF et SYGMOR (deux autres sous-syst~mes du laboratoire GETA) (5).
L'@tude d'une m@thodologie d'impl~mentation a permis de d@finir un algorithme d'application de r~gles en parall~le qui a St@ test~ sur des petites arborescences.
Son comportement doit @tre @tudi@ d'une fagon th~orique et pratique.
II est int~ressant de voir les gains d'un tel syst~me en fonction du nombre de processeurs disponibles et de la taille de la m.a.t, a transformer.
L'importance d'une ~tude de cette nature est grande du point de vue pratique et th~orique.
REFERENCES R.D.
Fennell et V.R.
Lesser, "Parall@lisme in AI problem solving.
A case study of Hearsay II", (in) Working Papers in Speech Recognition IV.
the HEARSAY II system, Carnegie Mellon University, Computer Science Speech Group, February, 1976.
J.N. V@rast@gui-Carvajal, "Etude du parall@lisme appliqu~ ~ la traduction automatique.
STAR-PALE : un syst@me parall~le", th@se Docteur-lng~nieur, INPG, Grenoble, 1982.
J.P. Banatre, J.P.
Routeau et L.
Trilling, "An Event-driven Compiling Technique", CACM, Vol.
22, N ° I, Jan.
1979, pp 34-42.
Ch. Boitet, P.
Guillaume et M.
Qu~zel-Ambrunaz, "Manipulation d'arborescences et parall@lisme : Syst~me ROBRA", Communication pr@sent~e a COLING 78 (14-18 aoOt 1978), Bergen.
J. Chauch~, "Transducteurs et Arborescences.
Etude et r@alisation de syst~mes appliques aux grammaires transformationnelles", th@se d'Etat, Universit@ de Grenoble, 1974.
J. Earley, "An efficient context-free parsing algorithm", CACM, Vol.
13, N ° 2, F~vrier 1970, pp 94-102.
J.L.W. Kessels, "A Conceptual Framework for a Nonprocedural Programming Language",'CACM, Dec.
1977, Vol.
20, N ° 12, pp 906-913.
D.S. Hirschberg, "Parallel Algorithms for the Transitive Closure and the Connected Component Problem", Proc.
8th annual ACM Symp.
on theory of Computing, Hershey, Pa., may 1976, pp 55-57 .


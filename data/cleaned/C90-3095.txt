'" e'" " ' ' " 1)I'1 ' ', I h.
I cxl, pla, nnmg (,ott~pot~<.nl of l,ho.
I.,IIX)(I Sysl;¢.tn J.
Kreyfl nnd H.-J.
Novak IBM Deutschla,nd (;mt)ll, Wissc.scha, fl, liches Zenl, rulll last, lent fiir Wissenslm..~derl.e Sysl,(,me Postfa.c\]l 80 08 80, 7000 St.uttga.rt. 80, Wesl.-(:lerma.ny Phone: (-t-49) 711-6695-447/540, e-mail: N()VAK a.t.
I)S0blI, OCI.I31'I?NET Abstract In thi+ lmper we detcrlhe the conRtruction and impl,-me~v ration of PIT (Pre,enting Information by "l'extplamfing), tt ~ubsy,tem of the LILOO.
textunder.tandlng Jy~tem.
Pl'F i~ uted for plmming rtnswertt of pnretgraph \]eltgth to qne~tlo,A of the kind What do lieu kttolJ~ about X q.
We concentrated m~ t~ *imple.
envy to implement mechanltm thtd can be further extended.
Experiencet with thit planning cottll~Onent, e~pecirtlly concerning the integrntion of new plrmt anti further exiellslonN are dilcllAle<l I 1.
Introduction As PIT is wholly integrated into the IAI,OG system, first some general remarks about LII,OG.
In the LILOG project (Linguistic and logic methods for the automatic understanding of German) we aim primarily at constructing a text understanding system.
F'or the analysis part we use an llPSG-lmsed (Pollard and Sag 5'7) syntax and semantics that is further developed for German.
For the representation of world knowledge and the knowledge extracted from the texts we have devised the representa.tiou language Lt, rt, oa ( Plelat and yon.
Luck 8g).
Lr, tt, oa is an order sorted first-order predicate logic t.hat allows to define and farther describe sorts by using a KI,-ONE like sort descript.ion langnage, i.e. sorts can be described hy supersort and subsort relation~ as well as by roles (relations) and featnres (f,,,,ctions).
The sorts themselves can be either primitive (at,m~s) or complex e.g. defined as miles, intersection, c,r complement of other sorts with constraints on role:i and features.
The sorts form the conceptual entities of the system (they build au ontology) mid they are organized as a lattice.
The sentantics of a word in the lexicon is given by a pointer into th in sort ln~.tice.
In order to find out what the text-mlderstaudi,g system has really understood we can ask questions about the texts.
In the first prot<)type (llollinger el al.
89) we could only ask.
yes/no and constituent questions.
In the present scenario the system in to understand and combine the information of several lyIoth author~ are indebted to F;,duard tlovy who devlted the planning ten,portent while ~taying a.
a guest ~<:ienti~t in the I,ILOG project.
The refinements, th~ i,.plementrttiotl, nn<l the experlencet reported here have been mri<le I+y the txtithorL The vlewI expret~e¢l in thi~ paper are our ~ole re.q.mtihillt.v. paragraph length texts about places of interest ill the city of l)iisseldorf and we also want to be able to ask questio,s of the kind What do ~ou know about the L,tmbrrtus cathedral?
Questions of this type necessitate a.
textplanniug component that decides first, which entities and second, in which order they should be verbalized such I.\]mtl a colwrellt descriptive paragraph is generated.
There have heen several approaches to the generation of co\]~ereut texts t.hat can be coarsely divided into two kinds: the schema based approach and the plan based approach.
The first in desc,'ibed in detail in McKron, n 85.
Schemata are representational structures for stereotypical paragraphs that describe objects.
A variant of this approach, somewhere between the schema and the plan based approach is described in Novak 86 and Novak 87.
}fete the structure of the whole text is l>a~ed on a schema whereas the sit, ale paragraphs are c,,~strueuted using domain restrictions and a technique called anticipated visua.li~,ation.
The aim i~ to describe the movement of an object such that the hearer can visualiT, e it aM H.
has been seen by the system.
The plan based approach has been put forth, mnoug others, by Merha.n 76, ~ohen 7,q, Avpclt 8,5, and \[f,,vTI 85.
Mann. and 'l'h,,tTp.~on.
88 propose a,;et of al~ont 20 relations sufl~cient to represent the relntim~s that hohl within t,.×ts oceurri,g in F,nglish.
These relations, called R.ST (Rhetorical Structure Theory), have been operat.ionali~ed and used an plans (lh,,v 5'8) in a top-down hierarchical expansion planner.
The planner takes n.s input one or more COmlnllnicative goals along with a sel.
of clause-.si~ed input;s to be generated as 1111 Pmglish pa:ragraph.
It nssemldes the input entities into a t;ree that embodies the paragraph structure.
Nonterminal nodes in the tree are RS'I! relations and terminal elements contain the iapnts, In our approach the same kiud of planner as described in llov~ 5'5' is used to find the entities in the knowledge hase that should be generated.
In the following we first describe the overall a.rcbilecture oF the planner a.nd then its implementation.
I 431 2.
Architecture Our textplanner basically decides what to say and gives as output a linear list of the conceptual entities that should be verbalized as answer to general questions of the kind What do you know about X? or What can you tell me about X?
The planner takes as input a conummicative goal, e.g. describe(~), and needs access to all knowledge sources of the system, namely to the user model, the ontology, the background knowledge and the textknowledge.
As the knowledge of the system is represented in LLILOG we use the inference engine for lookup and inferences.
The user model currently only contains the facts that are already known to the hearer.
The ontology is given by the sort hierarchy of the system, the background kmowledge contains world knowledge in the form of facts and inference rules and finally the textknowledge results from the analysis of seven short paragraphs describing places of interest in the city of Dfisseldorf.
The output is a list of the entities and their attributes that should to be verbalized in.
this order.
This list is passed on to the generator that deterurines sentence boundaries and decides on the syntactic realization of the entities.
The result of the generator is a formal description of the output sentence.
This description is then takeu by the formulator that constructs a correctly inflected Germtu~ sentence.
The formulator is.
a system similar to SUTRA (Busemann 88) or MUMBLE-86 (McDonald and Mercer 88).
2.1 Implementation
In general, our implementation of the phmner is along the same lines a.s described in Hovy 88 except that we incorporate not only RST relations but also domaJnspecifie relations like ACCESS (how does one get to an object) and OPEN (when are the opening hours of an object).
Moore and Swartout 89 and Moore and Paris 89 use the snme planning algorithm aud they have added plans like e.g.
PERSUADE to the RST plans.
This enables them to answer followup questions in advisory dialogues or in the explanation facility of an expert system.
Most of the questions they cml answer are Why questions except two What questions: What is a concept? and What is the difference between two concepts?
The general idea of their approach too is to gather the information that should be communicated but using their plaits we could not answer the kind of general question we have in mind.
Like RST plans our plans consist of a nucleus and a satellite each associated with requirements and growth points.
The nuclei contain the information that has to be verbalized obligatorily which is either done by recursively invoking other subplans or by an explicit verbalization cmmnand say(aQ.
All plans are recursively expanded until they lead to a verbalization command.
In contrast to nuclei sateBites, using the same notation, contain the same kind ofinfornmtion that can be optionally verbalized.
The growth points allow for the inclusion of further infornmtion into the list of entities that is finally passed on to the generator.
They again contain plans.
Finally, the requirements for nucleus and satellite contain inquiries to the inference engine about e.g. the validity of certain subsort relations and about beliefs of the hearer.
An exmnple of a plau, inleresting_~eature, is given below (the planner is implemented in PROLOG so the atoms with capital letters are variables): plan(intoxosting.featuxe(0bject), nucleus: \[say(0bjeot)\], satellite: \[say(Featuxo)\], nuoleuszequizement: axtd(\[subsozt(Objoct,object)\]), satellitezequizement: \[\], nucleus and..satelliterequirement: and( \[ attxibute(0bjeet, zemarkability: not(bel(heazer, attribute(Object, remarkability: Feature)))\]), nucleus gzowthpoirtt: \[interesting.
feature(Feature)i, satellite.growth_point: \[\]) Fontal:e), Among the 12 plans used by PIT are domain dependent ones as.
well as domain independent ones.
The latter are formalizations of RST relations that lead to small text structures.
The domain dependent Plans lead to larger structures, e.g. whole paragraphs.
Each plan, even if it can be seen as domain independent, contains a domain specific part, namely the requirements for nucleus and satellite which are inquiries to the inference engine that have to heed the names of entities, roles, and features of the knowledge representation.
The planning algorithm uses four data structures: the plans, a tree, a stack, and a usedllst.
The text structure tree is binary.
The root contains the commuuicative goal that initiates the phmning process.
The nodes represent the executed plaits.
Each node has successive nucleus and satellite edges.whose corresponding nodes may be either empty or contain an explicit verbalization command or further plans.
The stack is used as an agenda.
Its elements are tuples consisting of the plan to be executed next and a pointer to that leaf of the tree where the subtree stemming from the execution of the plan should be added.
The used hst is a bookkeeping device representing which plan has been'used for which entity.
The plmming algorithm consists of three phases: first, the text structure tree is built by a top-down hierarchical plmmer (Sacerdoti 75) using reeursive descent.
Second, the verbalization eonunmlds are collected by traversing the tree depth-first, left-to-right.
Third, the entities to be verbalized are expanded by their attributes contained in the knowledge base and 432 2 ~re passed on to the generator in a suit, able form.
At the ;~tart of the planning process, i.e. when '~he communicative goal comes in, the tree, the stack, ~nd the used-list are empty.
If the plan library offers a:n appropriate plan to achieve the goal it is tested whether this phm has already been executed for the entity in question.
If so, the execution is aborted, otherwise the plan is put on the used list.
Next the requirements of the plan are checked, first, the ones common to both nucleus and satellite and then the nucleus requirements.
If they cannot be met, execution of the plan aborted, otherwise the requirements of the satellite are checked.
If they canrot be met the corresponding plans of the satellite and the satelfite growth points are skipped.
Are all requirements met, the new plans together with their pointers to that leaf of the tree where the subtrees ~;hould be added are pushed onto the stack in the following order: satellite growth points, nucleus growth points, satellite and nucleus.
The second plan that is to be executed is popped fcom the stack and dealt with as described above with the addition that the agenda has to be updated when the tree has been expanded.
The pointers of all plans to that leaf of the tree where a subtree has been added have to be changed in order to point to the nucleus of the new subtree.
Planning stops when the agenda is empty.
3. Shortcomings and possible exten:,;ions The origlnal plans like the one shown above are based oil an extensive analysis of seven paragraphs describing places of interest in Diisseldorf.
tlenee, they capture the typical structure of such descriptions and act as more flexible schemas that can be adapted to a user's needs by incorporating more communicative goals.
Nevertheless, problems arise when new plans are added or when old ones are changed.
\]It proved to be difficult to say in advance which text structure will be the outconle of the planl~ing protess.
Through the top-down expansion of the text ~tructure tree new plans may be inserted into the tree t'A places w\]lere they do not have the desired effect ¢,1 the text structure.
E.g. the plan \]cat,ires(X) may be the nucleus of the initiating plan deseriplion(X) and ~dso satellite of a more fine grained plan.
As those plans that have been pushed last onto the stack are executed first and no plan is executed twice the features may be verbalized at the wrong place in the text.
Generally speaking, these problems point to the need to strictly separate the planning of the proposltlonal and the rhetorical.
Although our hierarchical planner can be used successfully to plan the content of the descriptive paragraphs we feel that a nonlinear planning algorithm 1night be better snited for the planning of the propositional content followed by a hierarchical planner for the rhetorical structure.
Another problem is the domain dependence of the propositional planner which always snacks in through the requirements placed on nncleus and satellite.
The :requirements are stated in terms of the knowledge representation langamge.
The only partial solution to this problem is to use general terms in the planner and a separate mapping of these general terms onto the knowledge representation language.
Our further research is directed in this direction.
References Appelt 85 Appelt, D.E.: Planning English Sentences.
Cambridge University Press, 1985.
Bollinger et al.80 Bollinger, T., Hedtstfick, U., Rollinger, C.-R.: Reasoning \]or Test Understanding Kno~vledge Processing in the 1 '~ LILOG-Prototype.
In: Met~ing, D.
(Ed.): GWAI-89, 13.1' German Workshop on Artificial Intelligence.
Sprhlger, 1989, 203-212.
I'lllsemann 88 Busemann t S.: Satrface Trantt\]ovmations during the Generation o/ Written German Sentences.
In: Bole, L.
(tit.), Natural Language Generation Systems.
Springer, Berlin, 1988, 98-165.
Cohen 78 Cohen, P.: On Knowing What to Say: Planning Speech Acts.
Techn. Report No.
118, University of Toronto, 1978.
ltovy ~q~ tIovy, E.H.: \[ntegratinq Tenet Planning and Prodaction in Generation.
IJCAI-85, 8't8-851.
lIovy 88 Hovy, ~.It.: Planning Coherent Multisentential Te:et.
Proc. of the 26 ~h Annual Meeting of the AC.L, 1988, 163-169.
Mann and Thompson 88 Mann, W.C.,Thompson, S.A.: l~hetorical Structure Theory: Toward a ~mctional theory o\] te~t organization.
In: Text 8 (3)~ 1988, 2'13-281.
McDonald and Meteer 88 McDotaald, D.D., Mercer, M.W.: ~rom Water to Wine: Generating natural Language Test front Today'* Application Programs.
Proc. of the 2 ''4 ACL Conference on Applied Natural Language Proce~shag, 1988, 41-48.
MeKeown 85 McKeown, K.R.: Te~t Generation: Using Discoatrs Stralegle~ and Focu~ (7on~traints to Generate Natu~'al Langua9e Tezt.
Cambridge, Cambridge University Press, 1985.
Moehan 70 Meehan, F.: The Metanovel: Writing Sio-,'ies Ay Camp,def.
Ph.D. dissertation, Yale University, 1976.
Moore and Paris 80 Moore, J.D., Paris, C.L.: Planning 7'e,'rt Jar Advisory Diologue~.
ACL-89, 203-211.
Moore and Swartout 80 Moors, J.D., Swartout, W.R.: A Reactive Approach to E:rplanation.
IJCAI-89, Detrolt.
Novak 8(t Novak~ It.-J.: G'enerating a Coherent Tecet 1)eFcribing a Traffic Sceite.
COLING-86, 570-575.
Novak 87 Novak, It.-J.: Teztgenerierung aus visuellen Daten: Beschreibungen van Strassenszenen.
Berlin/Heidelberg/New York, Springer, 1987.
Pletat and van Luck 80 Pletat, U., van Luck, K.: Knowledge Representation in LfLOG.
In: Blash,s, K.H., Hedt~tlick, U., Rolllngei, C.-R.
(ed*.): Sorts and Types in Artificial Intelligence.
Springer, 1989, (to appear).
Pollard and Sag 87 Pollard, C., Sag, I.A.: An In/ormatlon-lJased Synta~ and Semantics.
VoL I, Fundamentals.
CSLI Lecture Nora's 13, Stanford, 1987.
Saeerdotl 75 Sacerdoti, E.D.: A structure \]or plans and behaviour.
North-Holland Publishing Company, Amst erdam, 1975 .


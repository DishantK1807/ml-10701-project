Topological Dependency Trees: A Constraint-Based Account of Linear Precedence Denys Duchier Programming Systems Lab Universit¨at des Saarlandes, Geb.
45 Postfach 15 11 50 66041 Saarbr¨ucken, Germany duchier@ps.uni-sb.de Ralph Debusmann Computational Linguistics Universit¨at des Saarlandes, Geb.
17 Postfach
15 11 50 66041 Saarbr¨ucken, Germany rade@coli.uni-sb.de Abstract We describe a new framework for dependency grammar, with a modular decomposition of immediate dependency and linear precedence.
Our approach distinguishes two orthogonal yet mutually constraining structures: a syntactic dependency tree and a topological dependency tree.
The syntax tree is nonprojective and even non-ordered, while the topological tree is projective and partially ordered.
1 Introduction
Linear precedence in so-called free word order languages remains challenging for modern grammar formalisms.
To address this issue, we propose a new framework for dependency grammar which supports the modular decomposition of immediate dependency and linear precedence.
Duchier (1999) formulated a constraint-based axiomatization of dependency parsing which characterized well-formed syntax trees but ignored issues of word order.
In this article, we develop a complementary approach dedicated to the treatment of linear precedence.
Our framework distinguishes two orthogonal, yet mutually constraining structures: a syntactic dependency tree (ID tree) and a topological dependency tree (LP tree).
While edges of the ID tree are labeled by syntactic roles, those of the LP tree are labeled by topological fields (Bech, 1955).
The shape of the LP tree is a flattening of the ID tree’s obtained by allowing nodes to ‘climb up’ to land in an appropriate field at a host node where that field is available.
Our theory of ID/LP trees is formulated in terms of (a) lexicalized constraints and (b) principles governing e.g. climbing conditions.
In Section 2 we discuss the difficulties presented by discontinuous constructions in free word order languages, and briefly touch on the limitations of Reape’s (1994) popular theory of ‘word order domains’.
In Section 3 we introduce the concept of topological dependency tree.
In Section 4 we outline the formal framework for our theory of ID/LP trees.
Finally, in Section 5 we illustrate our approach with an account of the word-order phenomena in the verbal complex of German verb final sentences.
2 Discontinuous
Constructions In free word order languages, discontinuous constructions occur frequently.
German, for example, is subject to scrambling and partial extraposition.
In typical phrase structure based analyses, such phenomena lead to e.g. discontinuous VPs: (1) (dass) (that) einen a Mann manacc Maria Marianom zu to lieben love versucht tries whose natural syntax tree exhibits crossing edges: S NP V VP NP V DET N (dass) einen Mann Maria zu lieben versucht Since this is classically disallowed, discontinuous constituents must often be handled indirectly through grammar extensions such as traces.
Reape (1994) proposed the theory of word order domains which became quite popular in the HPSG community and inspired others such as M¨uller (1999) and Kathol (2000).
Reape distinguished two orthogonal tree structures: (a) the unordered syntax tree, (b) the totally ordered tree of word order domains.
The latter is obtained from the syntax tree by flattening using the operation of domain union to produce arbitrary interleavings.
The boolean feature [[ ] of each node controls whether it must be flattened out or not.
Infinitives in canonical position are assigned [[+]: (dass) S NP Maria VP[[+] NP[[ ] DET einen N Mann V zu lieben V versucht Thus, the above licenses the following tree of word order domains: (dass) S NP DET einen N Mann NP Maria V zu lieben V versucht Extraposed infinitives are assigned [[ ]: (dass) S NP Maria V versucht VP[[ ] NP DET einen N Mann V zu lieben As a consequence, Reape’s theory correctly predicts scrambling (2,3) and full extraposition (4), but cannot handle the partial extraposition in (5): (2) (dass) Maria einen Mann zu lieben versucht (3) (dass) einen Mann Maria zu lieben versucht (4) (dass) Maria versucht, einen Mann zu lieben (5) (dass) Maria einen Mann versucht, zu lieben 3 Topological Dependency Trees Our approach is based on dependency grammar.
We also propose to distinguish two structures: (a) a tree of syntactic dependencies, (b) a tree of topological dependencies.
The syntax tree (ID tree) is unordered and non-projective (i.e.
it admits crossing edges).
For display purposes, we pick an arbitrary linear arrangement: (dass) Maria einen Mann zu lieben versucht det object zuvinfsubject The topological tree (LP tree) is partially ordered and projective: (dass) Maria einen Mann zu lieben versucht n d n v vdf mfmf vc Its edge labels are called (external) fields and are totally ordered: df mf vc.
This induces a linear precedence among the daughters of a node in the LP tree.
This precedence is partial because daughters with the same label may be freely permuted.
In order to obtain a linearization of a LP tree, it is also necessary to position each node with respect to its daughters.
For this reason, each node is also assigned an internal field (d, n, or v) shown above on the vertical pseudo-edges.
The set of internal and external fields is totally ordered: d df n mf vc v Like Reape, our LP tree is a flattened version of the ID tree (Reape, 1994; Uszkoreit, 1987), but the flattening doesn’t happen by ‘unioning up’; rather, we allow each individual daughter to climb up to find an appropriate landing place.
This idea is reminiscent of GB, but, as we shall see, proceeds rather differently.
4 Formal
Framework The framework underlying both ID and LP trees is the configuration of labeled trees under valency (and other) constraints.
Consider a finite set L of edge labels, a finite set V of nodes, and E V V L a finite set of directed labeled edges, such that (V; E) forms a tree.
We write w !‘ w0 for an edge labeled ‘ from w to w0.
We define the ‘-daughters ‘(w) of w 2 V as follows: ‘(w) = fw0 2 V j w !‘ w0 2 Eg We write bL for the set of valency specifications b‘ defined by the following abstract syntax: b‘ ::= ‘ j ‘? j ‘ (‘ 2 L) A valency is a subset of bL.
The tree (V; E) satisfies the valency assignment valency : V ! 2bL if for all w 2 V and all ‘ 2 L: ‘ 2 valency(w) ) j‘(w)j = 1 ‘? 2 valency(w) ) j‘(w)j 1 ‘ 2 valency(w) ) j‘(w)j 0 otherwise ) j‘(w)j = 0 4.1 ID Trees An ID tree (V; EID; lex; cat; valencyID) consists of a tree (V; EID) with EID V V R, where the set R of edge labels (Figure 1) represents syntactic roles such as subject or vinf (bare infinitive argument).
lex : V ! Lexicon assigns a lexical entry to each node.
An illustrative Lexicon is displayed in Figure 1 where the 2 features cats and valencyID of concern to ID trees are grouped under table heading “Syntax”.
Finally, cat and valencyID assign a category and an bR valency to each node w 2 V and must satisfy: cat(w) 2 lex(w):cats valencyID(w) = lex(w):valencyID (V; EID) must satisfy the valencyID assignment as described earlier.
For example the lexical entry for versucht specifies (Figure 1): valencyID(versucht) = fsubject; zuvinfg Furthermore, (V; EID) must also satisfy the edge constraints stipulated by the grammar (see Figure 1).
For example, for an edge w !det w0 to be licensed, w0 must be assigned category det and both w and w0 must be assigned the same agreement.1 4.2 LP Trees An LP tree (V; ELP; lex; valencyLP; fieldext; fieldint) consists of a tree (V; ELP) with ELP V V Fext, where the set Fext of edge labels represents topological fields (Bech, 1955): df the determiner field, mf the ‘Mittelfeld’, vc 1Issues of agreement will not be further considered in this paper.
the verbal complement field, xf the extraposition field.
Features of lexical entries relevant to LP trees are grouped under table heading “Topology” in Figure 1.
valencyLP assigns a dFext valency to each node and is subject to the lexicalized constraint: valencyLP(w) = lex(w):valencyLP (V; ELP) must satisfy the valencyLP assignment as described earlier.
For example, the lexical entry for zu lieben2 specifies: valencyLP(zu lieben2) = fmf ; xf?g which permits 0 or more mf edges and at most one xf edge; we say that it offers fields mf and xf.
Unlike the ID tree, the LP tree must be projective.
The grammar stipulates a total order on Fext, thus inducing a partial linear precedence on each node’s daughters.
This order is partial because all daughters in the same field may be freely permuted: our account of scrambling rests on free permutations within the mf field.
In order to obtain a linearization of the LP tree, it is necessary to specify the position of a node with respect to its daughters.
For this reason each node is assigned an internal field in Fint.
The set Fext [Fint is totally ordered: d df n mf vc v xf In what (external) field a node may land and what internal field it may be assigned is determined by assignments fieldext : V ! Fext and fieldint : V ! Fint which are subject to the lexicalized constraints: fieldext(w) 2 lex(w):fieldext fieldint(w) 2 lex(w):fieldint For example, zu lieben1 may only land in field vc (canonical position), and zu lieben2 only in xf (extraposed position).
The LP tree must satisfy: w !‘ w0 2 ELP ) ‘ = fieldext(w0) Thus, whether an edge w !‘ w0 is licensed depends both on valencyLP(w) and on fieldext(w0).
In other words: w must offer field ‘ and w0 must accept it.
For an edge w !‘ w0 in the ID tree, we say that w is the head of w0.
For a similar edge in the LP Grammar Symbols C = fdet; n; vfin; vinf; vpast; zuvinfg (Categories) R = fdet; subject; object; vinf; vpast; zuvinfg (Syntactic Roles) Fext = fdf; mf; vc; xfg (External Topological Fields) Fint = fd; n; vg (Internal Topological Fields) d df n mf vc v xf (Topological Ordering) Edge Constraints w !det w0 ) cat(w0) = det ^ agr(w) = agr(w0) w !subject w0 ) cat(w0) = n ^ agr(w) = agr(w0) 2 NOM w !object w0 ) cat(w0) = n ^ agr(w0) 2 ACC w !vinf w0 ) cat(w0) = vinf w !vpast w0 ) cat(w0) = vpast w !zuvinf w0 ) cat(w0) = zuvinf Lexicon Word Syntax Topology cats valencyID fieldint fieldext valencyLP einen fdetg fg fdg fdfg fg Mann fng fdetg fng fmfg fdf?g Maria fng fg fng fmfg fg lieben fvinfg fobject?g fvg fvcg fg geliebt fvpastg fobject?g fvg fvcg fg k¨onnen1 fvinfg fvinfg fvg fvcg fvc?g k¨onnen2 fvinf; vpastg fvinfg fvg fxfg fmf ; vc? xf?g wird fvfing fsubject; vinfg fvg fvcg fmf ; vc? xf?g haben fvinfg fvpastg fvg fxfg fmf ; vc? xf?g hat fvinfg fsubject; vpastg fvg fvcg fmf ; vc? xf?g zu lieben1 fzuvinfg fobject?g fvg fvcg fg zu lieben2 fzuvinfg fobject?g fvg fxfg fmf ; xf?g versucht fvfing fsubject; zuvinfg fvg fvcg fmf ; vc? xf?g Figure 1: Grammar Fragment tree, we say that w is the host of w0 or that w0 lands on w.
The shape of the LP tree is a flattened version of the ID tree which is obtained by allowing nodes to climb up subject to the following principles: Principle 1 a node must land on a transitive head2 Principle 2 it may not climb through a barrier We will not elaborate the notion of barrier which is beyond the scope of this article, but, for example, a noun will prevent a determiner from climbing through it, and finite verbs are typically general barriers.
2This is Br¨ocker’s terminology and means a node in the transitive closure of the head relation.
Principle 3 a node must land on, or climb higher than, its head Subject to these principles, a node w0 may climb up to any host w which offers a field licensed by fieldext(w0).
Definition. An ID/ LP analysis is a tuple (V; EID; ELP; lex; cat; valencyID; valencyLP; fieldext; fieldint) such that (V; EID; lex; cat; valencyID) is an ID tree and (V; ELP; lex; valencyLP; fieldext; fieldint) is an LP tree and all principles are satisfied.
Our approach has points of similarity with (Br¨oker, 1999) but eschews modal logic in favor of a simpler and arguably more perspicuous constraint-based formulation.
It is also related to the lifting rules of (Kahane et al., 1998), but where they choose to stipulate rules that license liftings, we opt instead for placing constraints on otherwise unrestricted climbing.
5 German
Verbal Phenomena We now illustrate our theory by applying it to the treatment of word order phenomena in the verbal complex of German verb final sentences.
We assume the grammar and lexicon shown in Figure 1.
These are intended purely for didactic purposes and we extend for them no claim of linguistic adequacy.
5.1 VP
Extraposition Control verbs like versuchen or versprechen allow their zu-infinitival complement to be optionally extraposed.
This phenomenon is also known as optional coherence.
(6) (dass) Maria einen Mann zu lieben versucht (7) (dass) Maria versucht, einen Mann zu lieben Both examples share the following ID tree: (dass) Maria einen Mann zu lieben versucht det object zuvinfsubject Optional extraposition is handled by having two lexical entries for zu lieben.
One requires it to land in canonical position: fieldext(zu lieben1) = fvcg the other requires it to be extraposed: fieldext(zu lieben2) = fxfg In the canonical case, zu lieben1 does not offer field mf and einen Mann must climb to the finite verb: (dass) Maria einen Mann zu lieben versucht n d n v vdf mfmf vc In the extraposed case, zu lieben2 itself offers field mf: (dass) Maria versucht einen Mann zu lieben n v d n v mf df mf xf 5.2 Partial VP Extraposition In example (8), the zu-infinitive zu lieben is extraposed to the right of its governing verb versucht, but its nominal complement einen Mann remains in the Mittelfeld: (8) (dass) Maria einen Mann versucht, zu lieben In our account, Mann is restricted to land in an mf field which both extraposed zu lieben2 and finite verb versucht offer.
In example (8) the nominal complement simply climbed up to the finite verb: (dass) Maria einen Mann versucht zu lieben n d n v v mf df mf xf 5.3 Obligatory Head-final Placement Verb clusters are typically head-final in German: non-finite verbs precede their verbal heads.
(9) (dass) (that) Maria Marianom einen a Mann manacc lieben love wird will (10)*(dass) Maria einen Mann wird lieben The ID tree for (9) is: (dass) Maria einen Mann lieben wird subject det object vinf The lexical entry for the bare infinitive lieben requires it to land in a vc field: fieldext(lieben) = fvcg therefore only the following LP tree is licensed:3 (dass) Maria einen Mann lieben wird n d n v v mf df mf vc where mf vc v, and subject and object, both in field mf, remain mutually unordered.
Thus we correctly license (9) and reject (10).
5.4 Optional
Auxiliary Flip In an auxiliary flip construction (Hinrichs and Nakazawa, 1994), the verbal complement of an auxiliary verb, such as haben or werden, follows rather than precedes its head.
Only a certain class of bare infinitive verbs can land in extraposed position.
As we illustrated above, main verbs do not belong to this class; however, modals such as k¨onnen do, and may land in either canonical (11) or in extraposed (12) position.
This behavior is called ‘optional auxiliary flip’.
(11) (dass) (that) Maria Maria einen a Mann man lieben love k¨onnen can wird will (that) Maria will be able to love a man (12) (dass) Maria einen Mann wird lieben k¨onnen Both examples share the following ID tree: (dass) Maria einen Mann wird lieben k¨onnen subject det object vinf vinf Our grammar fragment describes optional auxiliary flip constructions in two steps: wird offers both vc and xf fields: valencyID(wird) = fmf ; vc? xf?g k¨onnen has two lexical entries, one canonical and one extraposed: fieldext(k¨onnen1) = fvcg fieldext(k¨onnen2) = fxfg 3It is important to notice that there is no spurious ambiguity concerning the topological placement of Mann: lieben in canonical position does not offer field mf; therefore Mann must climb to the finite verb.
Thus we correctly account for examples (11) and (12) with the following LP trees: (dass) Maria einen Mann lieben k¨onnen wird n d n v v v mf df mf vc vc (dass) Maria einen Mann wird lieben k¨onnen n d n v v v mf df mf vc xf The astute reader will have noticed that other LP trees are licensed for the earlier ID tree: they are considered in the section below.
5.5 V-Projection Raising This phenomenon related to auxiliary flip describes the case where non-verbal material is interspersed in the verb cluster: (13) (dass) Maria wird einen Mann lieben k¨onnen (14)*(dass) Maria lieben einen Mann k¨onnen wird (15)*(dass) Maria lieben k¨onnen einen Mann wird The ID tree remains as before.
The NP einen Mann must land in a mf field.
lieben is in canonical position and thus does not offer mf, but both extraposed k¨onnen2 and finite verb wird do.
Whereas in (12), the NP climbed up to wird, in (13) it climbs only up to k¨onnen.
(dass) Maria wird einen Mann lieben k¨onnen n v d n v v mf df mf vc xf (14) is ruled out because k¨onnen must be in the vc of wird, therefore lieben must be in the vc of k¨onnen, and einen Mann must be in the mf of wird.
Therefore, einen Mann must precede both lieben and k¨onnen.
Similarly for (15).
5.6 Intermediate
Placement The Zwischenstellung construction describes cases where the auxiliary has been flipped but its verbal argument remains in the Mittelfeld.
These are the remaining linearizations predicted by our theory for the running example started above: (16) (dass) Maria einen Mann lieben wird k¨onnen (17) (dass) einen Mann Maria lieben wird k¨onnen where lieben has climbed up to the finite verb.
5.7 Obligatory
Auxiliary Flip Substitute infinitives (Ersatzinfinitiv) are further examples of extraposed verbal forms.
A substitute infinitive exhibits bare infinitival inflection, yet acts as a complement of the perfectizer haben, which syntactically requires a past participle.
Only modals, AcI-verbs such as sehen and lassen, and the verb helfen can appear in substitute infinitival inflection.
A substitute infinitive cannot land in canonical position; it must be extraposed: an auxiliary flip involving a substitute infinitive is called an ‘obligatory auxiliary flip’.
(18) (dass) (that) Maria Maria einen a Mann man hat has lieben love k¨onnen can (that) Maria was able to love a man (19) (dass) Maria hat einen Mann lieben k¨onnen (20)*(dass) Maria einen Mann lieben k¨onnen hat These examples share the ID tree: (dass) Maria einen Mann hat lieben k¨onnen subject det object xvinf vinf hat subcategorizes for a verb in past participle inflection because: valencyID(hat) = fsubject; vpastg and the edge constraint for w !vpast w0 requires: cat(w0) = vpast This is satisfied by k¨onnen2 which insists on being extraposed, thus ruling (20) out: fieldext(k¨onnen2) = fxfg Example (18) has LP tree: (dass) Maria einen Mann hat lieben k¨onnen n d n v v v mf df mf xf vc In (18) einen Mann climbs up to hat, while in (19) it only climbs up to k¨onnen.
5.8 Double
Auxiliary Flip Double auxiliary flip constructions occur when an auxiliary is an argument of another auxiliary.
Each extraposed verb form offers both vc and mf: thus there are more opportunities for verbal and nominal arguments to climb to.
(21) (dass) Maria wird haben einen Mann lieben k¨onnen (that) Maria will have been able to love a man (22) (dass) Maria einen Mann wird haben lieben k¨onnen (23) (dass) Maria wird einen Mann lieben haben k¨onnen (24) (dass) Maria einen Mann wird lieben haben k¨onnen (25) (dass) Maria einen Mann lieben wird haben k¨onnen These examples have ID tree: Maria einen Mann wird haben lieben k¨onnen subject det object vinf vinf vpast and (22) obtains LP tree: Maria einen Mann wird haben lieben k¨onnen n d n v v v v mf df mf xf vc xf 5.9 Obligatory Coherence Certain verbs like scheint require their argument to appear in canonical (or coherent) position.
(26) (dass) (that) Maria Maria einen a Mann man zu to lieben love scheint seems (that) Maria seems to love a man (27)*(dass) Maria einen Mann scheint, zu lieben Obligatory coherence may be enforced with the following constraint principle: if w is an obligatory coherence verb and w0 is its verbal argument, then w0 must land in w’s vc field.
Like barriers, the expression of this principle in our grammatical formalism falls outside the scope of the present article and remains the subject of active research.4 6 Conclusions In this article, we described a treatment of linear precedence that extends the constraint-based framework for dependency grammar proposed by Duchier (1999).
We distinguished two orthogonal, yet mutually constraining tree structures: unordered, non-projective ID trees which capture purely syntactic dependencies, and ordered, projective LP trees which capture topological dependencies.
Our theory is formulated in terms of (a) lexicalized constraints and (b) principles which govern ‘climbing’ conditions.
We illustrated this theory with an application to the treatment of word order phenomena in the verbal complex of German verb final sentences, and demonstrated that these traditionally challenging phenomena emerge naturally from our simple and elegant account.
Although we provided here an account specific to German, our framework intentionally permits the definition of arbitrary language-specific topologies.
Whether this proves linguistically adequate in practice needs to be substantiated in future research.
Characteristic of our approach is that the formal presentation defines valid analyses as the solutions of a constraint satisfaction problem which is amenable to efficient processing through constraint propagation.
A prototype was implemented in Mozart/Oz and supports a parsing 4we also thank an anonymous reviewer for pointing out that our grammar fragment does not permit intraposition mode as well as a mode generating all licensed linearizations for a given input.
It was used to prepare all examples in this article.
While the preliminary results presented here are encouraging and demonstrate the potential of our approach to linear precedence, much work remains to be done to extend its coverage and to arrive at a cohesive and comprehensive grammar formalism.
References Gunnar Bech.
1955. Studien ¨uber das deutsche Verbum infinitum.
2nd unrevised edition published 1983 by Max Niemeyer Verlag, T¨ubingen (Linguistische Arbeiten 139).
Norbert Br¨oker.
1999. Eine Dependenzgrammatik zur Kopplung heterogener Wissensquellen.
Linguistische Arbeiten 405.
Max Niemeyer Verlag, T¨ubingen/FRG.
Denys Duchier.
1999. Axiomatizing dependency parsing using set constraints.
In Sixth Meeting on the Mathematics of Language, Orlando/FL, July.
Erhard Hinrichs and Tsuneko Nakazawa.
1994. Linearizing AUXs in German verbal complexes.
In Nerbonne et al.(Nerbonne et al., 1994), pages 11– 37.
Sylvain Kahane, Alexis Nasr, and Owen Rambow.
1998. Pseudo-projectivity: a polynomially parsable non-projective dependency grammar.
In Proc.
ACL/COLING’98, pages 646–52, Montr´eal.
Andreas Kathol.
2000. Linear Syntax.
Oxford University Press.
Igor Mel´cuk.
1988. Dependency Syntax: Theory and Practice.
The SUNY Press, Albany, N.Y.
Stefan M¨uller.
1999. Deutsche Syntax deklarativ.
Head-Driven Phrase Structure Grammar f¨ur das Deutsche.
Linguistische Arbeiten 394.
Max Niemeyer Verlag, T¨ubingen/FRG.
John Nerbonne, Klaus Netter, and Carl Pollard, editors.
1994. German in Head-Driven Phrase Structure Grammar.
CSLI, Stanford/CA.
Mike Reape.
1994. Domain union and word order variation in German.
In Nerbonne et al.(Nerbonne et al., 1994), pages 151–197.
Hans Uszkoreit.
1987. Word Order and Constituent Structure in German.
CSLI, Stanford/CA.


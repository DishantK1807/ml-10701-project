Proceedings of NAACL HLT 2007, Companion Volume, pages 61–64, Rochester, NY, April 2007.
c©2007 Association for Computational Linguistics Relationship betweenNon-ProjectiveEdges,theirLevelTypes, andWell-Nestedness JiˇríHavelka InstituteofFormalandAppliedLinguistics Charles UniversityinPrague,Czech Republic havelka@ufal.mff.cuni.cz Abstract Dependency analysis of natural language gives rise to non-projective structures.
The constraint of well-nestedness on dependency trees has been recently shown to give a good fit with empirical linguistic data.
We present a reformulation of this constraint using properties of nonprojective edges and show its formal relationship to level types of non-projective edges; we also derive a simple O(n 2 ) algorithm for checking well-nestedness.
1 Introduction
Dependency analysis of natural language has been gaining an ever increasing interest thanks to its applicability inmany tasks ofNLP—arecent example is the dependency parsing work of McDonald et al.(2005), which introduces an approach based on the searchformaximumspanning trees, capableofhandling non-projective structures naturally.
Inthiscontext,theissueofdelimitingdependency structures permissible in natural language grows in importance (see e.g.
Nivre (2006)).
We would like to point out that since neither syntactic structures in dependency treebanks, nor structures arising in dependency parsing need a priori fall into any formal subclass ofdependency trees, weneed means of describing anynon-projective structure.
1 1 The importance of such means is evident from the asymptotically negligible proportion of projective trees to all dependency trees.
(Unrestricted dep.
trees (i.e.
labelled rooted trees), KuhlmannandNivre(2006)compareseveralconstraints on dependency structures and among the considered ones find well-nestedness to be in good accordwithempiricaldata.
However,theydonotinclude leveltypes ofnon-projective edgesintroduced by Havelka (2005), which present another means of characterizing anynon-projective structureandhave interesting formal properties.
We link properties of non-projectiveedgesandtheirleveltypestotheconstraintofwell-nestednessandshowthattheyprovide amorefine-grained means capable ofcapturing it.
The paper is organized as follows: Sect.
2 contains formal preliminaries; Sect.
3and4review definitions and show the necessary properties of the constraint ofwell-nestedness andleveltypesofnonprojective edges; Sect.
5 presents the main results concerning the relationship between non-projective edges (and their level types) and well-nestedness.
2 Formalpreliminaries
To make the paper as self-contained as possible, we provideaconcisereferencewithdefinitionsandsimple properties used in subsequent sections.
Definition 1 A dependency tree is a triple (V,→,precedesequal), where V is a finite set of nodes, →a dependency relation onV,andprecedesequala total order onV.
Relation→models linguistic dependency, and so represents a directed, rooted tree on V.
There are many ways of characterizing rooted trees, we give hereacharacterization viathepropertiesof→: there isaroot r∈V suchthatr→ ∗ vforallv∈V andthere well-nested dep.
trees, and projective dep.
trees are counted by sequences A000169, A113882, and A006013 (offset 1), resp., intheOn-LineEncyclopedia of Sequences (Sloane,2007).) 61 isaunique edge p→v forall v∈V, vnegationslash= r.
Relation → ∗ is the reflexive transitive closure of → and is usually called subordination.
The following definitions allow us to formulate our results succinctly.
For each node i we define its level as the length of the path r → ∗ i; we denote it level i. The symmetrization ↔ = →∪→ −1 makesitpossible totalk about edges (pairs ofnodes i, j such that i → j) without explicitly specifying the parent (head etc.
i here) and the child (dependent etc.
j here); so → represents directed edges and ↔ undirected edges.
To retain the ability to talk about the direction of edges, we define Parent i↔j = braceleftbigg i if i→ j j if j→i andChild i↔j = braceleftbigg j if i→ j i if j→i . Our notation for rooted subtrees is Subtree i = {v∈ V | i→ ∗ v},Subtree i↔j = {v∈V |Parent i↔j → ∗ v}, andforancestors Anc i = {v∈V | v→ ∗ i},Anc i↔j = {v ∈V | v → ∗ Parent i↔j }.
To be able to talk concisely about the total order on nodes precedesequal, we defineopenandclosed intervals whoseendpointsneed not be in a prescribed order: (i, j) = {v ∈ V | min precedesequal {i, j} ≺v≺max precedesequal {i, j}} and [i, j] = {v∈V | min precedesequal {i, j} precedesequal vprecedesequalmax precedesequal {i, j}}, resp.
For any edge i↔ j we define its gap as follows Gap i↔j = {v∈ V | v∈ (i, j) & v /∈Subtree i↔j }.
An edge with an empty gap is projective, an edge whose gap is nonempty is non-projective.
(See e.g.
(Havelka, 2005) forthecharacterization ofprojectivity viaproperties ofedges and further references.) Property 2 Let a be a node and i ↔ j any edge disjoint from a.
Then i∈Subtree a ⇔ j∈Subtree a . PROOF.
From the assumption inegationslash= a negationslash= j it follows that i, j∈Subtree a ⇔Parent i↔j ∈Subtree a . Proposition 3 Let i↔ j, u↔v be disjoint edges.
(i) If u,v∈(i, j), then u∈Gap i↔j ⇔v∈Gap i↔j . (ii) If u∈Gap i↔j and v /∈Gap i↔j, then v /∈[i, j].
PROOF. (i) follows immediately from the definition of Gap i↔j and Property 2.
Toprove (ii), assume v∈ (i, j) and using (i)arrive at acontradiction.
3 Well-nestedness KuhlmannandNivre(2006)claimthattheconstraint of well-nestedness seems to approximate well dependency structures occurring innatural language.
Definition 4 A dependency tree T is ill-nested if there are disjoint subtrees T 1, T 2 of T and nodes x 1,y 1 ∈T 1 and x 2,y 2 ∈T 2 such that x 1 ∈(x 2,y 2 ) and x 2 ∈ (x 1,y 1 ).
A dependency tree T that is not illnested is well-nested.
2 It
is easy to express the constraint in terms of edges—it willprove crucial in Sect.
5. Theorem 5 A dependency tree T is ill-nested iff there are edges i 1 ↔ j 1, i 2 ↔ j 2 in disjoint subtrees T 1, T 2 of T, resp., such that i 1 ∈(i 2, j 2 ), i 2 ∈(i 1, j 1 ).
PROOF. Direction⇐isobvious.
Direction ⇒: Let r i be the root of T i . To find i 1 ↔ j 1,firstsuppose that r 1 ∈(x 2,y 2 ).
Consider the first edge v k →v k+1 on the downward path v 0 = r 1, v 1,...,v m = y 1, m > 0, such that v k ∈ (x 2,y 2 ) and v k+1 /∈[x 2,y 2 ].
If r 1 /∈[x 2,y 2 ],consider thefirstedge v k+1 →v k on the upward path v 0 = x 1,v 1,...,v n = r 1, n > 0, such that v k ∈ (x 2,y 2 ) and v k+1 /∈ [x 2,y 2 ].
Letusdenote i 1 = v k and j 1 = v k+1,andpossibly rename x 2,y 2 so that i 1 ∈ (x 2,y 2 ) and x 2 ∈ (i 1, j 1 ).
To find i 2 ↔ j 2 such that i 1 ∈ (i 2, j 2 ), i 2 ∈ (i 1, j 1 ), proceed similarly as above.
Obviously, edges i 1 ↔ j 1, i 2 ↔ j 2 are indisjoint subtrees.
4 Leveltypes
ofnon-projective edges Level types of non-projective edges allow their structuralclassificationwithinterestingformalproperties.
They were introduced by Havelka (2005), whopresents them in moredetail.
Definition 6 The level type (or just type) of a nonprojective edge i↔ j is defined as follows Type i↔j = level Child i↔j −min n∈Gap i↔j level n . The type of an edge is the distance of its child node and a node in its gap closest to the root (distance here means difference in levels)—for sample configurations see Figure 1 3 . Note that there may be more than one node witnessing an edge’s type.
Thetype ofanedge isnot bounded—it cantake any integer value (depending on theheight of atree).
Our definition of level type of non-projective edges extends naturally the original definition im2 Theoriginaldefinitionrequiresx 1 ≺x 2 ≺y 1 ≺y 2,however ourequivalentformulationleadstoshortertheoremsandproofs.
3 We
adopt the following convention: nodes are drawn topdown according to their increasing level, with nodes on the same level on the same horizontal line; nodes are drawn from left to right according to the total order on nodes; edges are drawn assolidlines, pathsas dottedcurves.
Weassume that no node onapath liesinthespanof an edgethepath crosses.
62 positivetype type0 negativetype Figure 1: Samplenon-projective edges plicit in(Havelka, 2005), where classes corresponding topositive, zero and negative types are defined.
Wenowshowarelationshipbetweenedgesofcertain types that will allow us to derive a relationship between non-projective edges and well-nestedness.
Theorem 7 For any non-projective edge i↔ j in a dependency tree T with Type i↔j ≤0 (< 0) there is a non-projective edge v→u in T with Type u↔v ≥0 (> 0) such that u∈argmin n∈Gap i↔j level n and either i∈Gap u↔v, or j∈Gap u↔v . PROOF.
Let u be any node in argmin n∈Gap i↔j level n . From the assumption Type i↔j ≤0 node u has a parent v /∈ Gap i↔j . Obviously i ↔ j, v → u are disjoint, thus from Proposition 3wehave v /∈[i, j], and so either i ∈ (u,v), or j ∈ (u,v).
Since level v ≥ level Parent i↔j,wehavethatParent i↔j /∈Subtree v,and so either i∈Gap u↔v, or j ∈Gap u↔v . Finally from Type i↔j ≤0 (< 0) we get level u −level Child i↔j ≥ 0 (> 0), hence Type u↔v ≥0 (> 0).
5 Well-nestedness &non-projectiveedges We give characterizations of well-nestedness solely in terms of properties of non-projective edges and show some applications.
5.1 Characterization
usingpairsofedges First we give a characterization of pairs of edges in Theorem 5in termsof their gaps.
Theorem 8 Let i 1 ↔ j 1, i 2 ↔ j 2 be two edges in a dependency tree T.
They are in disjoint subtrees T 1, T 2, resp., and satisfy i 1 ∈ (i 2, j 2 ), i 2 ∈ (i 1, j 1 ) iff the following condition holds (inp) i 1 ∈Gap i 2 ↔j 2 & i 2 ∈Gap i 1 ↔j 1 . PROOF.
Direction ⇐: Root T k in Parent i k ↔j k, k = 1,2.
Condition (inp) obviously implies i 1 ∈ (i 2, j 2 ), i 2 ∈(i 1, j 1 ),whichinturnimpliesthatedgesi 1 ↔ j 1, i 2 ↔ j 2 are disjoint.
From Property 2 we get that both Parent i 2 ↔j 2 /∈ Subtree i 1 ↔j 1 and Parent i 1 ↔j 1 /∈ Subtree i 2 ↔j 2, hence subtrees T 1, T 2 are disjoint.
Direction ⇒: Let us consider the edge i 2 ↔ j 2 and node i 1 . Since T 1 is disjoint from T 2, we have that i 1 /∈Subtree i 2 ↔j 2, and therefore i 1 ∈Gap i 2 ↔j 2 . Theproof that i 2 ∈Gap i 1 ↔j 1 is analogous.
Condition (inp) allows us to talk about pairs of edges causing ill-nestedness and so characterize well-nestedness using properties of pairs of edges.
Definition 9 We say that any two non-projective edges i 1 ↔ j 1, i 2 ↔ j 2 in a dependency tree T satisfying condition (inp) form an ill-nested pair of edges.
Corollary10 A dependency tree T is ill-nested iff it contains an ill-nested pair of edges.
PROOF. Followsfrom Theorems 5and 8.
5.2 Sufficientconditionforill-nestedness TheresultsofSection4andprevioussubsectiongive the following relationship between types of nonprojective edges and well-nestedness.
Theorem 11 If a dependency tree contains a nonproj.
edge of nonpositive type, then it is ill-nested.
PROOF. Followsfrom Theorems 7and 10.
We see that types of non-projective edges and well-nestedness share a common ground; however, thestatementofTheorem11cannotbestrengthened to equivalence (it is easy to see that also two edges ofpositive type can satisfy (inp)).
5.3 Characterization
usingsingleedges Nowweshowthatwell-nestedness canbecharacterized in terms of properties of single non-projective edges only.
We define the ill-nested set of an edge and show that it gives the desired characterization.
Definition 12 The ill-nested set of any edge i↔ j isdefined asfollows In i↔j = {u↔v | u∈Gap i↔j & v /∈[i, j] & u,v /∈Anc i↔j } . The next proposition exposes the relationship of edges in In i↔j to the gapof i↔ j.
Proposition13 Forany edge i↔ j In i↔j = {u↔v| u∈Gap i↔j & v /∈Gap i↔j & u,v /∈Anc i↔j }.
PROOF. The inclusion ⊆is obvious.
The inclusion ⊇ follows from Proposition 3 (u∈Gap i↔j and v /∈ Anc i↔j implythatedges i↔ j,u↔v aredisjoint).
63 We are ready to formulate the main result of this section, which gives as corollary a characterization ofwell-nestedness using properties ofsingle edges.
Theorem 14 Let i↔ j be an edge in a dependency tree T.
The edges that form an ill-nested pair with the edge i↔ j are exactly the edges in In i↔j . PROOF.
Direction⇒: Letu↔vbeanedgeforming anill-nestedpairwiththeedgei↔ j,i.e.i∈Gap u↔v andu∈Gap i↔j . Thisimpliesi∈(u,v) andu∈(i, j), which immediately gives v /∈ [i, j].
Supposing u∈ Anc i↔j or v∈Anc i↔j we get i∈Subtree u↔v, which is in contradiction with i ∈ Gap u↔v, and therefore u,v /∈Anc i↔j . Hence u↔v∈In i↔j . Direction⇐: Let u↔v∈In i↔j (i.e.
u∈Gap i↔j, v /∈ [i, j], and u,v /∈ Anc i↔j ; without loss of generality assume i ∈ (u,v)).
From the assumptions u ∈ Gap i↔j and v /∈ [i, j] we get that edges i ↔ j, u↔v are disjoint.
Using Property 2, from the assumption u,v /∈Anc i↔j we get i /∈Subtree u↔v, thus i∈Gap u↔v . Hence i↔ j, u↔v satisfy (inp).
Corollary 15 A dependency tree T is ill-nested iff In i↔j negationslash= /0 for some non-projective edge i↔ j in T.
PROOF. Followsfrom Theorems 8and 14.
5.4 Checkingwell-nestedness Our characterization of well-nestedness gives also a novel way of checking it.
Here is a pseudocode of analgorithm forfullydeterminingallill-nestedsets: 1: forall edges i↔ j do 2: forall edges u↔v s.t. u∈(i, j) do 3: check u↔v∈In i↔j Its time complexity is obviously O(n 2 ), since the check on line 3 can be implemented so as to take constant time (by precompuing → ∗, which can be done in O(n 2 ) time).
The bound is the same as for the reported algorithms for checking wellnestedness (Möhl, 2006).
However, the following theorem allows wellnestedness checking tobelinearforprojective trees, tobe faster forrandom input, and to remain O(n 2 ).
Theorem16 In any ill-nested pair of edges, at least one ofthe edges is ofnonnegative type (witnessed by an end-point of the other edge).
PROOF. Let i 1 ↔ j 1, i 2 ↔ j 2 satisfy (inp).
Let us suppose that level Child i 1 ↔j 1 ≥level Child i 2 ↔j 2 . Since level Child u↔v ≥ level u for any edge u ↔ v, we have that level Child i 1 ↔j 1 ≥ level i 2, and hence Type i 1 ↔j 1 ≥ 0.
If level Child i 1 ↔j 1 ≤level Child i 2 ↔j 2, it is analogously proved that i 2 ↔ j 2 is ofnonnegative type.
Havelka (2005) presents a linear algorithm for findingallnon-projectiveedgesofnonnegativetype.
Thus well-nestedness can be checked as follows: first find all edges of nonnegative type, and then check their ill-nested sets for non-emptiness.
Computing → ∗ on demand for subtrees of the processed edges,wepreserveworst-casequadraticcomplexity.
6 Conclusion
We have presented new formal results linking propertiesofnon-projectiveedgesandtheirleveltypesto well-nestedness.
Thisworkextendsthecurrentbody ofresearch onnon-projective dependency structures in natural language.
In particular, we offer new insightsintoformalpropertiesofnon-projective edges that, if possible, both provide adequate means for linguistic description and at the same time are useful asfeatures inmachine-learning approaches.
Acknowledgement This work was supported by projects 1ET201120505 of the Ministry of Education of the Czech Republic and 374/2005/AINF/MFFof Grant Agency ofCharles University.
References Jiˇrí Havelka.
2005. Projectivity in Totally Ordered Rooted Trees: An Alternative Definition of Projectivity and Optimal Algorithms for Detecting Non-Projective Edges and Projectivizing Totally Ordered Rooted Trees.
Prague Bulletin of Mathematical Linguistics,84:13–30.
Marco Kuhlmann and Joakim Nivre.
2006. Mildly Non-Projective Dependency Structures.
In Proceedings of COLING/ACL, pages507–514.
Ryan McDonald, Fernando Pereira, Kiril Ribarov, and Jan Hajiˇc.
2005. Non-Projective Dependency Parsing using Spanning Tree Algorithms.
In Proceedings of HLT/EMNLP, pages523–530.
Mathias Möhl.
2006. Drawings as models of syntactic structure: Theory and algorithms.
Diploma thesis, Programming Systems Lab, Universität des Saarlandes,Saarbrücken.
Joakim Nivre.
2006. Constraints on Non-Projective Dependency Parsing.
In Proc.
of EACL,pages73–80.
Neil J.
A. Sloane.
2007. On-Line Encyclopedia of Integer Sequences.
Published electronically at www.research.att.com/~njas/sequences/ .


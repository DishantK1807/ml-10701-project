DISCONTINUITY AND THE LAMBEK @ALCULUS Mark Hepple DeI)artment of Computer Science, University of Shellield, lLegents Court, Portohello Street, Sheflield, UK.
gmai\]: hepple0dcs, sheffield.at.uk Introduction This paper is concerned with tile treatment of discontinuous constituency within Categorial Grammar.
In particular, I address the problem of providing an adequate formalisation of categorial commctives l)rol)osed by Moortgat (1988), which are useful for handling certain forms of diseontimmus eonstitnency, l)espite some interesting proposals, a satisfactory logic for these emnectives has so far remained dnsive.
I will provide such a h)gie, using an approach that falls within the general framework of labelled deductive systems (Gabbay, 1991), employing novel methods for reasoning ahout linear order in resource nsage.
The approach is illusl;rated by linguistic al}plications for extraction, pied-piping and quanti\[ieation.
The Lambek calctflus Our general fran,ework is the associative I,ambelc calculus (L: l,mnbek, 1958), a system which falls within the class of formalisms known as Categorial Grammars.
The set of types is freely generated firom a set of primitiw; (atomic) types (e.g.
{s, np ....
}), using binary infix el)craters \, /, ..
The 'meaning' of these connectives in L is fixed hy a senlanties for the logic, based on a (se,nigroup)algehra of strings (Z:,.), i.e. where • is an associative, notl-coulmtltative binary operator, with two-sided identity e, and E is the set Of non-eHlpty (-7 t:g) strings over some vocabulary.
An interpretation funcl;ion \[\[~ assigns some subset of Z; to each type, satisfying the conditions be.low for conlplex types and gyp(', sequence.s.
A type comhi-.
liar/oil X 1 .....
Xtz --> X0 h.ohls in a model ((£,.), \[\[\]l ), if {\[x~ .....,x.\]\]_cl\[Xol\], a.d is ~lid if it is true in all models.
'1'here are several formulations of L that all realise this same meaning for the connectives.t ~x,v\]\] = {.~,v < z.
I .~ e \[\[xll A ~ < {\[v\]\] } \[\[X/Y\]J = {,: e Z; I V; ~: \[~Y~.
:,:.y e ~\[X\]\] } I\[vxx\]\] -{~.
</: I V,,~ e IIY\]\].,>,.
e gx\]}} \[\[x~ ..... x,,\]} = {:,:~ ......... ec I< e \[Ix\]~\] A,.,A ....
C EX,,I\]} \]The alternatlve formulations include e.g. seqnent (l,aml}ek 1958), proof net (l~.oor(la 199:1 ), and natural deduct.ion systems (Morrill e! aL 1990, Barry eg al.
1991). Alternative formulations carry different advantages, e.g. natural dcductlon is well suil.cd for lh,guisl.ic prcsental.ion, whereas proof nets haw~ benefits for automated theorem proving.
l)iscontinuous type constructors The I,ambek calculus is a purely concatenative system: where any two types are combined, the string of the result is arrived at by concatenating the strings of the types combined.
This point is illustrated graphically in (la,b), for the Lambek tractors, where (following Moortgat, 1991) each triangle represents a result string, and unshaded and shaded areas represent fnnetor and argutlre.nt stril/gs, respectively.
(1) (a) X/Y (b) YXX (c) XIY (d) XIY Y Y Y y l'rclixa~ion Suffixal.ion Extraction Infixation Various linguistic phenomena, however, suggest the existence of discontinous constituency, i.e. situations the result string from combining two constituents is not produced by concatenating the component strings.
(See e.g.
Bitch, 1981).
Moortgat (1988) suggests augmen£ing \]T, with two discontinuous type construct, ors.
An exh'aclion fimctor X\]Y is one whose argument corresponds to a non-peripheral (or more precisely, nor necessaribj peripheral) suhstring of the result of con> binaries, as it, (lc).
An infixation fimetor XIY itself corresponds to a non-l)eril)heral substring of the result of combination, as in (ld).
Given these intuitiw'~ characterisations, two options arise for the meaning of each comlecLive as to whether the point of insertion of one striug into the other is free (universal) for lixed (existential).
In this paper, I will focus on the existential variants of the commctives, which appear to he the most linguistically useful, and whose interpretive conditions arc as follows: Previous proposals F, ach connective should have two inference rules: a rule of proof (showing how to derive a type containing the connective), and it rule of nse (showing how to employ such a type).
This indicates a possible eight inference rules that we might hope to state (i.e.
proof/use x universal/existential x infixation/extraction).
V~ri~ ous attempts have I~eeu made to provide a logic for tile discoutiuuous type constructors, but all have proved ullsu('cessflll or unsatisI'actory in some way or another.
1235 Moortgat (1988), for example, uses an ordered sequent calculus framework, which allows only two of the possible eight rules to be stated: a rule of proof for existential T, and a rule of nse for universal ~.
Moortgat (1.991) nses a proof method in which types are not ordered in proof representations, where linear order constraints and consequences are instead handled using a system of string labelling, i.e. types are associated with string terms, which are explicitly manipulated by inference rules.
This approach allows two further rules to be stated, but the four expressible rules are distribnted one per connective, i.e. a complete logic is not given for even any one connective.
As Versmissen (1991) notes, Moortgat's string label system does not allow the recording of a specific position for inserting one string into another, as would seem to be required.
Morrill & Solias (1993) avoid this latter problem by augmenting the string \]al~elling algebra with a nonassocia(,ive pairing operator (., .), allowing labels such as {st, s2), indicating an insertion point in between sl and s2.
'lPhis system allows versions of T and ~ operators to be specified, hut ones whose interpretive definitions differ from Moortgat's.
The non-associativity of pairing gives rise to limited flexibility for the system in terms of the type combinations that can be derived, and even the types that can be constructed, e.g. no flmctor (X~Y)/Z, where a \] argument is not the first sought, is allowed.
Labelled deduction &: Lambek calculus I next develop a formulation of L which can be e×tended to allow for the (existential) discontinuity connectives.
Our starting point is a lambda term semantics for implicational L due to Bnszkowski (1987), ba.sed on the well kuown Cnrry-Howard interpretal;ion of proofs (Iloward, 1969)3 This uses a bidirectional variant of the lambda calculus whose basic terms are directionally typed variables.
If t is a term of type Y\X (resp.
X/Y), and u one of type Y, then (at) t (resp.
(tu)") is a term of type X.
If v is a variable of type Y, and t a term of type X, then klv.t (resp.
2"v.t) is a term of type Y\X (resp.
X/Y). A semantics for implicational L is given by the class of terms which 2Under the Curry-lloward interpretation (lloward, 1969), logical formulas are regarded as types of expressions in typed lalnbda calculus, with atomic formulas corresponding to basic types, and a formula A--~B to the type of functions from A to tl.
It is dmnonstrable that the set of formulas for which there exists stone correspondingly typed lambda term is precisely the theorems of the impfieatlonal fragment of intuitlonistlc logic.
Thus, typed lambda calculus provides a s emantlcs for implicational intuitlonlstic logic, i.e. an independent, characterlsation of 'valid deductlon',just as the algebralc semantics of L provides an independent characterisatlon of validity for that system.
Semantics for vm'ious other logics can be given in terms of classes of typed lambda terms, i.e. subsets of the typed lambda terms which satisfy certain stated criteria, van Benthem (1983) provides a lambda semantics for the system LP, a eonmmtative variant of L.
Wansing (1990) provides lambda semantics for a range of subloglcs of intultlonistie logic.
The Curry-tloward interpretation so permeates categorlal work that the terms "formula" and "type" have become almost interchangeable.
Note that I have slightly modified BuszkowsM's notation.
satisfy the conditions: (lll) each subterm contains a flee variable, (132) no subterm contains > 1 free occurrenee of any variable, (133) each A t (resp.)')? binds the leftmost (resp.
rightmost) free variable in its scope.
This semantics can be used in formulating (implicationM) L as a labelled deductive system (LDS: Gabbay, 1991).
a LM)els are terms of the directionM lambdasystern, and propagation of labels is via application and abstraction in the standard manner.
Natural deduction rules labelled in this way are as follows: (2) a/B:a B:b \[B:v\] /E A:a a : (~b) ~ --/I A/B : X:v.a B:b B\A :(~ \[B :v\] A : (b~) l \E~ ___A :a \~ /3\A :,~v.a We can eusure that only deductions appropriate to (implicational) L are made by requiring that the label that results with any inference is a term satisfying Buszkowski's three conditions.
To facilitate testing this requirement, I use a flmction E, which maps from label terms to the string of their free variables occurring in the left-right order that follows from type directionality (giving what I call a marker term).
A notion of 'string equivalence' ( ~) for marker terms is definecl by the axioms: (-~.1) *,(>z)±(x.y).z (2) .-~..
(-.3) .~-x.c E is recursively specified by the following clauses (where PV returns the set of fi'ee variables in a term), but it is defined for all and only those terms that satisfy Bnszkowski's three conditions.
4 Thus, we can ensure correct deduction by requiring of the label that results with each inference that there exists some marker term m such that )_'(a) = m.
(~;.I) }2(v) = v where v E Vats (r.~) ~((~b) ~) = ~((,).~(1,) where l,'v((0 n lW(b) = 0 (~.a) ~((~,~)~) = ~(.).~(~) where FV(a) ffl l!'V(b) = 13 (~.4) ~(~%.,) =/3 where l~'V(2~)..
¢ O, ~(a)=' v.~ (~.~) >~(Xv)..
= 9 where l"V(~"v.( 0 ¢ ~, ~(a) p,v The followiug proofs illustrate this LDS (nsing t~m 3111 labelled deduction, each fornulla is associated with a label, which records information of the use of resources (i.e.
assmnptions) in proving that formula.
Inference rules indicate how labels are propagated, and may have side conditions which refer to labels, using the information recorded to ensure col recL infcrencing.
Evidently, the Moortgat (1991) and Morrill & Solias (1993) formalisms arc LDSs.
4Condition B2 is enforced by the requirement on the application cases of E.
Conditions B1 and B3 are enforced by the first and second rcquirement on the ahstraction cases of E, respectively.
1236 as shorthand for E(t)-m, to indicate a significant niarker equivalence): x/v:~.
Y/Z:~ \[Z:z\] /i,: Y : (yz)" /i,; >: x: (~(vO")",+ ~.v.~ x/z: yz.(~(vzy)" X/(Y/(Z\Y)) : m \[Z:z\] \[Z\Y:y\] \1;: r, Y : (z~) ~ ~ z.y Y/(z\v) : a';>(<D ~ /~ /1," ~: x:(~ x';>(zv)|) " /I .....
XlZ.. x"~.(~ X',v.(~v)|) " This system can be extended to cover product using the inference rules (3), and the additional )2 elanses shown following (with the obvious implicit extensions of the directional lambda system, and of Buszkowski's semantics).
Labelling of \[.I\] inferences is via pairing, and that of \[,.El inferences llses all operator ada.pged from \]lenton el al, (1992), where a term \[b/v.w\].a implicitly represents tim suhsl, itiitiol| of b for v+w iii a.
This rule is nsed hi (4).
(a) D:,\]\[c:,I,\] a:, i~:~,1 A : a t3.0 : b AIB : (a, b) iE (s.u) >:((<,, O) = ::(a).>~(~,) where l!'V(a) rl FV(b) :: 0 07.7) >_,(\[b/v.w\].a) = fll')',(b)"fl2 whe,.~ 1,'v((,)r: ~.'vo) = 0 (4) x/v/z:,: \[z:q \[v:,v\] z.v:~ / E XlV : (~,)' x: ((*'z)"vy ~ .... v • I') x ..
\[wl~.v\].((.~O"v)' 5+ x.~,, x/(z.v) : ~'~.(\[,,,/~.v\].((=)":D ~)/: Labelled deduction gz discontinuity '\]'his al)proach can be exi;eilded l;o allow for exist.enl, ial i a.nd,\[.
These conneci;iw;s have sLatidard iinl)licational inference rules, |lsing additional distinguished operators for labelling (with superscript e for extraction and i tbr lull×at|on): (5) AtI~:~, ~:b \[1~:~} k : (oby -t* A'~B :,Vv.a AIB:a B:b \[B:u\] A:(ab) i \]E A:a ----ll A \[ B :,\iv.c, (lens|tier /irsl;ly how >; Iiuist; I)e extended for the abstract.ion cases of |;he new introduction rules.
For a \[II\] terin such as Aev.a, l.\]|e relevant E case allows v to appear non-peripherally in the marker term of a.
For a \[Ill term such as,~v.a, v is allowed to he discontinuous in the marker of a (we shall see shortly how this is possible), bug requires its components to appear peripherally.
where ~W(.\%)..
¢ ~, ~:(a)-',q~.v.,e~ To allow for the new application operators, the marker system must be extended.
Recall that the linear order information implicit in lahcls is projected onto the left,right dimension in markers.
With 1" and 1, however, |lie possibility exists that either fiuletor or argument is discontirmous in the result of their combination.
For strings x G \[\[XTY\]\] and y G \[\[Y\]~, for example, we know there is some way of wrapping x around y to give a resnll, in X, but we do no~ in general know how the division of .v should be made.
This problem of uncertainly ix handled by using operators L and R, where 1,(rn) and It(m)represent indefinile but complemen~ lary left and right suhcomponents of the marker term m.
(L arlcl 1 are not projection time|ions).
This idea of the significance of :1, and II, in given content via the additional axiom ( =' .d), which allows that if the eomplemenl;ary left; and right snhcomponents of a marker appear in,q)propl:iate lel't-rightjuxtaposition, then the l~larker~s resotirees Irmy be treated as continuous.
5 ( = .d) I,(a:).\]{,(x) :: :c The remainii,g clauses for L; then are: (>2.10) >:((,.t,)' 0 : V~:(~O).~(b).lt(~(a)) wh..,.o l,'v().
n l?V(~) = 0 (::.l I) ~((<,~y) = l,(>~(:)).~(,).l~(~(~)) where I~V(~)n vv(b) = Some example deriw~tions follow: x/v:~.
\[v:,v\] x/v:,~\[v:v\] /1.', ~: \]1,; z x: (~:,v)" ......,~.~ x: 0,~)" ...... u t: JA X1Y :,\%.(~:y)" X IY ''.,~iy.(zy) r \[xlv:×\] Y:y \[xtv:x\] Y:y If': IE x: (<D' x: (~y)~ l~,U Xl(X IY):,\q,:.(z.~D ~' X I(XIY): A%'.(:vy)' (X/Y)lZ:x \[Z:z\] \[Y:y\] l \]" x/Y: (~:~)~ x: ((:~.~yy)",~, J:&Od~(~).v I| )\ xtz:,\'~,.((~.~V.v)' I,(x).aO).v ~..v /I (xlz)/v,\>v~.((:,:~)tD" 5rl'his axiom may I)e seen as stating the lhnlt of what cml be said cmtccrldilg 'uncerl.ainly divided' resources, i.e. only where tile unccrt.aint.y is elimina.cd by juxtaposition can the l,,t oper~k\[ ol's })e ielllov(!(Ii iiiitkii/~ r bOll/(l o\[.herwise qiidden ~ l'esource visible.
I,'m'ther reasonable axioms (not in practice required here) are l,(e) -::e and l/(e) ~ e, i.e.
|.he only possible left and right subconlponents of ml 'mnpty' marker are likewise empty.
1237 x/Y:~ \[YlZ:v\] \[z:~\] Y : (yz) ~ x: (~(w)q" ~ =.L(v).~.R(y) xtz :~.(~(v,)~) ~ ~ ~.~ /i (xtz)/(v,z): ::v~o~.(,4vz)*y Word order and NL semantics Labels encode both the functional structure and linear order information of proofs, and hence are used in identifying both the NL semantic and word order consequences of combinations.
Label terms, however, encode distinctions not needed for NL semantics, but can easily be simplified to terms involving only a single abstraetor (A) and with application notated by simple left-right juxtaposition, e.g. x~A%.(~(w)")' ~ ~z~.((vz)~).
To determine the linear order consequences of a proof with label a, we might seek a marker m consisting only of concatenated variables, where E(a) m.
These variables would be the labels of the proof's undischarged assumptions, and their order in m would provide an order for the types combined under the proof.
Alternatively, for linguistic derivatlons, we mlght: substitute lexical string atoms in place of variables, and seeker a marker consisting only of concatenated string atoms, i.e. a word string.
This method is adeqnate for basic L, but problems potentially arise in relation to the discontinuity connectives.
Consider the transformation X/Y => Xi"Y.
The connective of the result type does not record all the linear order import of the input type's connective, and neither consequently will the application label operator for a subsequent \[\]E\].
Itowever, fl-normalisation yields a simpler label term whose operators record the linear order information originally encoded in the connectives of the types combined.
For exarnple, the following proof includes a subderivation of X/Y =~ X\]Y.
The overall proof term does not simply order the proof's assumptions under )3 (giving marker L(z).y.l/,(x)),' but its t-normal form (xy)" does (giving x.y).
X/Y:\ \[V:v\] Y:y /l,: x :(~)~ II XIY : ):v.(~:v) r x: ((~%.(~),) ~:)~ Of course, normalisation can only bring out ordering information that is implicit in the types combined.
1:'or example, the combination XTY:~,Y:y => X:(xy) ~ is a, theorem, but the label (xy) ~ does not simply of der x and y.
However, if we require that lexical subcategorisation is stated only using the standard Lambek connectives, then adequate ordering information will always be encoded in labels to allow simple ordering for linguistic derivations.
Alternatively, we could allow discontinuity connectives to be used in stating lexical subcategorisation, and farther allow that lexical types be associated with complex sh'ing terms, constrncted using label operators, which encode the requisite ordering information.
For example, a word w with lexical type XTY might have a string term,Vv.(wv)", which does encode the relative ordering of w and its argument.
A more radical idea is that deduction be made over lexical types together with their (possibly complex) lexical string terms, and that the testing of side conditions on inferences be done on the /3-normal form of the end label, so that the implicit ordering information of the lexical string term is 'brought out', extending proof possibilities.
Then, tile lexical units of the approach are in effect partial proofs or derivationsfi Such a change would greatly extend the power of tile approach.
(We shall meet a linguistic usage for this extension shortly).
Linguistic applications We shall next briefly consider some linguistic uses of the discontinuity connectives in the new approach.
The most obvkms role for \] is in handling extraction (hence its name).
Adapting a standard approach, a relative pronoun might have type rel/(sTnp), i.e. giving a relative clause (rel) if combined with s\]np (a 'sentence missinga NP somewhere').
Note that standard L allows only types rel/(s/np) and rel/(np\s), which are appropriate for extraction from, respectively, right and left peripheral positions only.
For example, whom Mary considers _ foolish can be derived under the following proof.
The atom string (6a) results via substitution of lexical string terms in the proof label, and )3.
Substitntion of lexical semantics and deletion of directional distinctions gives (6b).
(wl .....
) ( ...... .y) (considers) (foolish) rel/(slnp) ...... p:~: ((nl>\S)/adi)/np:y \[np:u\] adj:z (nl~\S)/adj : (Vu)" /S,,p\s: ((v,,)'~)" s: (x((!:O"~y) * sJ,,p : a<~,,.(~,( (~:,)' ~)" ) i T~ /E rel: (,~ .\°,.(~((V,,)~)")b ~ (6) a.
whom.mm'y.considers.foolish b.
whom' (,~u.considers / u foolish I mary I) Moortgat (1991) suggests that a (for example) sententially scoped NP quantifier could be typed s~(s~np), if inlixation and extraction could be linked so that infixation wan to the position of the 'missing np' of sTnp.
r Such linkage does not follow from tile definitions of the connectives but can be implemented in the 6Thls idea invi~.es cmnparlsons to formalisms such as lea:iealised tree adjoining 9':aramar (see Joshi et al, 1991), where the basic lexical and derivatiomfl units are partial phrase structure trees associated with h:xical items.
7In the approach of Morrill & Solias (1993) such linkage follows automatically given the int~erpretive definitions of their connectives.
Moorgat (1990,1991) proposes special purpose quantification I,ype const.rnetors. 1238 present approach by assigning a complex lexical string term, as in the lexical entry (<'rYeE,STmNG,SEM>): <st(sTnp), A,,.,, ~,°so,,~eone, someone'> Such a string term would result under a 'type raising' transformation sud, as: np => s~(s\[np).
'Phe example goh.u gave someone money can be derived am follows, with string and semantic results in (7).
(~ot~,~on,,) (john) (g,~) (money) stCslm,):q,w:~ ((m,\~)lm,)/m,:v \[m,:~\] m,:~ (np\s)/nl) : (yv) r /F m,\~: ((w)~) " \l.: s: (~((yv)'~)')' II sit, p: Z~v.(x((yv)~ z)") ~ s: (q,\%.(,~((wl"~)U q ~ (7) a.
john.gave.someone.money b.
sorneone' (Av.gave' v money' john') Tllere is a sense in which this view of quantifiers seems very natural.
Quantifiers behave distributionally like simple NPs, but semantically are of a higher type.
Iaising the string component under tile transformation np => s.\[(slnp) resolves this incompatibility without imposing additional word order constraints.
This aeCOllnt as stated does not allow for multiple quantitication, 8 bu~, would if lexical string terms were l;reated as part;\el proofs used in assembling larger deriwfl, ions, as suggested in the previous section.
In interesting test case, combining both movement and scope issues, arises with pied piping construcl, ions, where a whdtem moving to clause initial position is accompanied by (or 'pied pipes') some larger phrase that conl, ains it, as in e.g. the relative clause to whom John spoke, where the PP to whom is fronted.
Following Morrill & Sol\as (1993), and ultimately Morrill (1992), a treatment of pied piping can be given using \]" and 1.
Again, linkage of in\[ixation and extraction is achieved via complex lexical string assignmont.
A l)P lfied-piping relative t~rono,m might b(' (rel/(s\]pp))l(l)plnp) allowing it to infix to a NP I,Osit\on within a Pl', giving a functor rel/(s\]pp), i.e. which prefixes to a 'sentence missing I'P' to give a relative clause.
Ilence, for example, lo whom wonld have type rel/(slpp), and so Io whom,/oh~z spoke is ~ relative clause.
The lexical semantics of whom will ensure that the resulting meaning is eqnivalent to the nonq)ied piping w~riant whom John spoke to.
References Bach, 1",.
1981. 'l)iscontinuons Constituents in Generalized Categorial Grmmnars'.
N RLS, 11, ppl12.
Barry, G., llepple, M., l,eslie, N.
and Morrill, G.
1991. 'Proof ligures and structm:al operators for eategorial 8For example, we might seek Lo ex~.cnd the ln'oof just given by abstracting over z in a \[ l I\] inference, as a basis for adding in a flu'thor quantifier, but the currm~ proof label would not license such an inference, due to the presence of the 0 i application.
grammar'. Ill P'lvc.
of t3ACL-5, Berlin.
vm, l~cnthcm, 3.
1983. 'The semantics of variety in Catcgorial Grammar'.
R.cport 83-29, Dept.
of Mathmnatics, Simon Fraser University.
Also in W.
Buszkowski, W.
Marciszewski an<l J.
van llenthem (Eds), Catcgorial Grammar, Vol.
25, Linguistic and Mtcrary Studies ill Eastern F, urope, John Benjamins.
1988. Benton, N., lfierman, G., dc Paiva, V.
& tIyland, M.
1992, "Ihrm a~ssignment for intuitionistic linear logic'.
Tedmical Report, Cambridge University Computer Laboratory.
Buszkowski, W.
1987. 'The Logic of Types'.
In J.
Srzednicki (Ed), Initiatives iu Logic, Martinns Nijhoff Publishers, l)ordrecht.
Gabbay, 1).
1991. Labelled deduclivc syslems.
Draft 1991.
(to appear: Oxford University Press).
11epple, M.
1990. The Grammar and Processing of Orde'r and Dependency: A Categorial Approach.
Ph.1). dissertation, (~entre for Cognitive Science, University of l!klinbnrgh.
l\[oward, W.A. 1!)69.
'The formulae-as-types notion of construction'.
In ./.l.
\[\[indley & J.P.
Seldin (Eds), 7b II.lL Cuv~'y, Essays on (2ombiuatory Logic, Lambda Calculus and l,brmalism, AP, 1980.
Josh\, A.K., Vijay-Shanker, K.
& Vgeir, D.
1991. 'The convergence, of mihtly context-sensitive formalisms'.
In P.
Sells, S.
Shiebor & T.
Wasow (Eds).
l,'oundaZioTzal issues in Nal'~lral Lauguage Processing.
M1T I}ress, Canll)ridge MA.
Lambeth, J.
1958. "t'he mathelnatics of sentence structure'.
Americau Mathcmalical Monlhly, 65.
Moortgat, M.
1988. Calegorial Investigations: Logical and Liuguislic Aspects of lhe Lambck Calculus, For\s, Dordrecht.
Moortgat, M.
1990. 'The quantification calculus'.
In lIendriks, 1\[.
and Moortgat, M.
(Eds), Theory of l;'le~:ible Inlerprelalion.
Esprit DYANA Deliverable R.I.2.A, lnstitul;e for l,anguage, l,ogic and Information, Univ<~rsity of Amsterdam.
Moortgat, C.
l!)91. 'Generalized Quantification and Discontinuous type constructors'.
To appear: W.
SijI;sm~t & A.
van I lorck (li',ds) Poor.
Tilbury Sympoo slum on I)iscoTdinuolts Uouslilucncy.
l)e Gruyter.
Morrill, (..
1992. 'Cat;egorial l)'ormalisation of ILelario\sat\on: l'ied Piping, Islands and Extraction Sites'.
Research l(.eport, l)ept, de Lhmguatges i Sistemes Informgtties, Universitat Politdcniea de Catalunya.
Morrill, G.
& Sol\as, M.T. 1993.
"lhlples, I)iscontinuity, and Clapping in Categorial Grammar'.
In: Proc.
of £'ACI; 6, Utrecht.
t/x)orda., 1).
1991. lgesource Logics: Proof Theorelical hzves~igalions.
Ph.l). Dissertation, Amsterdam.
Versmissen, I£.
1991. 'l)iscontinuous type construetots ill ()aLegorial (\]ranlillar'.
ins. Or\]'S, Universiteit Utrecht, Netherlands.
Wansing, W.
1990. q!'ormulas-as-types for a hierarchy of sublogies of Intuition\stir Propositional Logic'.
ms. lnstitnt fiir Philosol)hie, Freie Universitgt Berlin. 1239


Proceedings of the NAACL HLT 2010 Workshop on Computational Linguistics and Writing, pages 1–6,
Los Angeles, California, June 2010. c©2010 Association for Computational Linguistics
Computational Linguistics in the Translator’s Workflow—Combining 
Authoring Tools and Translation Memory Systems 
Christoph Rösener 
Institute of Aplied Information Sciences (IAI) 
Martin-Luther-Straße 14 
D-611 Saarbrücken, Germany 
chrisr@iai-sb.de 
 
 
 
 
 
 
Abstract 
In Technical Documentation, Authoring Tools 
are used to maintain a consistent text qual-
ity—especialy with regard to the often fol-
lowed translation of the original documents 
into several languages using a Translation 
Memory System.  Hitherto these tols have 
often ben used separately one after the other. 
Aditionaly Authoring tols often have no 
linguistic inteligence and thus the quality 
level of the automated checks is very por. In 
this paper I wil describe the integration of a 
linguisticaly inteligent Authoring Tool into a 
Translation Memory System, thereby combin-
ing linguistic inteligence with the advantages 
of both systems in a single environment. The 
system alows you not only the use of com-
mon authoring aids (spel, gramar and style 
checker) in source and target language—by 
using a single environment the terminology 
database of the Translation Memory System 
can be used by the authoring aid to control 
terminology both in the source and target 
document.  Moreover, the linguisticaly intel-
ligent Authoring Tool enables automatic ex-
traction of term candidates from existing 
documents directly to the terminology data-
base of the Translation Memory System. 
1 Introduction

The benefit of Authoring Tols, especially in the 
area of Technical Documentation, is beyond debate 
(cf. Brockmann, 197, Huijsen, 198, Nyberg et 
al., 203, Spyridakis et al., 197). Combined with 
linguistic intelligence besides spell and grammar 
checking Authoring Tols are used to check termi-
nology, style, and abbreviations in texts (cf. Bre-
denkamp et al., 200, Carl et al., 202b, Haller 
200, Reuther and Wiger, 200).  In most cases 
this is done in relation to special style guides and 
terminology, both given by the respective company 
(cf. O'Brien, 203, Reuther, 203, Shubert et al., 
195).  Due to the fact that Authoring Aids are 
mostly used as a single application, style rules and 
terminology are kept and maintained in a special 
database together with the application.  Moreover 
linguistically intelligent Authoring Aids also help 
the author to extract terminology candidates. Sub-
sequently, where required, these candidates can be 
directly imported into the stored terminology.  To 
enable this function it is also necessary to have the 
terminology database integrated in the application. 
When translating technical documents it has for 
many years been common practice to use Transla-
tion Memory Systems to improve the consistency 
of translations. Translation Memory Systems store 
whole sentences or clauses (segments) and their 
translations in a multi-language translation mem-
ory.  When the translator is translating a new 
document the segments are matched against those 
already present in the translation memory. This is 
done with the help of a fuzzy match algorithm, 
which calculates the degree of similarity between 
the current source segment and matching source 
segments from the translation memory.  The de-
gree of similarity is expressed as a percentage 
value (10% match means identical match).  The 
matches are afterwards presented in descending 
order and the translator can paste them into the 
new translation. 
1
Besides the translation memory most of the 
Translation Memory Systems also have an inte-
grated terminology database.  On the basis of this 
database the system is able to sugest translations 
of single terms even when there is no match on 
sentence or clause level. The matching of terms is 
also done with fuzzy matching algorithms. There-
fore related as well as identical terms are found in 
the database.  With this function the Translation 
Memory System offers to some extent a feature 
similar to the Authoring Tols mentioned above. 
Yet the quality of the feature implemented in 
Translation Memory Systems is not the same due 
to the fact that in most cases this feature in Trans-
lation Memory Systems works without linguistic 
intelligence. 
When using both tols, the Authoring Tol as 
well as the Translation Memory System as a single 
application, the main problem becomes immedi-
ately apparent: the double terminology database. 
Two terminology databases—Authoring Tol and 
Translation Memory System, which have to be 
maintained in different applications, mean a lot of 
redundant work. 
The other posibility—regular synchronizing of 
the databases—is very difficult, because it is not 
clear, which of the databases is the core database. 
Generally speaking, the author manually enters 
new terms in the context of translations into the 
terminology database of the Translation Memory 
System, whereas the results of automatic term ex-
tractions are stored in the terminology database of 
the Authoring Tol. 
In the folowing I wil present a system where 
the Authoring Tol is directly integrated in the 
Translation Memory workflow, thus allowing the 
handling of terminology in only one core database. 
It is the integration of CLAT (Controled Language 
Authoring Tol) into the Acros Translation Mem-
ory System—the crosAuthor Linguistic. 
2 Description

For the understanding of the system and how the 
particular components work together it is necesary 
to begin with a description of the underlying mod-
ules.  The system consists mainly of three mod-
ules: the CLAT/UMMT software package, the 
Acros Language Server and the crosAuthor / 
crossAuthor Linguistic add-on. 
2.1 CLAT/UMT 
CLAT/UMT is a software package from the IAI 
(Institut der Gesellschaft zur Förderung der Ange-
wandten Informationsforschung an der Universität 
des Saarlandes—Institute of the Society for the 
Promotion of Aplied Information Sciences at 
Saarland University).  CLAT is a tol designed to 
suport technical authors in producing high-quality 
documentation (e.g., according to specific stan-
dards (cf. DIN ISO 12620, 199, Herzog and 
Mühlbauer, 207)).  This is reached through lin-
guistic correctness and compliance with company-
specific requirements. CLAT offers 
• spell and grammar checking to verify lin-
guistic correctness 
• style and terminology checking to verify 
compliance with company-specific writing 
guidelines 
The CLAT spelling checker elicits incorrectly spelt 
or unknown words (e.g., proplusion). Besides that 
the CLAT spelling checker can also be used to 
check British versus American English (e.g., or-
ganise vs. organize). The CLAT grammar checker 
elicits grammatically incorrect sentences or parts 
of sentences (e.g., He come). In addition, typogra-
phy errors that involve more than one word or 
character are also detected. 
Stylistic weaknesses in terms of clarity, under-
standability, and stylistic appropriateness of sen-
tences or parts of sentences are corrected by the 
CLAT style checker. Especially complexity isues 
(e.g., to many uses of and and or), ambiguity is-
sues (e.g., indefinite or anaphoric expressions, such 
as it, they, these, those), as well as stylistic prob-
lems (e.g., contracted forms such as they've) are 
detected.  Typically this is done on the basis of 
company-specific writing rules. Finally, the CLAT 
terminology checker elicits variants of preferred 
terms, as well as deprecated terms and admited 
terms. When the terminology checker finds a dep-
recated term in the text, a message is displayed 
with the corresponding preferred term (e.g., elec-
tric engine—deprecated term, electric motor—
preferred term) for correction. 
In addition to the four standard checking func-
tions CLAT also offers a function for eliciting term 
candidates.  This function is not a checking func-
tion in the sense that it finds linguistic errors or 
weaknesses.  Rather, it suports the terminology 
2
workflow of a company.  Nouns that have the 
properties typical of terms and have not been found 
during the check in the database, either as correctly 
used terms or variants or deprecated terms, are 
listed in a separate display window together with 
the context they occurred in. The author then has 
the posibility to decide whether any of the term 
candidates should be included in the terminology 
of the respective company. 
CLAT checks documents with regard to the control 
functions mentioned above, reports every rule vio-
lation and gives technical authors the oportunity 
to revise their text and immediately re-check the 
corrections made. CLAT offers an additional func-
tion for working in editors that suport tags (e.g., 
FrameMaker).  This function, a context-sensitive 
search, enables the individual processing of indi-
vidual tags. With the help of a DTD that must be 
created especially for CLAT, the CLAT server can 
process tags differently and ignore their contents 
entirely or only for individual style rules. 
 
 
Figure 1. CLAT-Java Client (IAI, 209a:10). 
 
Al CLAT checks are based on a linguistic analysis 
of the text document. The linguistic analysis con-
sists of several steps that are described in the fol-
lowing: 
• separating linguistic from non-linguistic data 
• recognizing word boundaries 
• analysing word forms: morphological analy-
sis 
• determining part of speech: grammatical 
analysis 
The CLAT system consists of a CLAT server and 
CLAT Clients.  CLAT Clients are user interfaces 
that are either stand-alone (Java CLAT Client) or 
they are CLAT-Ins that are pluged into an exist-
ing word processing program.  The CLAT server 
handles the communication between the CLAT 
Clients and the Linguistic Engine.  The Linguistic 
Engine is the core part of the CLAT system.  It 
performs the linguistic analysis and the CLAT 
checks. 
The main component of the Linguistic Engine is 
the program MPRO for the morphological and syn-
tactic analysis of the given text. For further details 
on MPRO see Maas et al. (209). 
 
 
Figure 2. Architecture of the CLAT System (IAI, 
209b:4) 
 
Due to the Linguistic Engine the quality level of 
the CLAT checks is very high, e.g. the morpho-
logical analysis enables CLAT to elicit morpho-
logical word form variants such as electrical 
batery as a variant of electric batery.  Moreover 
due to the linguistic intelligence CLAT is able to 
detect even word order variants such as source of 
propulsion power as a variant of propulsion power 
source.  These variants are found using complex 
methods of linguistic abstraction and do not need 
to be explicitly named in the terminological data-
base (cf. Carl et al., 202a, Hong et al., 201, 
Thurmair, 203). 
Another system component of CLAT is UMT 
(Utility for Mandate Management Tasks). It is the 
central configuration tol for the CLAT-Server. 
With UMMT, language resources used in CLAT 
are created, updated, and administered according to 
the requirements of the respective company. 
 
3
 
Figure 3. UMT configuration tol for the CLAT-
Server (IAI, 2010:19). 
 
Some of the posible settings for CLAT projects in 
UMT are: 
• import/maintenance of terminology 
• definition of stylistic and grammatical rules 
• definition of special spellings and synonyms 
Al these settings are saved as a project and can be 
accessed by CLAT at run time.  The central project 
and user management of UMT allows creation 
and administration of CLAT projects as well as 
CLAT users or user groups. CLAT projects can be 
assigned to one or several CLAT users or user 
groups.  For more detailed information about the 
CLAT/UMT Software package see the IAI User 
Manuals (IAI, 209a/b). 
2.2 Acros
Language Server 
The Acros Language Server is the central soft-
ware platform of the Acros language system. The 
software includes a translation memory, a termi-
nology system, and project management and trans-
lation workflow control tols. In this paper I wil 
describe only a few components of the software— 
the translation memory, the terminology database 
and the user interface.  For further information on 
the Acros Language Server see the Acros User 
Manuals (Acros, 209b/c). 
The translation memory within the Acros lan-
guage server—called crosTank—contains sen-
tence pairs from earlier translations. If it finds an 
identical or similar sentence in a new source text, it 
offers the stored translation as the basis for an op-
tional automatic pre-translation or as a suggestion, 
as son as the translator has arrived at the relevant 
sentence of the source text in the editor.  New 
translations can either be saved automatically in 
crosTank or the translator can also chose to save 
them manually. 
The terminology database within the Acros 
Language Server—called crosTerm—enables the 
translator to create and update multilingual sets of 
terminology, in particular company-specific termi-
nology and glosaries of technical terms.  cros-
sTerm stores concepts and their verbal 
designations (e. g., translation, synonym, antonym, 
etc.) for all languages at a single level.  It is posi-
ble to store many different types of additional in-
formation, as well as user-defined information. 
Both modules—the translation memory and the 
database—are integrated in a central user inter-
face—called crosDesk.  It provides the translator 
with a text editor for the source and the target text 
as well as the functions mentioned above. Matches 
in crosTank and crosTerm are marked in the 
source text automatically and can be easily incor-
porated into the target text. 
 
 
Figure 4. Central user interface crosDesk (Acros, 
209d:24). 
2.3 crosAuthor / crosAuthor Linguistic 
crosAuthor and crosAuthor Linguistic are add-
ons for separate source-text editors (e.g., MS 
Word, Adobe FrameMaker) and provide an inter-
face to the Acros Language Server. With cros-
Author, the sentence the user is currently working 
on in the source-text editor is sent to the Acros 
Language Server.  This sentence wil then be 
searched for in crosTank. Relevant search hits are 
sent back to the user and are displayed in the corre-
sponding crosTank window.  At the same time 
4
crosTerm is searched for any corresponding 
words in the current sentence. The relevant search 
hits are also transmited to the crosAuthor add-on 
via the interface and displayed in the crosTerm 
window. 
 
Figure 5. Acros/CLAT Integration (Acros, 209a:40). 
 
Finally, crosAuthor Linguistic is an expanded 
solution of crosAuthor featuring seamless integra-
tion of CLAT in Acros.  With crosAuthor Lin-
guistic users have access to the crosTank and 
crosTerm matches as well as to the CLAT results. 
 
 
Figure 6. crosAuthor Linguistic corection window in 
MS Word 203 (Acros, 209a:48). 
 
Moreover, the CLAT conection enables the direct 
integration of the editor in the terminology creation 
process.  With the CLAT term-candidate extrac-
tion, the editor can directly save auto-detected and 
extracted terminology as entries in the crosTerm 
database. As a result, crosTerm works as a core 
terminology database for both systems.  To make 
the CLAT server work with the respective termi-
nology it is only necessary to import the terminol-
ogy into UMT before starting CLAT.  This can 
be done either manually via CSV or automatically 
by a special interface. 
 
 
Figure 7. Term-candidate extraction in crosAuthor 
(Acros, 209a:50). 
3 Conclusion

The integration of Authoring tols into Translation 
Memory Systems is an important step towards a 
single working environment for the translator's 
workflow. The system described enables the trans-
lator to maintain the terminology for both sys-
tems—the Authoring Tol as well as the 
Translation Memory System—in a single core da-
tabase.  Moreover, the integration of CLAT in 
Acros alows the translator to save auto-detected 
and extracted term-candidates directly into this 
database. 
Due to the linguistically intelligent analysis in 
CLAT it is necesary to have specific information 
about the terms (part of speech, gender, etc.). This 
information is automatically generated within the 
CLAT System.  This is the reason why the de-
scribed system actually stil has two separate ter-
minology databases.  But this is not an important 
disadvantage of the overall system as long as one 
of the databases is the core database. The fact, that 
only one core database has to be maintained means 
a significant reduction of the workload of transla-
tors resp. terminologists. 
The system presented is only a first step to-
wards a fuly integrated solution for the translators 
working environment.  The focus for future re-
search could be for example the development of an 
integrated linguistic intelligent Authoring Tol to 
proof whole translation memories. 
5
References 
Acros Systems GmbH. 209a. User Manual. Transla-
tion-Oriented Authoring with crosAuthor / cros-
sAuthor Linguistic v. 5.0. 
Acros Systems GmbH. 209b. Acros Step by Step. 
Unser Manual v. 5.0. 
Acros Systems GmbH. 209c. Acros at a glance. User 
Manual v. 5.0. 
Acros Systems GmbH. 209d. Quickstart Acros Lan-
guage Server v. 5.0. 
Andrew Bredenkamp, Berthold Crysman, and Mirela 
Petrea. 200. Building Multilingual Controled Lan-
guage Performance Checkers. In Adriaens et al. 
(Eds), Procedings of the Third International Work-
shop on Controled Language Aplications (CLAW 
200), Seatle, Washington, p. 83–89. 
Daniel Brockman. 197. Controled Language & 
Translation Memory Technology: a Perfect Match to 
Save Translation Cost. TC Forum 4/97, p. 10–11. 
Michael Carl, Johan Haler, Christoph Horschman, 
and Axel Theofilidis. 202a. A Hybrid Example-
Based Aproach for Detecting Terminological Vari-
ants in Documents and Lists of Terms. 6. Konferenz 
zur Verarbeitung natürlicher Sprache, KONVENS, 
Sarbrücken. htp:/ww.iai-sb.de/docs/konvens.pdf. 
Michael Carl, Johan Haler, Christoph Horschman, 
Dieter Mas, and Jörg Schütz. 202b. The TETRIS 
Terminology Tol. In TAL, Vol. 43:1. htp:/ww.iai-
sb.de/docs/ tal.pdf. 
DIN ISO 12620. 199. Computer Applications in Ter-
minology – Data Categories. 
Gotfried Herzog and Holger Mühlbauer. 207. Normen 
für Übersetzer und technische Autoren. Beuth Verlag 
GmbH, Berlin. 
Johan Haler. 200. MULTIDOC – Authoring Aids for 
Multilingual Technical Documentation. First Con-
gres of Specialized Translation, Barcelona, March 
200. htp:/ww.iai-sb.de/docs/bcn.pdf. 
Wilem-Olaf Huijsen. 198. Controled Language – An 
Introduction. In Mitamura et al. (Eds), Procedings 
of the Second International Workshop on Controled 
Language Applications – CLAW 98, Language Tech-
nologies Institute, Carnegie Melon University, Pits-
burgh, Pensylvania, p. 1–15. 
Munpyo Hong , Sisay Fisaha, and Johan Haler. 201. 
Hybrid filtering for extraction of term candidates 
from German technical texts. TIA-2001, Nancy. 
htp:/ww.iai-sb.de/docs/term_extract.pdf. 
IAI (Institut der Geselschaft zur Förderung der Ang-
wandten Informationsforschung). 209a. CLAT-
Client Manual 4.1 
IAI (Institut der Geselschaft zur Förderung der Ang-
wandten Informationsforschung). 209b. CLAT-
Introduction Version 4.1 
IAI (Institut der Geselschaft zur Förderung der Ang-
wandten Informationsforschung). 2010. UMT 
Manual Version 4.1 
Heinz-Dieter Mas, Christoph Rösener, and Axel The-
ofilidis. 209. Morphosyntactic and Semantic Analy-
sis of Text: The MPRO Taging Procedure. In: 
Cerstin Mahlow and ichael Piotrowski (Eds.): State 
of the art in computational morphology. Workshop 
on systems and frameworks for computational mor-
phology, SFCM 209, Zurich, Switzerland, Septem-
ber 4, 209. Procedings. New York: Springer 
(Comunications in Computer and Information Sci-
ence, 41), p. 76–87. 
Eric Nyberg, Teruko Mitamura, and Wilem-Olaf Hui-
jsen. 203. Controled Language for Authoring and 
Translation. In H. Somers. (ed), Computers ad Trans-
lation: A Translator's Guide, Amsterdam, John Ben-
jamins, p. 245–282. 
Sharon O'Brien. 203. Controling Controled English – 
An Analysis of Several Controled Language Rule 
Sets. Procedings of the Joint Conference combining 
the 8
th
 International Workshop of the European As-
sociation for Machine Translation and the 4
th
 Con-
troled Language Applications Workshop (CLAW 
2003), 15
th
–17
th
 May, Dublin City University, Dub-
lin, Ireland, p. 105–114. 
Ursula Reuther. 203. Two in One – Can it Work? 
Readability and Translatability by means of Con-
troled Language. Procedings of the Joint Confer-
ence combining the 8
th
 International Workshop of the 
European Association for Machine Translation and 
the 4
th
 Controled Language Applications Workshop 
(CLAW 203), 15
th
–17
th
 May, Dublin City Univer-
sity, Dublin, Ireland, p. 124–132. 
Ursula Reuther and Antje Schmidt-Wiger. 200. De-
signing a Multi-Purpose CL Aplication. In Adriaens 
et al. (eds), Procedings of the Third International 
Workshop on Controled Language Applications 
(CLAW 200), Seatle, Washington, p. 72–82. 
Serena Shubert, Jan Spyridakis, and Heather Holmback. 
195. The Comprehensibility of Simplified English 
in Procedures. Journal of Technical Writing and 
Comunication, 25(4):347–369. 
Jan Spyridakis, Serena Shubert, and Heather Holmback. 
197. Measuring the Translatability of Simplified 
English in Procedural Documents. IEEE Transac-
tions on Profesional Comunication. 40(1):217–
246. 
Gregor Thurmair. 203. Making Term Extraction Tools 
Usable. Procedings of the Joint Conference combin-
ing the 8
th
 International Workshop of the European 
Association for Machine Translation and the 4
th
 Con-
troled Language Applications Workshop (CLAW 
2003), 15
th
–17
th
 May, Dublin City University, Dub-
lin, Ireland, p. 170–179. 
6


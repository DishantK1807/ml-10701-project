Toward General-Purpose Learning for Information Extraction 
Dayne Preitag 
School of Computer Science 
Carnegie Mellon University 
Pittsburgh, PA 1,5213, USA 
dayne@cs, crau. edu 
Abstract 
Two trends are evident in the recent evolution of 
the field of inforlnation extraction: a preference 
for simple, often corpus-driven techniques over 
linguistically sophisticated ones; and a broaden
ing of the central problem definition to include 
many non-traditional text domains. This devel
opment calls for information extraction systems 
which are as retargetable and general as possi
ble. Here, we describe SRV, a learning archi
tecture for information extraction which is de
signed for maximum generality and flexibility. 
SRV can exploit domain-specific information, 
including linguistic syntax and lexical informa
tion, in the form of features provided to the sys
tem explicitly as input for training. This pro
cess is illustrated using a domain created fl'om 
Reuters corporate acquisitions articles. Fea
tures are derived from two general-purpose NLP 
systems, Sleator and Temperly's link grammar 
parser and Wordnet. Experiments compare the 
learner's performance with and without such 
linguistic inforlnation. Surprisingly, in many 
cases, the system performs as well without this 
information as with it. 
1 Introduction

The field of information extraction (IE) is con
eerned with using natural language processing 
(NLP) to extract essential details front text doc
uments automatically. While the problems of 
retrieval, routing, and filtering have received 
considerable attention through the years, Ig is 
only now coming into its own as an information 
management sub-discipline. 
Progress in the field of IE has been away from 
general NLP systems, that must be tuned to 
work in a particular domain, toward faster sys
tems that perform less linguistic processing of 
documents and can be more readily targeted at 
novel domains (e.g., (Appelt et al., ~993)). A 
natural part of this development has been the 
introduction of machine learning techniques to 
facilitate the domain engineering effort (Riloff, 
1996; Soderland and Lehnert, 1994). 
Several researchers have reported IE systems 
which use machine learning at their core (Soder
land, 1996; Califf and Mooney, 1997). Rather 
than spend human effort tuning a system for an 
IE domain, it becomes possible to conceive of 
training it on a document sample. Aside from 
the obvious savings in human development eL 
fort, this has significant implications for infor
mation extraction as a discipline: 
Retargetability Moving to a novel domain 
should no longer be a question of code mod
ification; at most some feature engineering 
should be required. 
Generality It should be possible to handle a 
much wider range of domains than previ
ously. In addition to domains characterized 
by grammatical prose, we should be able to 
perform information extraction in domains 
involving less traditional structure, such as 
netnews articles and Web \[)ages. 
Ill this paper we describe a learning algorithm 
similar in spirit to FOIL (Quinlan, 1990), which 
takes as input a set of tagged documents, and a 
set of features that control generalization, and 
produces rules that describe how to extract in
formation from novel documents. For this sys
tem, introducing linguistic or any other infor
mation particular to a domain is an exercise in 
feature definition, separate from the central al
gorithm, which is constant. We describe a set; of 
experiments, involving a document collection of 
newswire articles, in which this learner is com
pared with simpler leecning algorithms. 
404 
2 SRV

In order to be suitable for the widest possible 
variety of textual domains, including collections 
made up of informal E-ma.il messages, World 
Wide \Vob pages, or netnews posts, a learner 
must avoid ally assumptions about the struc
ture of documents that migltt be invalidated by 
new domains. It is not sa.fe to assunte, tbr ex
ample, that text will be grammatical, or that all 
tokens encountered will have entries in a lexicon 
available to the system. Fundamentally, a doc
ument is simply a sequence of terms. Beyond 
this, it becomes difficult to make assumptions 
that are not violated by some ct)nlmon and im
portant domain of interest. 
At the same time, however, when structural 
assumptions are justilied, they may be criti
cal to the success of the system. It should be 
possible, therefore, to make structural informa
tion available to the learner as input for train
ing. The machine learning method with which 
we experiment here, SRV, was designed with 
these considerations in min(l. In experiments re
ported elsewhere, we have applied SRV to collec
tions of electronic seminar announcenlents an(l 
World \Vide Web pages (Freitag, 1998). Read
ers interested in a more thorough description el" 
SRV are referred to (Freitag, 1998). tiere, we 
list its most salient characteristics: 
• Lack of structural assumptions. SRV 
assumes nothing about the structure of a 
field instance 1 or the text in which it is 
embedded-only that an instance is an nn
broken fragment of text. l)uring learning 
and prediction, SRV inspects cver9 frag~ 
merit of appropriate size. 
• Token-oriented features. Learning is 
guided by a. feature set which is separate 
from the c, ore algorithm. Features de
scribe aspects of individual tokens, such as 
capitalized, numeric, noun. Rules can posit 
feature values for individual tokens, or for 
all tokens in a fragment, and can constrain 
the ordering and positioning of tokens. 
• Relational features. SRV also includes 
lWe use the tel'ms field and field instance for the 
rather generic IE concepts of slot and slot filler. For a 
newswire article about a corporate acquisition, Ibr exam
pie, a field instance might be the text fragment listing 
the amount paid as part of the deal. 
a notion of relational f~atures, such as 
next-token, which maI) a given token to au
other token in its e.nvironment. SRV uses 
such features to explore the context of flag
ments tinder investigation. ,, Top-down greedy rule search. SRV 
constructs rules from general to specific, 
a.s in FOIl, (Quinlan, 1990). Top-down 
search is more sensitive to patterns in the 
data, and less dependent on heuristics, 
than the bottom-up search used by sim
ilar systems (Soderland, 11996; Califf and 
Mooney, 1997). 
• Rule validation. Training is followed by 
validation, in which individual rules are 
tested on a reserved portion of the train
ing documents. Statistics collected in this 
way are used to associate a. confidence with 
each prediction, which are used to manip
ulate the accuracy-coverage trade-off. 
a Case Study 
SRV's default feature set, designed for informal 
donlains where parsing is dil\[icult, includes no 
fea.tures more sophisticated than those immedi
ately computable from a cursory inspection of 
lokens. The expc, riments described here were 
an exercise in tile design of features to capture 
syntactic and lexical information. 
3.1 Donmin

As part of these experiments we defined an in
formation extraction problem using a publicly 
available corpus. 600 articles were samphM 
from the "acquisition" set in the Reuters corpus 
(Lewis, 1992) and tagged to identify instances 
of nine fields. Fields include those for the official 
names of tilt' parties to an acquisition (acquired, 
purchaser, seller), as well as their short names 
(acqabr, purchabr, sellerabr), the location of the 
purchased company or resource (acqloc), tile 
price paid (dlramt), and any short phrases sun> 
marizing the progress of negotiations (status). 
The fields vary widely in length and frequency 
of occurrence, both of which have a signiticant 
impact on the difficulty they present for learn
ers. 
a.2 Feature Set Design 
We augmented SRV's default feature set; with 
features derived using two publicly available 
405 
+---G---+---G---+--Ss-+-Ce-+Ss*b+ 
l I I I I I 
First Wisconsin Corp said.v it plans.v ... 
ftoken: Cord \[token: said 1 token: it l lg_tag: nil I \]lg tag: "v" / ~ lq_taq: nil / 
l.gcos: nou~ l.g.Cos: ver~ l.g.._pos: noun/ 
left G / I ~'leftS / \[ \[\left C / I right S / ~ \[right_C/ \] \[ riqh\[_S / \] 
Figure 1: An example of link grammar feature 
derivation. 
NLP tools, tile link grammar parser and Word
net. 
The link grammar parser takes a sentence as 
input and returns a complete parse in which 
terms are connected in typed binary relations 
("links") which represent syntactic relationships 
(Sleator and Temperley, 1993). We mapped 
these links to relational features: A token on 
the right side of a link of type X has a cor
responding relational feature called left_X that 
nlaps to the token on the left side of the link. hi 
addition, several non-relational features, such as 
part of speech, are derived from parser output. 
Figure 1 shows part of a link grammar parse 
and its translation into features. 
Our object in using \¥ordnet (Miller, 1995) 
is to enable SRV to recognize that the phrases, 
'% bought B," and, "X acquired Y," are in
stantiations of the same underlying pattern. Al
though "bought" and "acquired" do not belong 
to the same "synset" in \¥ordnet, they are nev
ertheless closely related in Wordnet by means 
of the "hypernym" (or "is-a") relation. To ex
ploit such semantic relationships we created a 
single token feature, called wn_word, in con
trast with features already outlined, which are 
mostly boolean, this feature is set-valued. For 
nouns and verbs, its value is a set of identifiers 
representing all synsets in the hypernym path to 
the root of the hypernym tree in which a word 
occurs. For adjectives and adverbs, these synset 
identifiers were drawn from the cluster of closely 
related synsets. In the case of multiple Word
net senses, we used the most common sense of 
a word, according to Wordnet, to construct this 
set. 
3.3 Competing
Learners 
We compare the performance of SRV with that 
of two simple learning approaches, which make 
predictions based on raw term statistics. Rote 
(see (Freitag, 1998)), memorizes field instances 
seen during training and only makes predic
tions when the same fragments are encountered 
in novel documents. Bayes is a statistical ap
proach based on the "Naive Bayes" algorithm 
(Mitchell, 1997). Our implementation is de
scribed in (Freitag, 1997). Note that although 
these learners are "simple," they are not neces
sarily ineffective. We have experimented with 
them in several domains and have been sur o 
prised by their level of" performance in some 
cases. 
4 Results

The results presented here represent average 
performances over several separate experiments. 
In each experiment, the 600 documents in the 
collection were randomly partitioned into two 
sets of 300 documents each. One of the two 
subsets was then used to train each of the lear,> 
ers, the other to measure the performance of the 
learned extractors. 
We compared four learners: each of the two 
simple learners, 8ayes and Rote, and SRV with 
two different feature sets, its default feature set, 
which contains no "sophisticated" features, and 
the default set augmented with the features de
rived from the link grammar parser and Word
net. We will refer to the latter as SRV+ling. 
Results are reported in terms of two metrics 
closely related to precision and recall, as seen in 
information retrievah Accuracy, the percentage 
of documents for which a learner predicted cor
rectly (extracted the field in question) over all 
documents for which the learner predicted; and 
coverage, the percentage of documents having 
the field in question for which a learner made 
some prediction. 
4.1 Performance

Table 1 shows the results of a ten-fold exper
iment comparing all four learners on all nine 
fields. Note that accuracy and coverage must 
be considered together when comparing learn
ers. Fbr example, Rote often achieves reasonable 
accuracy at very low coverage. 
Table 2 shows the results of a three-fold ex
periment, comparing all learners at fixed cover
406 
AZg II acquired 
\[ Rote II 59.6118.5 \[Bayes Jl 19'81 i00 
\[ s-v--ll 38.4 196.6 \[~I{ 38'0195"6 
l. II aCqab  I Ro---ff~---~ II 16.1142.5 
I II '23= I. 100. I s--II  1.8 199.8 
I 11355 I 99"2 
I~ 6.4 63.1 
100 
12.7 83.7 
8o.2 
-X7 cVe7 
purchaser 
43.2 23.2 
36.9 100 
42.9 97.9 
42.4 96.3 
purchabr 
3.6 41.9 
39.6 100 
41.4 99.6 
43.2 99.3 
status 
42.0 94.5 
33.3 100 
39.1 89.8 
41.5 87.9 
-seller 
38.5 I 15.2 
15.6 100 
16.3 86.4 
16.4 82.7 
sellerabr 
2.7 27.3 
16.0 100 
14.3 95.1 
14.7 91.8 
dlramt 
63.2 48.5 
24.1 100 
50.5 91.0 
52.1 89.4 
Table 1: Accuracy a.nd coverage for all four 
learners on tile acquisitions fiekls. 
age levels, 20% and 80%, on four fields which 
we considered representative of the wide range 
of behavior we observed. In addition, in order to 
assess the contribution of each kind of linguis~ 
tic information (syntactic and lexical) to SRV's 
performance, we ran experimenls in which its 
basic \[~ature set was augmented with only ol\]e 
type or the other. 
4.2 Discussion

Perhaps surprisingly, but consistent with results 
we have obtained in other domains, there is no 
one algorithm which outperforms the others on 
all fields. Rather than the absolute difficulty of 
a field, we speak of the suitability of a learner's 
inductive bias for a. field (Mitchell, 1997). Bayes 
is clearly better than SRV on tile seller and 
sellerabr fields at all points on the accuracy
coverage curve. We suspect this may be due, in 
part, to the relative infrequency of these fields 
in the data. 
The one field for which the linguistic features 
offer benefit a.t all points along the accuracy
coverage curve is acqabr. 2 We surmise that two 
factors contribute to this success: a high fre
quency of occurrence for this field (2.42 times 
2The acqabr differences in Table 2 (a 3-split exper
iment) are not significant at the 95% confidence level. 
However, the full 10-split, averages, wit, h 9,5% error mar
gins, are: at 20% coverage, 61.54-,tA for SRV and 
68.54-4.2 for SRV+ling; at. 80% coverage, 37.1±2.0 fin. 
SRV and ,t2.44-2.1 for SRV+Iing. 
Fieldd 
purchaser 
a cqabr 
dlramt 
status 
purchaser 
acqabr 
d lram~ 
status 
~/o 
Rote 
-I 69:5 
SRV+IIng 
8o% 1 
Bayes 
40:6 155.9 
50.6 
39.4162.l srv+lg 
67.a 43.3 I 72.6_Jl ~74.8 
s0--vS i 
SRV 4513~ 
40.0 6~.457~ 
srvq wn 
.5 
42__2~ 74.1 
Table 2: Accuracy from a three-split experiment 
at fixed coverage levels. 
A fragment is a acqabr, if: 
it contains exactly one token; 
the token (T) is c~pitalized; 
T is followed by a lower-case token; 
7' is preceded by a lower-case token; 
7' has a. right AN-link to a token (17) 
with wn_word value "possession"; 
U is preceded by a token 
with wn_word value "stock"; 
and the token two tokens before T 
is not a two-ch~u:acter token. 
to purchase 4. co mln~ common shares at 
acquire another 2.4 mln~ treasury shares 
Figure 2: A learned rule tbr acqabr using linguis
tic features, along with two fragments of match
ing text. The AN-link connects a llO/ln modifier 
to the noun it modifies (to "shares" in both ex
amples). 
per document on average), and consistent o(:
currence in a linguistically rich context. 
Figure 2 shows a SRV+ling rule that is able 
to exploit both types of linguistic infbrma
tion. The Wordnet synsets for "possession" and 
"stock" come from the same branch in a hy
pernym tree--"possession" is a generalization 
of "stock ''a -and both inatch the collocations 
"common shaxes" and "treasury shares." That 
the paths \[right~,N\] and \[right_AN prev_tok\] 
both connect to the same synset indicates tile 
presence of a two-word Wordnet collocation. 
It is natural to ask why SRV+ling does not 
'ZSRV, with its general-to-speeitie search bias, often 
employs Wordnet this way-first more general synsets, 
followed by specializations of the same concept. 
407 
outperform SRV more consistently. After all, 
the features available to SRV+ling are a superset 
of those available to SRV. As we see it, there are 
two basic explanations: 
• Noise. Heuristic choices made in handling 
syntactically intractable sentences and in 
disambiguating Wordnet word senses in
troduced noise into the linguistic features. 
The combination of noisy features and a 
very flexible learner ,nay have led to over
fitting that offset any advantages the lin
guistic features provided. 
• Cheap features equally effective. The 
simple features may have provided most 
of the necessary information. For exam
ple, generalizing "acquired" and "bought" 
is only useful in the absence of enough data 
to form rules for each verb separately. 
4.3 Conclusion

More than similar systems, SRV satisfies the cri
teria of generality and retargetability. The sep
aration of domain-specifc information from the 
central algorithm, in the form of an extensible 
feature set, allows quick porting to novel do
ra ains. 
Here, we have sketched this porting process. 
Surprisingly, although there is preliminary evi
dence that general-purpose linguistic informa
tion can provide benefit in some cases, most 
of the extraction performance can be achieved 
with only the simplest of information. 
Obviously, the learners described here are 
not intended to solve the information extraction 
problem outright, but to serve as a source of in
formation for a post-processing component that 
will reconcile all of the predictions for a docu
ment, hopefully filling whole templates more ac
curately than is possible with any single learner. 
How this might be accomplished is one theme 
of our future work in this area. 
Acknowledgments 
Part of this research was conducted as part of 
a summer internship at Just Research. And it 
was supported in part by the Darpa HPKB pro
gram under contract F30602-97-1-0215. 

References 

Douglas E. Appelt, Jerry R. Hobbs, John Bear, David Israel, and Mabry Tyson. 1993. FAS-408 TUS: a finite-state processor for information extraction from real-world text. Proceedings of IJCAI-93, pages 1172-1178. 

M. E. Califfand R. J. Mooney. 1997. Relational learning of pattern-match rules for information extraction. In Working Papers of ACL-97 Workshop on Natural Language Learning. 

D. Freitag. 1997. Using grammatical inference to improve precision in information extraction. In Notes of the ICML-97 Workshop on Automata Induction, Grammatical Inference, and Language Acquisition. http://www.cs.cmu .ed u/f)dtlpont/m197p/m197_GI_wkshp.tar. 

Dayne Freitag. 1998. Information extraction from HTML: Application of a general machine learning approach. In Proceedings of the Fifteenth National Conference on Artificial Intelligence (AAAI-98). 

D. Lewis. 1992. Representation and Learning in Information Retrieval. Ph.D. thesis, Univ. of Massachusetts. CS Tech. Report 91--93. 

G.A. Miller. 1995. WordNet: A lexical database for English. Communications of the ACM, pages 39-41, November. 

Tom M. Mitchell. 1997. Machine Learning. The McGraw-Hill Companies, Inc. 

J. R. Quinlan. 1990. Learning logical definitions from relations. Machine Learning, 5(3):239-266. 
																				E. Riloff. 1996. Automatically generating extraction patterns from untagged text. In Proceedings of the Thirteenth National Conference on Artificial Intelligence (AAAI-96), pages 1044-1049. 

Daniel Sleator and Davy Temperley. 1993. Parsing English with a link grammar. Third International Workshop on Parsing Technologies. 

Stephen Soderland and Wendy Lehnert. 1994. Wrap-Up: a trainable discourse module for information extraction. Journal of Artificial Intelligence Research, 2:131-158. 

S. Soderland. 1996. Learning Tezt Analysis Rules for Domain-specific Natural Language Processing. Ph.D. thesis, University of Massachusetts. CS Tech. Report 96-087.


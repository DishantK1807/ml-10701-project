Proceedings of the ACL-HLT 2011 System Demonstrations, pages 139–144,
Portland, Oregon, USA, 21 June 2011. c©2011 Association for Computational Linguistics
 An Interface for Rapid Natural Language 
Procesing Development in UIMA 
 
Balaji R. Soundrarajan, Thomas Ginter, Scott L. DuVall 
VA Salt Lake City Health Care System and University of Utah 
balaji@cs.utah.edu, {thomas.ginter, scott.duval}@utah.edu 
 
 
Abstract 
This demonstration presents the Annotation 
Librarian, an aplication programing inter-
face that suports rapid development of natu-
ral language procesing (NLP) projects built 
in Apache Unstructured Information Man-
agement Architecture (UIMA). The flexibility 
of UIMA to suport all types of unstructured 
data – images, audio, and text – increases the 
complexity of some of the most common NLP 
development tasks. The Anotation Librarian 
interface handles these comon functions and 
allows the creation and management of anno-
tations by miroring Java methods used to 
manipulate Strings. The familiar syntax and 
NLP-centric design allows developers to 
adopt and rapidly develop NLP algorithms in 
UIMA. The general functionality of the inter-
face is described in relation to the use cases 
that necesitated its creation.  
1 Introduction

In the days when public libraries were the center of 
information exchange, the job of the librarian was 
to serve as an interface between the complex li-
brary system and the average user. The librarian 
made it posible for one to aces specific sources 
of information without memorizing the Dewey 
Decimal System or fliping through the card cata-
log. Analogous to the great librarians of yesteryear, 
the Annotation Librarian serves the average Java 
developer in the creation and management of anno-
tations within natural language procesing (NLP) 
projects built using the open source Apache Un-
structured Information Management Architecture 
(UIMA)
1
. 
Many NLP tasks are performed in procesing 
steps that build upon one another. Systems de-
signed in this fashion are caled pipelines because 
                                                             
1
 Apache UIMA is available from http:/uima.apache.org/ 
text is procesed and then pased from one step to 
the next like water flowing through a pipe. Each 
step in the pipeline ads structured data on top of 
the text called annotations. An anotation can be 
as simple as a classification of a span of text or 
complex with attributes and mapings to coded 
values. As pipeline systems have caught on, the 
ability to standardize functionality in and even 
acros pipelines has emerged. UIMA provides a 
powerful infrastructure for the storage, transport, 
and retrieval of document and annotation 
knowledge acumulated in NLP pipeline systems 
(Ferruci 204). UIMA provides tols that alow 
testing and visualizing system results, integration 
with Eclipse
2, and use of standard XML descrip-
tion files for maintainability and interoperability. 
Because UIMA provides the underlying data mod-
el for storing meta-data and annotations with doc-
ument text and the interface for interacting 
betwen procesing steps, it has become a popular 
platform for the development of reusable NLP sys-
tems (D’Avolio 2010, Coden 209, Savova 2008). 
The most notable example of UIMA capabilities is 
Watson, the question-answering system that com-
peted and won two Jeopardy! matches against the 
all-time-wining human champions (Feruci 
2010). 
In adition to its sucesful implementations in 
NLP, UIMA suports al types of unstructured in-
formation – video, audio, images, etc – and so all 
UIMA constructs generalize beyond text. While 
handling multiple data types increases the utility of 
the framework, developers new to UIMA may fel 
they ned to understand the entire framework be-
fore being able to distinguish and focus solely on 
text. The Anotation Librarian aids both novice 
and experienced UIMA developers by providing 
intuitive and NLP-centric functionality. 
                                                             
2
 Eclipse Development Platform is available from 
http:/ww.eclipse.org 
139
2 System
Overview 
The Anotation Librarian was developed as an in-
terface that synthesizes many of the most frequent 
annotation management tasks encountered in NLP 
system development and presents them in a man-
ner easily acesed for those familiar with general 
Java development methods. It provides conven-
ience methods that miror Java String manipula-
tion, allowing developers to seamlesly combine 
document text and annotations with the same 
comands familiar to anyone who has parsed a 
String or written a regular expresion. Advanced 
functionality alows developers to examine spatial 
relationships among anotations and perform an-
notation pattern matching. In this demonstration, 
we present the general functionality of the Annota-
tion Librarian in the context of the health care re-
search projects that necesitated the creation of the 
interface. 
The interface does not replace the ned for NLP 
algorithms – developers have a plethora of paterns 
and decision rules, symbolic grammars, and ma-
chine learning techniques to create annotations. 
The Anotation Toolkit, though, provides a con-
venient way for developers to use existing annota-
tions in their algorithms. This feds the pipeline 
workflow that allows more complex anotations to 
be built in later procesing steps using the annota-
tions created in earlier steps. 
The Anotation Librarian was developed and 
modified in response to four research projects in 
the health care domain that relied on NLP extrac-
tion of concepts from clinical text. The diversity of 
the different tasks in each of these use cases al-
lowed the interface to include functionality com-
mon to diferent types of NLP system 
development. Interface functionality wil be de-
scribed as groups of related methods in the context 
of the four research projects and cover patern 
matching, span overlap, relative position, annota-
tion modification, and retrieval. All projects re-
ceived Institutional Review Board approval for 
data use and only synthetic documents, not real 
patient records, are shown in the examples present-
ed in this paper. 
3 Pattern
Matching 
Name entity recognition and semantic clasifica-
tion tasks often require advanced concept identifi-
cation techniques. Identifying mentions of pre-
scriptions in a document using regular expressions, 
for example, would require hundreds of thousands 
of paterns for names of medicines and have to ac-
count for mispelling, abbreviations, and acro-
nyms. Regular expresions are commonly used to 
solve simple NLP tasks, though, and can be uti-
lized as part of a more complex information extrac-
tion strategy, such as understanding the context in 
which a term is used in the text (Garvin 2011, 
McCrae 208, Frenz 207, Chapman 201). Negex 
(Chapman 201) is an algorithm for identifying 
words before or after a term that sugest, for ex-
ample, that a particular symptom is not present in a 
patient: “the patient has no fever.” Other methods 
for understanding the context around terms include 
the use of an inclusion and exclusion list (Akbar 
2009), temporal locality search (Grouin 209), 
window search (Li 209), and combinations of the 
above techniques (Hamon 209). 
The Anotation Librarian alows paterns to be 
built using existing annotations along with docu-
ment text. This functionality combines the power 
of finding concepts that require complex means 
with the simplicity of regular expresions. The syn-
tax mirrors that of the Java Pattern
3
 and Matcher
4
 
classes, but allows for an extended regular expres-
sion gramar to identify Anotations. Patern 
matching is acomplished in thre phases: the in-
put patern is compiled, the document and annota-
tions are analyzed for matches, and matches are 
returned along with span information. 
A project identifying positive microbiology cul-
tures wil ilustrate the use of patern matching 
with the Annotation Librarian. Clinicians order 
microbiology cultures to determine whether a pa-
tient has a bacterial infection and which antibiotics 
would be most efective at treating the infection. 
Susceptibility is the measure of whether an antibi-
otic can efectively treat an organism or whether 
the organism is resistant to it. 
A sample of microbiology report text is shown 
in Figure 1 and visualized anotations for the same 
sample are shown in Figure 2. 
 
                                                             
3
 Documented at 
http:/download.oracle.com/javase/6/docs/api/java/util/regex/ 
Patern.html 
4
 Documented at 
http:/download.oracle.com/javase/6/docs/api/java/util/regex/ 
Matcher.html 
140
 
Figure 1: Microbiology Report Text 
 
 
Figure 2: Annotated Report 
 
To demonstrate patern matching in this sample, 
the simple patern of a drug annotation folowed by 
an equals sign and then by a susceptibility annota-
tion will be used.  
3.1 Patern
Compilation 
The patern matching proces begins when a new 
instance of an AnnotationPatern is created from 
the static compile method. AnnotationPatern is 
analogous to the Java Pattern
3
 class. 
 
AnnotationPattern susceptibilityPattern = 
  AnnotationPattern.compile(“pattern”); 
 
The method takes advantage of the UIMA im-
plementation of annotations. Each annotation is an 
instance of a clas that inherits from the UIMA 
class Anotation
5
. UIMA allows developers to cre-
ate new types of annotations (in this example Or-
ganism, Antibiotic, and Susceptibility) that become 
Java classes. 
                                                             
5
 Documented at http:/uima.apache.org/d/uimaj-
2.3.1/api/index.html 
The compile method input string pattern uses 
XML tags to represent Anotation classes and tag 
attributes to denote the name of method calls and 
return values in the format of: 
 
<AnnotationClass methodName=“expected value” /> 
 
When the extra constraint of matching on some 
method return values is not neded, the tag atrib-
ute is left blank. Portions of the patern that are not 
contained in XML tags are compiled as Java regu-
lar expresions. For our example, the input patern 
would be: 
 
<Antibiotic /> = <Susceptibility /> 
 
or further constrained as: 
 
<Antibiotic getMedName=“ciprofloxacin” /> = 
<Susceptibility getValue=“S” /> 
 
which would only match if the particular medica-
tion (ciprofloxacin) and susceptibility (S) matched 
as well. 
The patern is converted into a finite state ma-
chine (FSM) in a proces described by Fegaras 
(205). With our patern, a four-state FSM would 
be generated. To arive in State 1, an Antibiotic 
annotation must match. To arive in State 2, a 
regular expresion for “=” must match. The Final 
State is reached when a matching Susceptibility 
annotation is found. Any other input would result 
in a transition back to the Start State. 
 
 
Figure 3: FSM for Antibiotic Susceptibility 
 
3.2 Match
Analysis 
The second phase of patern matching proceses 
the document text and annotation set to determine 
if any matches can be found. This phase is trig-
gered by a cal to the static matcher method that 
returns a new instance of an AnotationMatcher 
object. AnnotationMatcher is analogous to the Java 
Matcher
4
 class. 
 
AnnotationMatcher suscMatcher =  
  susceptibilityPattern.matcher(cas); 
 
This phase just checks to ensure that each ano-
tation type has at least one instance in the docu-
ment. Otherwise, a patern match is not posible. 
Here, the cas parameter refers to the UIMA 
141
Comon Analysis Structure, the object containing 
the document and annotation information. 
3.3 Finding
Matches 
The final phase of patern matching involves a call 
to the AnotationMatcher find method. This call 
results in a FSM traversal at the starting position 
parameter. Duplicate match candidates starting at 
the same point are poled in each state. The candi-
date pool in each state is traversed with a binary 
search algorithm, which reduces overal traversal 
time. Note the folowing example in which a rela-
tionship is created through a new user-defined An-
notation clas type.  
 
int position = 0 ; 
while(suscMatcher.find(position))  
{ 
AntibioticSusceptibility annotation =  
  new AntibioticSusceptibility(cas) ; 
annotation.setBegin(suscMatcher.start()) ; 
    annotation.setEnd(suscMatcher.end()) ; 
    annotation.addToIndexes() ; 
    position = matcher.end() ; 
}//while 
 
Similar to the Java Matcher
4
 find method, the 
first match is found from the starting position. The 
start and end positions are also set within the An-
notationMatcher instance object, which facilitates 
the creation of new anotations that span the com-
plete patern. The Anotation Librarian patern 
matching functionality allows the inclusion of an-
notations, which provides an added level of power 
beyond regular expresions on text data only. 
4 Retrieval

The retrieval methods alow developers to interact 
with anotations and metadata. This set of methods 
includes the ability to get the file name and path of 
the document, get all annotations in the document, 
and get all annotations of just a particular type. 
 
getDocumentPath() 
getAllAnnotations() 
getAllAnnotationsOfType( int type ) 
 
Ejection fraction is a heart health measurement. An 
NLP system was developed to identify the ejection frac-
tion from echocardiogram reports. In this project, the 
Annotation Librarian facilitated the extraction of specif-
ic anotation types (the section the concept was found 
in) in order to discover relevant concept-value pairs. 
In Figure 4, ejection fraction annotations are shown 
in red and quantitative and qualitative values in blue. 
Because “systolic function” can be used to report ejec-
tion fraction, but only when refering to the left side of 
the heart, it was important to retrieve the section anota-
tions and check the header. 
 
 
Figure 4: Annotated Echocardiogram Report 
5 Anotation
Modification 
The annotation modification methods allow previ-
ous annotations to be altered by triming 
whitespace and removing punctuation. While these 
are trivial tasks performed on Java Strings, an an-
notation is just a pointer to the text. Updating the 
annotation with the corect character span requires 
understanding of UIMA functions and can intro-
duce erors if not done carefully. The Anotation 
Librarian ensures accuracy by handling these tasks 
with straightforward programatic cals. 
 
trim( Annotation annotation ) 
removePunctuation( Annotation annotation ) 
 
Identifying the organisms from the microbiolo-
gy reports relied on spliting template text. The 
project described in Section 3 for patern matching 
utilized the Annotation Librarian functionality to 
clean up spurious characters and whitespace in-
cluded in annotations. 
6 Span
Overlap 
This set of methods describes how anotations re-
late to each other spatialy by answering questions 
such as: Does one anotation completely contain 
the other? Do the anotations overlap in the text? 
Do they both cover the same span of text? 
 
overlaps( Annotation a1, Annotation a2 ) 
contains( Annotation a1, Annotation a2 ) 
coversSameSpan( Annotation a1, Annotation a2 ) 
 
142
In a system built for identifying medications in 
discharge summaries, the brand and generic names 
would often both be listed. Name entity recogni-
tion would end up mapping at multiple granulari-
ties – brand name only, generic name only, brand 
and generic name combinations, and even name 
and dose combinations. The span overlap methods 
were used to identify and combine overlaping 
names. Figure 5 shows the anotations that were 
found and resolved using span overlaps. 
 
 
Figure 5: Medication Extraction Use Case 
7 Relative
Position 
The relative position methods alow developers to 
access annotations based on their position in the 
text to each other. These methods can determine 
the next or previous adjacent annotation or the text 
that exists betwen two annotations. Often, a task 
required determining which concepts were found 
in the same sentence or finding all concepts in a 
certain section. Methods in this set provide func-
tionality to find anotations that covering the span 
of another annotations or all annotations contained 
within the span of another annotation. 
 
getContainingAnnotations( Annotation a1 ) 
getNextClosest( Annotation a1 ) 
getPreviousClosest( Annotation a1 ) 
getTextBetween( Annotation a1, Annotation a2 ) 
 
As part of a project to determine coreference in dis-
ease outbreak reports, the ability to determine relative 
position facilitated coreference resolution. It was also 
necesary to determine relationships betwen certain 
types of anotations from the window of the text. The 
Annotation Librarian simplified the task of determining 
co-location by providing the functionality within a sin-
gle method call. Text between two Anotation objects 
was similarly identified with a single method call. 
 
 
Figure 6: Disease Outbreak Reports Use Case 
8 Conclusion

The Annotation Librarian was developed and mod-
ified over a number of different NLP use cases. 
Because of the diversity of tasks in each of these 
use cases, the toolkit includes functionality com-
mon to various types of NLP system development. 
It includes over two-dozen functions that were 
used more than one hundred times in each of the 
four systems listed above. Use of this interface re-
duced the amount of repeated code; it simplified 
comon tasks, and provided an intuitive interface 
for NLP-centric annotation management without 
requiring the presence of an NLP developer who 
has intimate knowledge of the UIMA data struc-
ture. The extended capability provided by the pat-
tern matching methods allows system developers 
to capitalize on the pipeline aproach to NLP de-
velopment in determining paterns. The ability to 
use annotations along with text significantly in-
creases the types of paterns that can be identified 
without complex regular expresions. 
9 Future
Plans 
The Anotation Librarian has been enhanced over 
the course of a number of biomedical NLP use 
cases and we plan to continue to enhance the inter-
face as new use cases arise. Some planed en-
hancements include performance improvements 
and expanding the AnotationPattern input patern 
syntax to include regular expresions for method 
return values and annotation clas names. We plan 
to provide aditional functionality such as patern 
frequency counts. 
We se the ability for the Anotation Librarian 
to help identify patterns through active learning or 
143
unsupervised techniques. In this way, relationships 
betwen annotations could be infered based on 
those existing in the document set. Such function-
ality would also provide the ability for more intel-
ligent analysis of future document sets or 
observation systems by alowing previously identi-
fied relationships to be utilized in other use cases. 
Acknowledgments 
This work was suported using resources and facil-
ities at the VA Salt Lake City Health Care System 
with funding suport from the VA Informatics and 
Computing Infrastructure (VINCI), VA HSR HIR 
08-204 and the Consortium for Healthcare Infor-
matics Research (CHIR), VA HSR HIR 08-374. 
Views expresed are those of the authors and not 
necesarily those of the Department of Veterans 
Affairs. 
References 
 
Annin Coden, Guergana K. Savova, Igor L. Sominsky, 
Michael A. Tanenblatt, James J. Masanz, Karin 
Schuler, James W. Coper, Wei Guan, Piet C. de 
Groen. 2009. Automaticaly extracting cancer dis-
ease characteristics from pathology reports into a 
Disease Knowledge Representation Model. J Bio-
med Inform. 209 Oct;42(5):937-49. 
 
Christopher M. Frenz. 207. Deafnes mutation min-
ing using regular expresion based patern match-
ing. BMC Med Inform Decis Mak. 207 Oct 
25;7:32. 
 
Cyril Grouin, Louise Deléger, and Piere Zweigen-
baum. 2009. COKAINE, A Simple Rule-based 
Medication Extraction System. i2b2 Workshop in 
conjunction with the AMIA Anual Symposium, 
San Francisco, CA; November 13, 209. 
 
David Feruci and Adam Laly. 204. UIMA: An Ar-
chitectural Approach to Unstructured Information 
Procesing in the Corporate Research Environment. 
Natural Langage Engineering 10(3–4): 327–348. 
 
David Ferucci, Eric Brown, Jenifer Chu-Carol, 
James Fan, David Gondek, Aditya A. Kalyanpur, 
Adam Laly, J. Wiliam Murdock, Eric Nyberg, 
John Prager, Nico Schlaefer, and Chris Welty. 
2010. Building Watson: An Overview of the 
DeepQA Project. AI Magazine. Vol 31. No 3. 
 
Guergana K. Savova, Karin Kiper-Schuler, James D. 
Buntrock, Christopher G. Chute. 208. UIMA-
based clinical information extraction system. LREC 
2008: Towards enhanced interoperability for large 
HLT systems: UIMA for NLP. 
Jenifer H. Garvin, Bret R. South, Dan Bolton, Shuy-
ing Shen, Scott L. DuVall, Bruce Bray, Paul Hei-
denreich, Mathew H. Samore, and Mary K. 
Goldstein. 201. Automated Extraction of Ejection 
Fraction (EF) for Heart Failure (HF) from VA 
Echocardiogram Reports. Department of Veterans 
Affairs Health Services Research and Development 
National Meeting. 201 Feb 16. 
 
John McCrae, Nigel Colier. 208. Synonym set ex-
traction from the biomedical literature by lexical 
patern discovery. BMC Bioinformatics. 2008 Mar 
24;9:159. 
 
Leonard W. D'Avolio, Thien M. Nguyen, Wildon R. 
Farwel, Yong Chen, Felicia Fitzmeyer, Owen M. 
Haris, Louis D. Fiore. 2010. Evaluation of a gen-
eralizable approach to clinical information retrieval 
using the automated retrieval console (ARC). J Am 
Med Inform Asoc. 2010 Jul-Aug;17(4):375-82. 
 
Leonidas Fegaras. 2005. Converting a Regular Ex-
presion into a Deterministic Finite Automaton. 
http:/lambda.uta.edu/cse5317/notes/node9.html. 
Puled February 2011. 
 
Saiful Akbar, Thomas Brox Røst, Laura Slaughter, 
and Øystein Nytrø. 2009. Extracting Medication In-
formation from Patient Discharge Sumaries. i2b2 
Workshop in conjunction with the AMIA Anual 
Symposium, San Francisco, CA; November 13, 
2009. 
 
Thiery Hamon and Natalia Grabar. 2009 . Concurent 
linguistic anotations for identifying medication 
names and the related information in discharge 
sumaries. i2b2 Workshop in conjunction with the 
AMIA Annual Symposium, San Francisco, CA; 
November 13, 209. 
 
Wendy W. Chapman, Wil Bridewel, Paul Hanbury, 
Gregory F. Coper, and Bruce G. Buchanan. 201. 
A Simple Algorithm for Identifying Negated Find-
ings and Diseases in Discharge Sumaries. Chap-
man W, Bridewel W, Hanbury P, Coper GF, 
Buchanan BG. J Biomed Inform. 201 
Oct;34(5):301-10. 
 
Zuofeng Li, Yongang Cao, Lamont Antieau, 
Shashank Agarwal, Qing Zhang, and Hong Yu. 
2009. Extracting Medication Information from Pa-
tient Discharge Sumaries. i2b2 Workshop in con-
junction with the AMIA Anual Symposium, San 
Francisco, CA; November 13, 209. 
144


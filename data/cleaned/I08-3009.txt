Proceedings of the IJCNLP-08 Workshop on NLP for Less Privileged Languages, pages 43–50,
Hyderabad, India, January 2008. c©2008 Asian Federation of Natural Language Processing
SriShell Primo: A Predictive Sinhala Text Input System
Sandeva Goonetilleke † Yoshihiko Hayashi ‡ Yuichi Itoh † Fumio Kishino ‡
sandeva.goonetilleke hayashi@lang. itoh@ist. kishino@ist.
@ist.osaka-u.ac.jp osaka-u.ac.jp osaka-u.ac.jp osaka-u.ac.jp
†Graduate School of Information Science and Technology, Osaka University
‡Graduate School of Language and Culture, Osaka University
Yamada oka, Suita, Osaka, Japan.
Abstract
Sinhala, spoken in Sri Lanka as an official
language, is one of the less privileged lan-
guages; still there are no established text in-
put methods. As with many of the Asian lan-
guages, Sinhala also has a large set of char-
acters, forcing us to develop an input method
that involves a conversion process from a
key sequence to a character/word. This
paper proposes a novel word-based predic-
tive text input system named SriShell Primo.
This system allows the user to input a Sin-
hala word with a key sequence that highly
matches his/her intuition from its pronuncia-
tion. A key to this scenario is a pre-compiled
table that lists conceivable roman character
sequences utilized by a wide range of users
for representing a consonant, a consonant
sign, and a vowel. By referring to this ta-
ble, as the user enters a key, the system gen-
erates possible character strings as candidate
Sinhala words. Thanks to a TRIE structured
word dictionary and a fast search algorithm,
the system successively and efficiently nar-
rows down the candidates to possible Sin-
hala words. The experimental results show
that the system greatly improves the user-
friendliness compared to former character-
based input systems while maintaining high
efficiency.
1 Introduction
The mother tongue of 14.6 million (74% of the total
Sri Lankan population of 19.7 million) Sri Lankans
is Sinhala (U S Department Of State, 2007). While
computing has become almost ubiquitous in the US
and Europe, Sinhala is inadequately supported on
computers. Sinhala is a less privileged language
that does not have even an efficient and highly user-
friendly text input system. This is a major bottleneck
in handling Sinhala text on computers in order to de-
velop any natural language processing tools. Even
though various kinds of Sinhala fonts and input ap-
plications have been proposed, the language is still
not well supported by computer systems. Hundreds
of Sinhala fonts have been developed, but most of
them have their own weaknesses. For example some
rare Sinhala characters (such as x15 ,x15x03 ) are miss-
ing in most of the fonts. Furthermore, the major
problems of the current input systems are the lack
of user-friendliness and efficiency.
The objective of this research is to propose an effi-
cient and highly user-friendly predictive Sinhala in-
put method, and to evaluate the efficiency and the
user-friendliness compared with other input meth-
ods. Here, efficiency is quantified by the aver-
age typing cost per Sinhala character, and user-
friendliness is quantified by ease of remembering.
The average edit distance between a user-intuitive
character sequence and the input sequences of each
input method is taken as a measurement of the dif-
ficulty of remembering. Our results have proved
that SriShell Primo has maximum user-friendliness
while maintaining high efficiency.
The rest of the paper is organized as follows. In
Section 2 we discuss various Sinhala input methods
proposed up to now, and their main features. The
main features of the proposed input method SriShell
43
Primo are explained in Section 3. The evaluations
are reported in Section 4. Section 5 concludes and
outlines future work.
2 Character-based Input Systems
This section reviews the representative Sinhala input
systems proposed so far.
These input methods are character-based, forcing
the users to memorize key assignments for each and
every Sinhala character. This is not an easy task be-
cause Sinhala has hundreds of combined characters.
2.1 Direct
Input Method
Sinhala fonts assign vowel characters, consonant
characters and vowel signs to the ASCII character
code. For example, Sinhala x10 (=a) was assigned to
0x61 (=ASCII ‘a’) in most of the fonts. In the di-
rect input method, users have to input the character
codes as assigned in a specific Sinhala font. A typ-
ical example of this kind of font is the “kaputadot-
com” font.1 Most of the online Sinhala sites includ-
ing news sites use these kinds of fonts.
Sinhala Unicode characters can also be input di-
rectly by entering the hexadecimal code. The arrow
(a) in Figure 1 shows an example of this method of
input.
2.2 Conversion
Systems
The direct input method assigns a key for each Sin-
hala character or a part of a character that may or
may not be phonetically associated. For this reason,
the key assignments are far from intuitive.
Natural SinGlish
To resolve this problem the Natural SinGlish
(Natural Singlish, 2004) typing application was in-
troduced by A. D. R. Sasanka. This application
converts the input sequence that is more natural for
users into character codes as shown in (b) of Fig-
ure 1. English spellings and the English pronuncia-
tions are the basis of this system. For example shree
la\nkaa →x32x37x20x0Bx48x00(=Sri Lanka). However, Sinhala
has many more characters than English. To avoid
ambiguity, this system has introduced several tech-
niques, such as:
1http://www.info.lk/slword/news.htm
Input
Sequences
0DC1 0DCA 200D 0DBB
0DD3 0020 0DBD 0D82
0D9A 0DCF
shree la\nkaa
shri) la\nka)
sxrii la/nkaa
sri lanka
sre lank
shree lankaa
sxrii la/nkaa
(a) Direct Inputa45
(b) Natural
SinGlish a45
(c) Sri
Shell a45
(d) SriShell
Primo a45
}
Text file a64
a63
0DC1 0DCA 200D
0DBB 0DD3 0020
0DBD 0D82 0D9A
0DCF
x32x37x20x0Bx48x00
Visual Output
x10 a45Sinhala font
Figure 1: Sinhala character input systems (takingx32x37
x20x0Bx48x00 (´sr¯i lam. k¯a : Sri Lanka) as an example)
• Capitals
a → x10(=a) ta → x90(=t.a)
A → x10x08(=æ) Ta → x98(=t.ha)
• Key combinations
ea → x17(=¯e) KNa → x80(=˜na)
oe → x19(=¯o) Sha → x38(=s.a)
• Dead keys: “\” is used as a dead key
\n → x0B(=x4E)
\h → x0A(=h)
This system is simply based on English spellings,
making the system quite complex. The characters
that have phonetic similarities cannot be typed in a
similar manner.
ka → x48(=ka) and kha → x50(=kha)
ta → x90(=t.a) but tha negationslash→ x98(=t.ha)
da → xA0(=da) and nnda → x68(=ˇnd.a)
ba → xE8(=ba) but nnba negationslash→ x70(= ˇmba)
This system is not very efficient in some cases be-
cause it uses a lot of upper case letters in the middle
of the words, where the user needs to press and re-
lease the shift-key frequently.
44
Sri Shell
Goonetilleke et al. have proposed a Sinhala typ-
ing system called Sri Shell (Goonetilleke et al.,
2007). Sri Shell assigns a key combination to each
Sinhala character ((c) of Figure 1). The basis of this
system is the phonetic notation of Sinhala charac-
ters.
Unlike the Natural SinGlish, Sri Shell has been
implemented as an independent module, which al-
lows the input of Sinhala text into any application
program. Principles of the Sri Shell system are as
follows.
• It is based on phonetic notation of the charac-
ters:
– All aspirated consonants can be produced
by adding an “h” to the unaspirated con-
sonants.
– Nasals can be produced by voiceless
vowel preceded by “/”.
– Nasal+voiced can be produced by voiced
vowel preceded by “/”.
• It is consistent:
– All long-vowels can be produced by dou-
bling the last character of a short-vowel.
– If two Sinhala characters map to the same
roman character, then these Sinhala char-
acters are differentiated by adding an “x.”
The “x” is added to the one that has a
lower occurrence rate.
• It is complete:
Most of the Sinhala input systems introduced
up to now have several missing characters. Es-
pecially rare characters such as x14x01 ,x14x02 ,x15,x15x03 are missing in most systems. Sri Shell
supports all the characters even though some
of them cannot be displayed with most of the
fonts.
2.3 Problems
on Input Systems
Goonetilleke et al. have introduced average edit dis-
tance (per Sinhala character) as a measurement of
user-friendliness. Even though they have succeeded
in limiting the average edit distance to 0.35 keys per
sinhala character, still the Sri Shell input sequence is
quite far from users’ natural intuition.
da
de
dha
x98(=da)
x98x08(=dæ)
x98x09(=d ¯æ)
xA0(=d.a)
xC8(=dha)
xC8x00(=dh¯a)
a45a88a88a88
a88a88a88a88
a88a122
a72a72
a72a72
a72a72
a72a72a106
a90a90
a90a90
a90a90
a90a90a126
a64
a64
a64
a64
a64
a64
a64a64a82
a45
a24a24a24a24
a24a24a24a24a58
a45
a45a88a88a88
a88a88a88a88
a88a122
Figure 2: Some many-to-many relationships in test
subjects’ proposals
Our experiments have proven that users expect to
get different Sinhala characters by typing the same
key sequence. A few examples of these kinds of sit-
uations are shown in Figure 2.
Unfortunately, all the Sinhala input methods pro-
posed up to now have a one-to-one (or many-to-one)
relationship between the input sequence and output
characters. For this reason users have to memorize
how to type each Sinhala character.
To overcome this problem a many-to-many pre-
dictive character conversion algorithm is required.
3 Proposal: Word-based Input System
Here we propose a Sinhala input system called Sr-
iShell Primo. SriShell Primo is a word-based predic-
tive converter. A number of predictive input meth-
ods have been proposed so far especially for hand-
held devices and mobile phones (MacKenzie et al.,
2007). Among them, eZiText(R) 2 supports some In-
dic scripts such as Hindi, Tamil, Malayalam etc. The
SriShell Primo users can input a Sinhala word by
typing it in the roman character sequence they think
is most appropriate. Even though the roman charac-
ter sequence for a specific Sinhala word may differ
from person to person, the SriShell Primo system is
still capable of guessing the Sinhala word intended
by the users. The user can select the intended word
from the candidate list. A screen shot of the system
is shown in Figure 3.
3.1 Main
Features
SriShell Primo has three main features.
2http://www.zicorp.com/eZiText.htm
45
Figure 3: Screen Shot of SriShell Primo
1. Covers all possible input sequences
The roman character sequence used to represent
each Sinhala word depends on the user. For exam-
ple:
− desei, dase, dese, daasee, desee, dasee, daesei,
dasay, deesee, desee, dhasay, dhese → x98x09x05x45
(=d ¯æs¯e:in eyes)
On the other hand the input sequences can be am-
biguous. For example:
− bata → xF0x90(=bhata:soldier), xE8x08x90(bæta:hurt),
xE8x90(=bata:bamboo or pipe),
xE8x00x90x00(=b¯at¯a:a trade name)
The SriShell Primo is capable of converting all these
possible sequences into the user-intended word.
2. Predicts possible words
SriShell Primo not only gives the Sinhala words
that could be completely represented by the input
roman character sequence, but the predicted Sinhala
words are also added into the menu dynamically.
3. Allows word combinations
Normally Sinhala words are separated by a space,
but we have found out in our preliminary experi-
ments that sometimes some users omit the space, es-
pecially in the case of frequently co-occurring word
pairs. SriShell Primo allows up to one space omis-
sion. Thus SriShell Primo gives word pairs also at
the end of the menu, if the number of word candi-
dates from the above methods is very small.
(a) (b)
(c) (d)
Figure 4: Text Entering Example
x10x00x13x05xE8x07x28xD5(¯ayub ¯ovan:Welcome)
Figure 4 demonstrates how the menu changes
dynamically as user enters the keys, taking
x10x00x13x05xE8x07x28xD5 (¯ayub ¯ovan:Welcome) as an example.
When the user starts typing with “a” SriShell Primo
gives a list of candidates in the menu that starts
with x10,x10x00,x10x08,x10x09 etc. as shown in Figure 4(a).
When the user types up to “ayub” the intended
word x10x00x13x05xE8x07x28xD5 appears for the first time in the
menu as the second choice (Figure 4(b)). Then
x10x00x13x05xE8x00x28xD5 rises to the first choice of the menu
when the user types up to “ayubov” (Figure 4(c)). A
user can select the menu at this point by pressing the
next required punctuation such as space, comma, pe-
riod etc. or he/she can type up to “ayubovan” (Fig-
ure 4(d)).
46
3.2 The
Algorithm
Input Sequences
Goonetilleke et al. have carried out an experiment
to find out how the most frequent Sinhala characters
are romanized by Sinhala speakers. We have fur-
ther divided the roman character sequence for each
Sinhala character into the consonant part, consonant
sign part and vowel part. Thus we got a table that
shows how each consonant, consonant sign or vowel
is romanized by various users, as shown in Table 1.
Table 1: Input variation table
x10x09 (= ¯æ) ← aee,a,e,aa,ae,ee
x12 (=¯i) ← ii,i,ee,e,ie,y
xBB (=ˇnd) ← /dx,nd,ndx,/d,d
x0E (=v) ← v,w,vu,wu,u
x17 (=¯e) ← ee,e,ei,ay
x35 (=´s) ← sx,z,sh,s
x75 (=ˇb) ← /b,b,mb
x6D (=ˇnd.) ← /d,nd,d
x5D (=ˇng) ← /g,ng,g
x10x08 (=æ) ← ae,a,e
. . .
Dictionary (TRIE structure)
We have used the Divaina online Sinhala news-
paper3 from January 2005 to May 2006 (about 50
MB of kaputadotcom font text) to create the dictio-
nary. This dictionary contains about 240,000 words
with their occurrence frequencies. To improve the
search speed, the words are stored in a TRIE struc-
ture, where each branch of the TRIE structure repre-
sents a consonant part, vowel part or consonant sign
part of a Sinhala character. Thus any single Sin-
hala character can be retrieved up to three hops. To
reduce the amount of memory required, at the be-
ginning this data structure is stored in the disk, and
when the user starts to type words, the required part
of the data structure is copied into the memory.
Procedure
When the user enters the text, SriShell Primo cre-
ates a list of all possible Sinhala character sequences
that can be represented by the user’s character se-
quence using the Input variation table. SriShell
3http://www.divaina.com/
Primo travels along the TRIE structure in order to
find out whether the Sinhala character sequences in
the list are real words or not. As a result a candi-
date list is created and sorted in descending occur-
rence frequency order. For example in Figure 4(a)
the candidates from 1 to 5 are created at this point.
Then SriShell Primo searches the Sinhala char-
acter sequence list to find out whether there is any
sequence that matches the beginning of a Sinhala
word. Those predicted words are also added at the
end of the candidate list. The candidates from 6 on-
ward in Figure 4(a) are added at this point.
If SriShell Primo was unable to find any candi-
dates up to this point, it searches for word pairs that
can be matched with the input character sequence,
assuming that the user could have omitted a space in
between.
Finally the SriShell (Goonetilleke et al., 2007)
conversion of the character sequence is also added
at the end of the candidate list, in order to allow
typing a new word that is not included in the dic-
tionary. The candidate number 0 in Figure 4(a) is
added at this point. This candidate list is displayed
as a menu, where the user can select the word that
he/she intended by using a mouse or up/down arrow
keys.
This process is repeated on each keystroke of the
user. The user can enter the selected item to his/her
document by striking the space key or any punctua-
tion key.
4 Evaluation
This section describes the evaluation of the pro-
posed input method. Following (Goonetilleke et al.,
2007), we have also evaluated the proposed method
in terms of efficiency and user friendliness.
4.1 Experiment
We have carried out an experiment to calculate
the efficiency and user-friendliness of the proposed
method. First, we allowed several minutes for the
test subjects to practice SriShell Primo. Then they
were asked to type a few paragraphs that contained
385 to 504 Sinhala characters from a general Sin-
hala newspaper. We informed them that they could
type any Sinhala word by inputting any roman char-
acter sequence that they think best to represent the
47
specific Sinhala word. SriShell Primo keeps a log
of typed keys, menu items selected, and time lapses
in between. This experiment was carried out on a
group of 6 subjects (2 female and 4 male, age 20-29
years).
4.2 Efficiency
The most general way to calculate efficiency is to ex-
perimentally compute the maximum typing speeds
for each input method. Masui (Masui, 1998) has
also used this measure to evaluate his character in-
put method. However, the input sequences of the ex-
isting input methods are quite far from the average
Sinhala computer users’ intuition, and it is not easy
to train people for typing Sinhala using those input
methods, in order to carry out an experiment to mea-
sure their efficiencies. Hence, instead of the actual
typing speed, Goonetilleke et al. have introduced av-
erage typing cost per Sinhala character, which rep-
resents the normalized typing speed, as a measure
for efficiency. They have defined the average typing
cost by Equation 1. There the weight of a normal key
is set to 1, and wshift and wrepeat are determined by
applying the least square method as shown in Equa-
tions 4 and 5.
typing cost = 1# Sinhala characters
× (normal keys
+ wshift ×shifts
+ wrepeat ×repeats) (1)
wshift = txY +tXyt
xy
−2 (2)
wrepeat = txxt
xy
(3)
where,
txy = average time lapse
between two alpha key strokes
txx = average time lapse
to repeat an alpha key stroke
txY = average time lapse
between an alpha key and a shifted alpha key
tXy= average time lapse
between a shifted alpha key and an alpha key
wrepeat = 0.87−0.73txy(|r| = 85%) (4)
wshift = 2.50−2.92txy(|r| = 69%) (5)
Accordingly we define average typing cost per
Sinhala character for SriShell Primo by adding the
menu selecting time factor as shown in Equation 6.
typing cost = 1# Sinhala characters
× (normal keys
+ wshift ×shifts
+ wrepeat ×repeats
+ wselect ×selections) (6)
wselect = tselt
xy
(7)
where,
tsel = average time taken to select
an item from the menu
Results
We have calculated the typing cost per Sinhala
character from our experiment. The results are
shown in Figure 5. The X-axis shows txy, the aver-
age time lapse between two alpha key strokes, while
the Y-axis shows the average typing cost per Sinhala
character. For comparison purposes we have plot-
ted the best result obtained by Goonetilleke et al. as
shown in Table 2.
Table 2: Average typing cost by Goonetilleke et al.txy best results Input Method
200 2.18 Sri Shell
400 2.16 Sri Shell
600 1.99 kaputadotcom
When comparing existing input methods SriShell
Primo has a very high degree of freedom in its in-
put character sequences. SriShell Primo has a pre-
dicting function embedded where the users can re-
duce keystrokes per Sinhala character. This means
the keystrokes per Sinhala character can be highly
variable from person to person in SriShell Primo.
Thus, unlike Goonetilleke’s experiment results, we
did not observe any correlation between the typing
speed and the typing cost per Sinhala character. This
implies that the efficiency of SriShell Primo is inde-
pendent of users’ typing speeds. However, we can
48
2.4
2
1.6
600400200
av
erage
typing
cost
average typing speed of subjects [milliseconds]
SriShell Primo
+
+
+ +
+
+
+best results upto now
Figure 5: Average typing cost
say that the efficiency of SriShell Primo is not worse
than Sri Shell and kaputadotcom because 4 out of
6 subjects who participated in our experiment were
able to type Sinhala text more efficiently compared
to the best efficiencies obtained by Goonetilleke’s
experiments.
4.3 User-friendliness
User-friendliness is strongly associated with how
easy it is to remember the predefined input sequence
for each Sinhala character. Goonetilleke et al. have
taken the difference between the input character se-
quences of each input method and user intuitive
character sequence as a measure of how difficult it
is to remember the input sequence for each Sinhala
character. They have measured the difference be-
tween the input key sequence of each input method
and the proposed romanized sequence by several
Sinhala speakers on several words by the edit dis-
tance between the two strings as shown in Equation
8.
avg edit dist = (8)
1
# Sinhala Chars ×edit dist(
user intuitive character sequence,
input sequence of specific input method)
Table 3: Average edit distances
Input Method Average edit distance
kaputadotcom 1.42
Sri Shell 0.44
Natural SinGlish 0.35
SriShell Primo ≤ 0.04
Edit Distance
The Levenshtein distance or edit distance be-
tween two strings is given by the minimum number
of operations needed to transform one string into the
other, where an operation is an insertion, deletion,
or substitution of a single character (Wagner et al.,
1974).
The user-friendliness of SriShell Primo is com-
pletely dependent on the input variation table (Ta-
ble 1). By adjusting this table it is possible to make
SriShell Primo accept all user intuitive input se-
quences. As we have included all the conversions
derived from Goonetilleke’s experiment, we can ex-
pect a very high level of user-friendliness.
However, if there is any lack of user-friendliness
in SriShell Primo, when the user tries to input a Sin-
hala word by entering the character sequence that
he/she thinks most appropriate to represent a specific
Sinhala word, he/she will not get that Sinhala word
as a candidate in the SriShell Primo menu. At that
point the user will have to correct the input character
sequence in order to get the correct Sinhala word. As
there may be other reasons for not having the user-
intended Sinhala word in the menu due to mistyp-
ings etc., we can say the edit distance between the
user intuitive input sequence and the input sequence
of SriShell Primo is absolutely less than or equal to
the edit dist between input sequence with errors and
input sequence without errors as shown in Equation
9.
edit dist(user intuitive input sequence,
input sequence of SriShell Primo)
≤ edit dist(input sequence with errors,
input sequence without errors) (9)
49
Results
As a measure of the user-friendliness, we have
calculated the average edit distance per Sinhala char-
acter, which should be less than or equal to typing
errors per Sinhala character. The results are shown
in Table 3 with Goonetilleke’s experiment results for
comparison.
The results show that there is a big difference be-
tween the user intuitive character sequence and the
input sequence proposed by kaputadotcom. Even
though Natural SinGlish and Sri Shell were able to
reduce this significantly, they were not good enough
for a novice user because they require the user to
memorize how to enter each Sinhala character. We
can say that SriShell Primo was able to remove this
barrier completely because anybody can enter Sin-
hala text correctly without acquiring any additional
knowledge. Our experiment shows that the users av-
erage error rate is 4%, which means that the users
were able to correctly type 96% of the Sinhala char-
acters in the text, given the current input variation
table.
At the same time SriShell Primo was able to keep
the efficiency to an average of 2.1 key strokes per
Sinhala character, and some users were able to re-
duce it to as few as 1.8 key strokes per Sinhala char-
acter. This reduction was achieved by the system’s
capability for predicting possible words while allow-
ing shorter key sequences.
5 Conclusions
and Future Work
This paper experimentally proved that the proposed
predictive Sinhala input method has maximum user-
friendliness, while maintaining high efficiency. This
method can also be well applied to other languages
with many characters but that lack well known 1-
to-1 correspondences between the written characters
and roman key sequences; these include Indic lan-
guages such as Sanskrit and Hindi.
Our future work has two main thrusts: to broaden
the applicability and to improve the prediction.
We need to have a dictionary with better cov-
erage to ensure better applicability. To do this,
we will develop a systematic and automatic way to
generate morpho-syntactically related derivational
word forms, and store them efficiently in the dictio-
nary. For example, our dictionary currently includes
{x58x40(=gasa : tree), x58x45(=gas : trees), x58x40x90(=gasat.a
: to tree), x58x05x45(=gas¯e : in tree), x58x40xBD(=gasat : tree
also), x58x43xBD(=gasut : trees also), x58x05x40xD5(=gasen
: from tree), . . .} etc. However, we would like
to generate these derivational forms from the root
x58x40(=gasa : tree).
On the other hand, to improve the accuracy of
prediction, we will explore two dimensions: adapta-
tion to an individual user and evaluation of linguistic
contexts (Hasselgren et al., 2003). We see that the
first dimension would enable a prompt improvement
and will seek a means to adjust the candidate order-
ing in the input variation table by looking at a user’s
natural preferences in the inputs.
Acknowledgement
This research was supported in part by “Global COE
(Centers of Excellence) Program” of the Ministry
of Education, Culture, Sports, Science and Technol-
ogy, Japan.
References
A. D. R. Sasanka 2004. Natural Singlish, http://
www.geocities.com/naturalsinglish/.
Robert A. Wagner and Michael J. Fischer 1974. The
String-to-String Correction Problem. Journal of the
ACM, Volume 21(1), 168–173.
Toshiyuki Masui 1998. An efficient text input method
for pen-based computers. Proceedings of the SIGCHI
Conference on Human Factors in Computing Systems,
328 – 335.
U S Department Of State 2007. Background Note: Sri
Lanka. http://www.state.gov/r/pa/ei/
bgn/5249.htm.
Sandeva Goonetilleke, Yoshihiko Hayashi, Yuichi Itoh,
Fumio Kishino 2007. An Efficient and User-friendly
Sinhala Input Method Based on Phonetic Transcrip-
tion. Journal of Natural Language Processing, Vol-
ume 14, Number 5, 147 – 166.
I. Scott MacKenzie, Kumiko Tanaka-Ishii 2007. Text
Entry Systems: Mobility, Accessibility, Universality.
Morgan Kauffman, 344 pages.
Jon Hasselgren, Erik Montnemery, Pierre Nugues,
Markus Svensson 2003. HMS: A Predictive Text En-
try Method Using Bigrams. Proceedings of the Work-
shop on Language Modeling for Text Entry Methods,
10th Conference of the European Chapter of the Asso-
ciation of Computational Linguistics 43 – 49.
50


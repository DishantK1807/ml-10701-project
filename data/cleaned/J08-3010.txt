Last Words
Empiricism Is Not a Matter of Faith
TedPedersen
∗
UniversityofMinnesota,Duluth
1. The Sad Tale of the Zigglebottom Tagger
“Hurrah,thisisit!”youexclaimasyousetdownthemostrecentissueof Computational
Linguistics. “This Zigglebottom Tagger is exactly what I need!” A gleeful smile crosses
your face as you imagine how your system will improve once you replace your tagger
from graduate school with the clearly superior Zigglebottom method. You rub your
hands together and page through the article looking for a way to obtain the tagger,
but nothingis mentioned. That doesn’t dampen your enthusiasm, so you search the
Web, but still nothing turns up. You persist though; those 17 pages of statistically
signiﬁcant results really are impressive. So you e-mail Zigglebottom asking for the
tagger.
Somedays,orperhapsweeks,later,yougetahesitantreplysaying:“We’replanning
toreleaseademoversionsoon,staytuned...”Orperhaps:“Wedon’tnormallydothis,
butwecansendyouacopy(informally)oncewecleanitupabit...”Ormaybe:“We
can’t actually give you the tagger, but you should be able to re-implement it from the
article.Justletusknowifyouhaveanyquestions...”
Stillhavingfaith,andlackinganybetteralternative,youdecidetore-implementthe
ZigglebottomTagger.Despitethreemonthsofon-and-offeffort,theendresultprovides
just the same accuracy as your old tagger, which is nowhere near that reported in the
article. Feelingsheepish, you conclude you must have misunderstood something, or
maybethere’sasmalldetailmissingfromthearticle.SoyoucontactZigglebottomagain
andexplainyourpredicament.Heeventuallyresponds:“We’lllookintothisrightaway
andgetbacktoyou...”
Ayearpasses.YouhavethegoodfortunetobumpintoZigglebottomattheAnnual
Meeting of the Association for Computational Linguistics (ACL). You angle for a seat
next to him duringa night out, and you buy him a few beers before you politely
resume your quest for the tagger. Finally, he confesses rather glumly: “My student
Pifﬂewhap was the one who did the implementation and ran the experiments, and if
he’d only respond to my e-mail I could ask him to tell you how to get it working, but
he’sgraduatednowandisapparentlytoobusytoreply.”
Afterafewmorebeers,Zigglebottomﬁnallyagreestogiveyouthetagger:“I’llsend
youtheversionofthecodeIhave,nopromisesthough!”Andtruetohisword,whathe
sends is incomplete and undocumented. It doesn’t compile easily, and it’s engineered
sothatajumbleofprogramsmustberuninanundisclosedkabalisticsequenceknown
only to (perhaps) the elusive Pifﬂewhap. You try your best to make it work every now
∗ DepartmentofComputerScience,1114KirbyDrive,UniversityofMinnesota,Duluth,MN55812,USA.
E-mail:tpederse@d.umn.edu.
©2008AssociationforComputationalLinguistics
ComputationalLinguistics Volume34,Number3
andthenforafewmonths,buteventuallyyougiveup,andgobacktousingthesame
oldtaggeryouusedbefore.
2. The Paradox of Faith-Based Empiricism
ThetaleoftheZigglebottomTaggerisoneofdisappointment,notjustforyoubutalso
for Zigglebottom himself. While his work achieved publication, it must gnaw at his
scientiﬁc conscience that he can’t reproduce his own results. The fact that you can’t
reproduce those results either raises questions, but those are resolved with a shrugof
yourshouldersandbygivingthebeneﬁtofthedoubttoZigglebottom.He’snotafraud;
there’sjustsomecrucialdetailthatisneitherrecordedinthearticlenorinthesoftware,
whichcan’tbeinstalledandruninanycase.
The problem here is not the Zigglebottom article; as a community we accept that
our publications don’t provide enough space to describe our elaborate 21st century
empiricalmethodsinsufﬁcientdetailtoallowforre-implementationandreproduction
ofresults.ThisistruedespitethegenerouspageallowancesinComputational Linguistics
andevenmoresoinourmuchmoreconstrainedconferenceproceedings.
What’s really missingis the software that produced the results that convinced the
reviewersthearticleshouldbepublished.Thisisparticularlytroublinggiventhehighly
empirical nature of the work reported in so many of our publications. We publish
page after page of experimental results where apparently small differences determine
the perceived value of the work. In this climate, convenient reproduction of results
establishesavitalconnectionbetweenauthorsandreaders.
Our community expects published papers to be rigorously reviewed and made
availableviaopenaccessassoonaspossible(e.g.,viatheACLAnthology
1
).Weexpect
thesupportingcorporaandlexicalresourceswillbemadeavailableevenifatsomecost
(e.g., via the Linguistic Data Consortium
2
). Yet, we do not have the same expectations
regarding our software. While we have table after table of results to pore over, we
usuallydon’thaveaccesstothesoftwarethatwouldallowustoreproducethoseresults.
This cuts to the core of whether we are engaged in science, engineering, or theology:
Scientists reproduce results; engineers build impressive and enduring artifacts; and
theologiansmuseaboutwhattheybelievebutcan’tseeorprove.
Beforeyoujudgetheanalogywiththeologyasbeingtooharsh,conductthefollow-
ingexperiment.Randomlyselectoneofyourownpublicationsfromayearortwoago
and think about what would be involved in reproducingthe results. How longwould
ittake,assumingyouwouldbeabletodoit?Ifyoucan’treproducethoseresults,why
doyoubelievethem?Whyshouldyourreaders?
Our inability to reproduce results leads to a debilitatingparadox, where we as
reviewers and readers accept highly empirical results on faith. We do this routinely,
to the point where we seem to have given up on the idea of being able to reproduce
results.Thisisthenaturalconsequenceoffaith-basedempiricism,andtheonlywayto
ﬁghtthatmovementiswithalittlebitofheresy.Let’snotacceptlargetablesofempirical
resultsonfaith,let’sinsistthatwebeabletoreproducethemexactlyandconveniently.
Let’s insist that we are scientists ﬁrst and foremost, and agree that this means that we
mustbeabletoreproduceeachother’sresults.
1 www.aclweb.org/anthology/.
2 www.ldc.upenn.edu/.
466
Pedersen EmpiricismIsNotaMatterofFaith
3. A Heretic’s Guide to Reproducibility
In many cases the failure to release software that allows results to be reproduced is
notaconsciousdecision,butratherunintentionalfalloutfromhowwemanageprojects
and set priorities in guiding our careers. What follows are a few simple ideas that any
researchercanadopttomakeitmucheasier(andmorelikely)toproducesoftwarethat
can not only be released but that will allow users to reproduce results with minimal
effort. As more of us use and release such software, our expectations as a community
will rise, and we’ll eventually see software releases as a natural part of the publication
process,muchaswenowviewdatasharing.
3.1 Release
Early, Release Often
The single greatest barrier to releasing software is that we don’t think about doing it
earlyenough.It’sonlywhenwegetthatﬁrste-mailaskingfortheimplementationofa
method discussed in Computational Linguistics thattheissue arises, and bythen it’stoo
late. At that point the task of convertingour code into a well-documented and easy to
usepackageisoftennearlyimpossible.
Beyond difﬁculties caused by poor documentation, the passage of time, and
turnover in project members, there can even be legal concerns. When projects do not
plantoreleasesoftware,it’softenthecasethatsystemdevelopmentwillincludestages
basedonhelter-skeltercuttingandpastingofcodefromothersources.Theeffectofthis
is to erase all traces of the origin of that code and the terms under which it was made
available.Onceyouhavegonedownthisroute,it’sveryhardtoconsiderreleasingthe
resultingsoftware.
However,ifyouplanfromthestarttodistributeyoursoftware,youwillinevitably
be guided by considerations that are important to your potential audience. You will
chooselicenses,hardwareplatforms,andprogramminglanguagesthatavoidanyobvi-
ousbarrierstodistributionanduse.YouwilldevelopaninfrastructureofWebservices,
softwarerepositories,andmailingliststhatwillevolvewithyourproject.Youwillavoid
haphazard development methodologies that lead to disorganized and impossible-to-
maintain code. The prospect of havingactual external users of your software will
inspire a discipline and orderliness on your development and deployment processes
that will likely result in much better software than if you developed it for internal use
only.
It is true that releasingsoftware that is both usable and reliable requires a strong
handtoguidesystemdevelopment,andthat’saskillthatmanyresearchersdon’t think
theyhave.However,it’sreallyquitesimpletodevelop.Allyoumustdoisplaythepart
of a demandingyet naive client from time to time from the very start of the project.
Insist that the code be easy to install and use and that the results that come from it
be easy to understand and absolutely reproducible. If the project is too large for you
to play this role yourself, assign it to one or more members of your team, and make
sure they play the part as if they are a new user encounteringthe system for the ﬁrst
time.
If you do this from the beginning of a project it takes surprisingly little time, and
you end up with much better documentation and software, and a system that can be
easilyandconvenientlyusedtoreproduceresultsbothbyoutsideusersandbyyourself
afterthepassageofsometime.
467
ComputationalLinguistics Volume34,Number3
3.2 Measure
Your Career in Downloads and Users
Researcherssometimesfallintothetrapofseeingsoftwareandreproductionofresults
asfrills,andnotessentialcomponentsintheircareerdevelopment:“AsmuchasIwould
liketo,Idon’thavethetimetoproducedistributablecode.Besides,mypromotionwill
bebasedonpublicationsandgrants,notsoftwarereleases...”
Thissuggests thatyoucaneitherspendyourtimecreatingandreleasing software,
or you can spend it writinggrant proposals and papers, but not both. This overlooks
a very happy side-effect that comes from creatingreleasable code—you will be more
efﬁcientinproducingnewworkofyourownsinceyoucaneasilyreproduceandextend
yourownresults.
Thereisalsoadangerthatthisattitudewillevolveovertimeintoaself-perpetuating
cycle:“I’veworkedonthisforXyears,whywouldIjustgiveitaway?”Thisignoresthe
factthat“givingitaway”willmakeiteasierforotherstouseyourwork,becauseifyou
don’t make your code available, who is really going to spend years re-implementing
whatyoudid?
Webber (2007) draws attention to the amount of time our community wastes in
writingand reviewingpapers that are rejected and eventually abandoned. In a similar
vein,weshouldallthinkaboutthetimewecostourcommunitywhenwedon’trelease
software and make anyone who is interested in usingor validatingour work do their
ownimplementation.
Ifsoftwareisreleasedpubliclyunderoneofthestandardlicensesthatprotectsyour
copyright (e.g., the GNU General Public License
3
or the Mozilla Public License
4
) then
thereislittledangerofyourworkbeingmisappropriated,andyouwillbuildareservoir
of good will within our community. Most users don’t want to steal from you; they
simplywanttouseyourcodetobuildtheirownsystemwhilegivingyouallthecredit
thatisyourdue.Asyoursoftwareacquiresafollowing,youcanusethatasafoundation
forofferingtutorialsandworkshopsandothermeansofdisseminationthatwillincrease
yourvisibilityintheresearchcommunity,therebyenhancingthecredibilityandimpact
oftheworkyouhavedone.
3.3 Ensure
Project Survivability By Releasing Software
Releasedsoftwarecanallowyourprojecttosustainitselfdespiteturnoverinpersonnel
and the passage of time. There is no greater satisfaction than opening up a software
release that has not been used for a few years and immediately beingable to start
producing meaningful results, without having to reverse engineer it or trace through
code line by line. The more time passes, the more you become just like every other
potentialuserofyoursoftware;so,asyouarecreatingit,rememberthatinafewyears
yourmemoryofallthedetailsthatnowseemsoobviouswillhavefaded,andyouwill
be grateful for a job well done, and that will translate into time saved as you begin to
usethatsoftwareagain.
Imaginemeetingwithanewprojectmemberandbeingabletosay:“Godownload
thissoftware,readthedocumentation,installit,runthescriptthatreproducesourACL
experiments,andthenwecanstarttalkingtomorrowabouthowyouaregoingtoextend
thatwork...”Thislowersthebarforentrytoyourprojectfornewcolleagues,andsaves
3 www.gnu.org/copyleft/gpl.html.
4 www.mozilla.org/MPL/.
468
Pedersen EmpiricismIsNotaMatterofFaith
your existingteam considerable time when introducinga new member to the work of
yourgroup.
Althoughyouwon’tspendmuchtimethinkingaboutitatthestartofaproject,your
students will graduate, post-docs will move on, employees will resign, and you might
evenﬁndabetterjobsomewhere.Havingpubliclyreleasedsoftwarehelpsclarifywhat
rights former project members have once they have left a project. This is a painfully
murkyarea,anditcanleadtomanymisunderstandingsandbadfeelingsthattaketime
andenergytodealwithastheyarise.
That confusion can also cause former colleagues to distance themselves from a
project simply because they feel they don’t have the right to participate, and in fact
insomecasestheymaynotevenhaveaccesstoorcopiesoftheverysystemtheyspent
all those months or years workingon. This difﬁcult situation is absolutely avoided if
you release the software: Your former colleagues will have exactly the same rights as
anyoneelse.Theycanremainapartofthecommunityofusers,testers,anddevelopers,
andcanoftenprovidevaluablecontinuityinaprojecteveniftheyhavemovedtoanew
projectororganization.Thesameistrueforyou.Supposeyoumovefromtheacademic
world to a position in industry: If your project code has already been released prior to
this move, then you can safely continue to use it without fear of losingcontrol of it to
yournewemployer.
3.4 Make
The World A Better Place
Finally,althoughthisviewpointmayseemquaintornaive,agreatdealofourresearchis
fundedbypublictaxdollars,bypeoplewhomaketendollarsanhourwaitingtablesor
standingbehindacounterinaconveniencestorefor12hoursatatime.Wearefortunate
to do what we do: even if it takes many hours and causes great personal stress, in the
end the work is challenging and satisfying, and compared to how most people in the
worldliveandwork,weareleadingcharmedandprivilegedlives.
Althoughmosttaxpayerswon’thavemuchinterestinreadingourpapersandrun-
ningourcode,theyoughttohavethatopportunity.Andwhoknows,maybewhentheir
children take a Computational Linguistics or Artiﬁcial Intelligence class they will run
acrossapieceofourpubliclyavailablecodethatwillcausethemtopauseandthink,and
maybe inspire them to try somethingnew or different, maybe even make them think
about becomingone of our community. It’s not the most likely scenario, but it seems
likewereallyoughttotrytogivebackasmuchaswecantothegreaterpublicgood.
4. What should Computational Linguistics Do?
Weseemasacommunitytohaveacceptedaverycuriousstateofaffairs.Asreviewers
andreadersofComputational LinguisticsandtheproceedingsofACLconferences,wein-
sistuponextensive,rigorous,andﬁne-grainedevaluations,wherethedifferenceinper-
formance between competingmethods is sometimes rather small. However, we don’t
expecttobeabletoreproducetheseresultsormodifytheseexperimentsinanyway.
With the rise of search engines as a source of linguistic data, we may have even
reachedapointwherewedon’texpectourdatatobereproducibleduetothearbitrary
results they provide. Kilgarriff (2007) argues, “Googleology is bad science,” to which
wewouldsimplyadd“becauseitisnotreproducible.”
But instead of insistingupon reproducibility, we tell ourselves to think about
the bigger picture, to focus on the ideas and not the software, as those are just “im-
plementationissues.”Thisisadebilitatingparadox,becauseresultsmustbesupported
469
ComputationalLinguistics Volume34,Number3
experimentally with great precision and detail and are judged according to harsh em-
piricalstandards,butweasreadersandreviewersareaskedtoacceptthattheseresults
areaccurateandreproducibleonfaith.
Ifwebelieveinempiricalmethodsandthevalueofcomparisonsandexperimental
studies,thenwemustalsobelieveinhavingaccesstothesoftwarethatproducedthose
resultsasanecessaryandessentialpartoftheevidentiaryprocess.Withoutthatweare
asked to re-implement methods that are often too complicated and underspeciﬁed for
thistobepossible,ortoacceptthereportedresultsasamatteroffaith.
There are two courses of action open to us. One is to back away from the very
stringent standards that focus on evaluation and comparisons of empirical results; to
approach things more with a focus on bigger ideas, and less on statistically signiﬁcant
empirical results. This is not necessarily a bad thing, and might address concerns such
asthoseraisedbyChuch(2005)aboutveryconservativereviewinginourﬁeldandthe
resultingtendencytopreferincrementalimprovements.
However,theotherpathistoaccept(andinfactinsist)thathighlydetailedempirical
studies must be reproducible to be credible, and that it is unreasonable to expect that
reproducibility be possible based on the description provided in a publication. Thus,
releasingsoftware that makes it easy to reproduce and modify experiments should be
an essential part of the publication process, to the point where we might one day only
acceptforpublicationarticlesthatareaccompaniedbyworkingsoftwarethatallowsfor
immediateandreliablereproductionofresults.
Acknowledgments
IwouldliketothankRobertDalefor
suggestingthistopic,andforhismany
helpfulcommentsandsuggestions.
References
Chuch,Kenneth.2005.Reviewingthe
reviewers. Computational Linguistics,
31(4):575–578.
Kilgarriff,Adam.2007.Googleologyisbad
science. Computational Linguistics,
33(1):147–151.
Webber,Bonnie.2007.Breakingnews:
Changingattitudesandpractices.
Computational Linguistics,33(4):607–611.
470


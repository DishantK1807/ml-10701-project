<algorithm name="ParsCit" version="080917">
<citationList>
<citation valid="true">
<authors>
<author>Steven Bird</author>
<author>Mark Liberman</author>
</authors>
<title>A formal framework for linguistic annotation. Speech Communication</title>
<date>2001</date>
<pages>33--1</pages>
<contexts>
<context>annotation-based representation for recording, and transmitting, results of individual component analysis (Cunningham and Scott, 2004). Beyond the generalized view of annotation formats developed in (Bird and Liberman, 2001), annotation-based representational schemes have evolved to support complex data models and multiply-layered annotation-based analyses over the same corpus. For instance, to address some issues of re</context>
</contexts>
<marker>Bird, Liberman, 2001</marker>
<rawString>Steven Bird and Mark Liberman. 2001. A formal framework for linguistic annotation. Speech Communication, 33(1–2):23–60.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Steven Bird</author>
<author>Peter Buneman</author>
<author>Wang-Chiew Tan</author>
</authors>
<title>Towards a query language for annotation graphs</title>
<date>2000</date>
<booktitle>In Second International Language Resources and Evaluation Conference</booktitle>
<location>Athens, Greece</location>
<contexts>
<context>lem of scanning an unambiguous stream of ‘like’ objects, in our case (UIMA) annotations. Broadly speaking, we address similar challenges to those identified by research on querying annotation graphs (Bird et al., 2000). However, rather than focusing on strongly hierarchical representations and mapping queries to a relational algebra (SQL) as in for instance (Lai and Bird, 2004), we seek a solution ultimately roote</context>
</contexts>
<marker>Bird, Buneman, Tan, 2000</marker>
<rawString>Steven Bird, Peter Buneman, and Wang-Chiew Tan. 2000. Towards a query language for annotation graphs. In Second International Language Resources and Evaluation Conference, Athens, Greece, May.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Branimir Boguraev</author>
<author>Mary Neff</author>
</authors>
<title>An annotationbased finite state system for UIMA: User documentation and grammar writing manual. Technical report, IBM T.J. Watson Research Center, Yorktown Heights</title>
<date>2007</date>
<location>New York</location>
<contexts>
<context>straints over annotation configurations can be succinctly expressed and efficiently carried out by an interpreter largely operating over an FST graph. The full language specification can be found in (Boguraev and Neff, 2007). The AFst framework is fully implemented as a UIMA annotator, complete with grammar and symbol compilers and a runtime engine. A number of optimizations (most prominently to do with pre-indexing of </context>
</contexts>
<marker>Boguraev, Neff, 2007</marker>
<rawString>Branimir Boguraev and Mary Neff. 2007. An annotationbased finite state system for UIMA: User documentation and grammar writing manual. Technical report, IBM T.J. Watson Research Center, Yorktown Heights, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Branimir Boguraev</author>
</authors>
<title>Towards finite-state analysis of lexical cohesion</title>
<date>2000</date>
<booktitle>In Proceedings of the 3rd International Conference on Finite-State Methods for NLP, INTEX-3</booktitle>
<location>Liege, Belgium</location>
<contexts>
<context>l approaches address the problem of matching over annotations. Abstractly, two broad categories can be observed. A class of systems, like those inspired by (Grefenstette, 1999), (Silberztein, 2000), (Boguraev, 2000), (Grover et al., 2000), (Simov et al., 2002), essentially deconstruct an annotations store data structure into a string (suitably adorned with in-line annotation boundary information) and apply FS m</context>
<context>range of named entity detection systems, in a variety of domains. Named entity detection has typically been interleaved with shallow syntactic parsing, also implemented as a cascade of AFst grammars (Boguraev, 2000). The ability to mix, within the same application, syntactic and semantic operations over an annotations store offers not just well known benefits like generalizing over syntactic configurations with</context>
</contexts>
<marker>Boguraev, 2000</marker>
<rawString>Branimir Boguraev. 2000. Towards finite-state analysis of lexical cohesion. In Proceedings of the 3rd International Conference on Finite-State Methods for NLP, INTEX-3, Liege, Belgium, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Steve Cassidy</author>
</authors>
<title>XQuery as an annotation query language: a use case analysis</title>
<date>2002</date>
<booktitle>In Third International Language Resources and Evaluation Conference</booktitle>
<location>Las Palmas, Spain</location>
<contexts>
<context> attractions to using XML (with its requisite supporting technology, including e.g. schemas, parsers, transformations, and so forth) to emulate most of the functions of an annotations store (but see (Cassidy, 2002) for an analysis of some problems of adopting XML as an annotation data model, with XQuery as an interpreter). However, not all annotations stores can be rendered as strings with in-line annotations:</context>
</contexts>
<marker>Cassidy, 2002</marker>
<rawString>Steve Cassidy. 2002. XQuery as an annotation query language: a use case analysis. In Third International Language Resources and Evaluation Conference, Las Palmas, Spain, May.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hamish Cunningham</author>
<author>Donia Scott</author>
</authors>
<title>Software architectures for language engineering</title>
<date>2004</date>
<journal>Special Issue, Natural Language Engineering</journal>
<volume>10</volume>
<contexts>
<context>ns of robust and scalable architectures for natural language processing, crucially utilizing annotation-based representation for recording, and transmitting, results of individual component analysis (Cunningham and Scott, 2004). Beyond the generalized view of annotation formats developed in (Bird and Liberman, 2001), annotation-based representational schemes have evolved to support complex data models and multiply-layered </context>
</contexts>
<marker>Cunningham, Scott, 2004</marker>
<rawString>Hamish Cunningham and Donia Scott. 2004. Software architectures for language engineering. Special Issue, Natural Language Engineering, 10(4).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hamish Cunningham</author>
<author>Diana Maynard</author>
<author>Valentin Tablan</author>
</authors>
<title>JAPE: A Java annotation patterns engine</title>
<date>2000</date>
<tech>Technical Memo CS-00-10</tech>
<institution>Institute for Language, Speech and Hearing (ILASH), and Department of Computer Science, University of Sheffield, Sheffield</institution>
<contexts>
<context>nology on top of structured annotations which are ‘first-class citizens’ in their respective architecture environments is exemplified by a different class of systems, most prominently by GATE’s JAPE (Cunningham et al., 2000) and DFKI’s SProUT (Droˆzdˆzy´nski et al., 2004). While these two are substantially different, a crucial shared assumption boils down to the annotation traversal engine ‘knowing’ (with the knowledge </context>
</contexts>
<marker>Cunningham, Maynard, Tablan, 2000</marker>
<rawString>Hamish Cunningham, Diana Maynard, and Valentin Tablan. 2000. JAPE: A Java annotation patterns engine. Technical Memo CS-00-10, Institute for Language, Speech and Hearing (ILASH), and Department of Computer Science, University of Sheffield, Sheffield.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Witold Droˆzdˆzy´nski</author>
<author>Hans-Ulrich Krieger</author>
<author>Jakub Piskorski</author>
<author>Ulrich Sch¨afer</author>
<author>Feiyu Xu</author>
</authors>
<title>Shallow processing with unification and typed feature structures — foundations and applications. K¨unstliche Intelligenz</title>
<date>2004</date>
<marker>Droˆzdˆzy´nski, Krieger, Piskorski, Sch¨afer, Xu, 2004</marker>
<rawString>Witold Droˆzdˆzy´nski, Hans-Ulrich Krieger, Jakub Piskorski, Ulrich Sch¨afer, and Feiyu Xu. 2004. Shallow processing with unification and typed feature structures — foundations and applications. K¨unstliche Intelligenz, (1):17–23.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Ferrucci</author>
<author>Adam Lally</author>
</authors>
<title>UIMA: an architectural approach to unstructured information processing in the corporate research environment</title>
<date>2004</date>
<journal>Natural Language Engineering</journal>
<booktitle>Special Issue on Software Architectures for Language Engineering</booktitle>
<volume>10</volume>
<contexts>
<context>ctures (further enhanced by multiple analysis views within a document, and awareness of namespaces for feature structure types), the Unstructured Information Management Architecture framework (UIMA; (Ferrucci and Lally, 2004)3) offers the representational backbone for the requirements of the JULIE project, as well as the ability to support (or be isomorphic to) MAIS’ and GrAF’s multiple annotation layers. Such annotation</context>
</contexts>
<marker>Ferrucci, Lally, 2004</marker>
<rawString>David Ferrucci and Adam Lally. 2004. UIMA: an architectural approach to unstructured information processing in the corporate research environment. Natural Language Engineering, 10(4). Special Issue on Software Architectures for Language Engineering.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gregory Grefenstette</author>
</authors>
<title>Light parsing as finite state filtering</title>
<date>1999</date>
<booktitle>Extended finite state models of language, Studies in Natural Language Processing</booktitle>
<pages>86--94</pages>
<editor>In Andr´as Kornai, editor</editor>
<publisher>Cambridge University Press</publisher>
<location>Cambridge, UK</location>
<contexts>
<context>ated Work: Patterns over Annotations Several approaches address the problem of matching over annotations. Abstractly, two broad categories can be observed. A class of systems, like those inspired by (Grefenstette, 1999), (Silberztein, 2000), (Boguraev, 2000), (Grover et al., 2000), (Simov et al., 2002), essentially deconstruct an annotations store data structure into a string (suitably adorned with in-line annotati</context>
</contexts>
<marker>Grefenstette, 1999</marker>
<rawString>Gregory Grefenstette. 1999. Light parsing as finite state filtering. In Andr´as Kornai, editor, Extended finite state models of language, Studies in Natural Language Processing, pages 86–94. Cambridge University Press, Cambridge, UK.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Claire Grover</author>
<author>Colin Matheson</author>
<author>Andrei Mikheev</author>
<author>Marc Moens</author>
</authors>
<title>LT-TTT: A flexible tokenisation tool</title>
<date>2000</date>
<booktitle>In Proceedings of the Second International Conference on Language Resources and Evaluation</booktitle>
<pages>1147--1154</pages>
<location>Spain</location>
<contexts>
<context>ss the problem of matching over annotations. Abstractly, two broad categories can be observed. A class of systems, like those inspired by (Grefenstette, 1999), (Silberztein, 2000), (Boguraev, 2000), (Grover et al., 2000), (Simov et al., 2002), essentially deconstruct an annotations store data structure into a string (suitably adorned with in-line annotation boundary information) and apply FS matching over that strin</context>
</contexts>
<marker>Grover, Matheson, Mikheev, Moens, 2000</marker>
<rawString>Claire Grover, Colin Matheson, Andrei Mikheev, and Marc Moens. 2000. LT-TTT: A flexible tokenisation tool. In Proceedings of the Second International Conference on Language Resources and Evaluation, pages 1147–1154, Spain.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Udo Hahn</author>
<author>Ekaterina Buyko</author>
<author>Katrin Tomanek</author>
<author>Scott Piao</author>
<author>John McNaught</author>
<author>Yoshimasa Tsuruoka</author>
<author>Sophia Ananiadou</author>
</authors>
<title>An annotation type system for a datadriven NLP pipeline</title>
<date>2007</date>
<booktitle>In Linguistic Annotation Workshop (the LAW); ACL-2007</booktitle>
<location>Prague, Czech Republic</location>
<contexts>
<context>ave evolved to support complex data models and multiply-layered annotation-based analyses over the same corpus. For instance, to address some issues of reusability, interoperability and portability, (Hahn et al., 2007) at JULIE Lab1 have developed a comprehensive annotation type system capturing document structure and meta-information, together with linguistic information at morphological, syntactic and semantic l</context>
</contexts>
<marker>Hahn, Buyko, Tomanek, Piao, McNaught, Tsuruoka, Ananiadou, 2007</marker>
<rawString>Udo Hahn, Ekaterina Buyko, Katrin Tomanek, Scott Piao, John McNaught, Yoshimasa Tsuruoka, and Sophia Ananiadou. 2007. An annotation type system for a datadriven NLP pipeline. In Linguistic Annotation Workshop (the LAW); ACL-2007, Prague, Czech Republic, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nancy Ide</author>
<author>Keith Suderman</author>
</authors>
<title>GrAF: a graphbased format for linguistic annotation</title>
<date>2007</date>
<booktitle>In Linguistic Annotation Workshop (the LAW); ACL-2007</booktitle>
<location>Prague, Czech Republic</location>
<contexts>
<context>nally, initiatives like the NSF project on Unified Linguistic Annotation (ULA) and the Linguistic Annotation Framework (LAF) developed within ISO2 (see, for instance, (Verhagen et al., 2007)’s MAIS, (Ide and Suderman, 2007)’s GrAF) argue for the need for annotation formats to support multiple, independent, and alternative annotation schemes, where a specific type of e.g. semantic analysis can be maintained separately f</context>
</contexts>
<marker>Ide, Suderman, 2007</marker>
<rawString>Nancy Ide and Keith Suderman. 2007. GrAF: a graphbased format for linguistic annotation. In Linguistic Annotation Workshop (the LAW); ACL-2007, Prague, Czech Republic, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Catherine Lai</author>
<author>Steven Bird</author>
</authors>
<title>Querying and updating treebanks: A critical survey and requirements analysis</title>
<date>2004</date>
<booktitle>In Australasian Language Technology Workshop</booktitle>
<location>Sydney</location>
<contexts>
<context>esearch on querying annotation graphs (Bird et al., 2000). However, rather than focusing on strongly hierarchical representations and mapping queries to a relational algebra (SQL) as in for instance (Lai and Bird, 2004), we seek a solution ultimately rooted in ’linearizing’ the annotation lattice into an unambiguous annotation stream, so that traversal can be realized as a finite-state process. This fits better not</context>
</contexts>
<marker>Lai, Bird, 2004</marker>
<rawString>Catherine Lai and Steven Bird. 2004. Querying and updating treebanks: A critical survey and requirements analysis. In Australasian Language Technology Workshop, Sydney, December.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Youngja Park</author>
<author>Roy Byrd</author>
<author>Branimir Boguraev</author>
</authors>
<title>Automatic glossary extraction: beyond terminology identification</title>
<date>2002</date>
<booktitle>In Proceedings of the 19th International Conference on Computational Linguistics (COLING</booktitle>
<pages>772--778</pages>
<location>Taiwan</location>
<contexts>
<context>ver an annotations store offers not just well known benefits like generalizing over syntactic configurations with certain distributional properties—e.g. for terminology identification in new domains (Park et al., 2002). More recently, we combined fine-grained temporal expression parsing (realized as a kind of named entity recognition for time expressions) with shallow parsing for phrase, and clause, boundaries, fo</context>
</contexts>
<marker>Park, Byrd, Boguraev, 2002</marker>
<rawString>Youngja Park, Roy Byrd, and Branimir Boguraev. 2002. Automatic glossary extraction: beyond terminology identification. In Proceedings of the 19th International Conference on Computational Linguistics (COLING), pages 772–778, Taiwan.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Max Silberztein</author>
</authors>
<title>INTEX: An integrated FST development environment</title>
<date>2000</date>
<journal>Theoretical Computer Science</journal>
<volume>231</volume>
<contexts>
<context>er Annotations Several approaches address the problem of matching over annotations. Abstractly, two broad categories can be observed. A class of systems, like those inspired by (Grefenstette, 1999), (Silberztein, 2000), (Boguraev, 2000), (Grover et al., 2000), (Simov et al., 2002), essentially deconstruct an annotations store data structure into a string (suitably adorned with in-line annotation boundary informati</context>
</contexts>
<marker>Silberztein, 2000</marker>
<rawString>Max Silberztein. 2000. INTEX: An integrated FST development environment. Theoretical Computer Science, 231(1):33–46. Kiril Simov, Milen Kouylekov, and Alexander Simov.</rawString>
</citation>
<citation valid="true">
<title>Cascaded regular grammars over XML documents</title>
<date>2002</date>
<marker>2002</marker>
<rawString>2002. Cascaded regular grammars over XML documents.</rawString>
</citation>
<citation valid="true">
<date></date>
<booktitle>In Proceedings of the Second International Workshop on NLP and XML (NLPXML-2002</booktitle>
<location>Taipei, Tawian</location>
<marker></marker>
<rawString>In Proceedings of the Second International Workshop on NLP and XML (NLPXML-2002), Taipei, Tawian, September.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rohini K Srihari</author>
<author>Wei Li</author>
<author>Thomas Cornell</author>
<author>Cheng Niu</author>
</authors>
<title>Infoxtract: A customizable intermediate level information extraction engine. Natural Language Engineering. Marc Verhagen, Amber Stubbs, and James Pustejovsky</title>
<date>2008</date>
<contexts>
<context>facilitated by a special-purpose, ‘tree walk’ iterator. Note that this is a different, and potentially more flexible, solution than one deploying tree-walking automata, like reported for instance in (Srihari et al., 2008)—as it naturally addresses the variability in encoding schemes mediating between tree characteristics (possibly dependent upon linguistic theory and processing framework) and the corresponding annota</context>
</contexts>
<marker>Srihari, Li, Cornell, Niu, 2008</marker>
<rawString>Rohini K. Srihari, Wei Li, Thomas Cornell, and Cheng Niu. 2008. Infoxtract: A customizable intermediate level information extraction engine. Natural Language Engineering. Marc Verhagen, Amber Stubbs, and James Pustejovsky.</rawString>
</citation>
</citationList>
</algorithm>


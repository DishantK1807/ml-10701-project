Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 1113–1120
Manchester, August 2008
A Hybrid Generative/Discriminative Framework to Train a Semantic
Parser from an Un-annotated Corpus
Deyu Zhou and Yulan He
Information Research Centre
The University of Reading
Reading, RG6 6BX, UK
d.zhou@rdg.ac.uk, y.he@rdg.ac.uk
Abstract
We propose a hybrid genera-
tive/discriminative framework for se-
mantic parsing which combines the hidden
vector state (HVS) model and the hidden
Markov support vector machines (HM-
SVMs). The HVS model is an extension of
the basic discrete Markov model in which
context is encoded as a stack-oriented
state vector. The HM-SVMs combine the
advantages of the hidden Markov models
and the support vector machines. By
employing a modified K-means clustering
method, a small set of most representative
sentences can be automatically selected
from an un-annotated corpus. These
sentences together with their abstract an-
notations are used to train an HVS model
which could be subsequently applied on
the whole corpus to generate semantic
parsing results. The most confident
semantic parsing results are selected to
generate a fully-annotated corpus which is
used to train the HM-SVMs. The proposed
framework has been tested on the DARPA
Communicator Data. Experimental results
show that an improvement over the base-
line HVS parser has been observed using
the hybrid framework. When compared
with the HM-SVMs trained from the fully-
annotated corpus, the hybrid framework
gave a comparable performance with only
a small set of lightly annotated sentences.
c©2008. Licensed under the Creative Commons
Attribution-Noncommercial-Share Alike 3.0 Unported li-
cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).
Some rights reserved.
1 Introduction
Semantic parsing maps the natural language sen-
tences to complete formal meaning representa-
tions. Traditionally, research in the field of se-
mantic parsing can be divided into two categories:
rule-based approaches and statistical approaches.
Based on hand-crafted semantic grammar rules,
rule-based approaches fill slots in semantic frames
using word pattern and semantic tokens (Dowding
et al., 1994; Ward and Issar, 1994). Such rule-
based approaches are typically domain-specific
and often fragile. Statistical approaches are gen-
erally based on stochastic models. They can be
further categorized into three types: generative
approaches, discriminative approaches and a hy-
brid of the two. Generative approaches learn the
joint probability model, P(W,C), of input sen-
tence W and its semantic tag sequence C, com-
pute P(C|W) using the Bayes rule, and then take
the most probable tag sequence C. The hidden
Morkov model (HMM), being a generative model,
has been predominantly used in statistical seman-
tic parsing. It models sequential dependencies by
treating a semantic parse sequence as a Markov
chain, which leads to an efficient dynamic pro-
gramming formulation for inference and learning.
The hidden vector state (HVS) model (He and
Young, 2005) is a discrete HMM model in which
each HMM state represents the state of a push-
down automaton with a finite stack size. State
transitions are factored into separate stack pop
and push operations constrained to give a tractable
search space. The result is a model which is
complex enough to capture hierarchical structure
but which can be trained automatically from only
lightly annotated data. Discriminative approaches
directly model posterior probability P(C|W) and
1113
learn mappings from W to C. One representa-
tive example is support vector machines (SVMs)
(Vapnik, 1995). More recently, the hidden Markov
support vector machines (HM-SVMs) (Altun et al.,
2003) have been proposed which combine the flex-
ibility of kernel methods with the idea of HMMs to
predict a label sequence given an input sequence.
However, HM-SVMs require full annotated cor-
pora for training which are difficult to obtain in
practical applications. On the other hand, the HVS
model can be easily trained from only lightly an-
notated corpora. It is thus interesting to explore the
feasibility to combine the advantages of the HVS
model and the HM-SVMs.
We propose a hybrid generative/discriminative
framework here where a modified K-means clus-
tering method is first applied to select a small
set of the most representative sentences automat-
ically from an un-annotated corpus. These sen-
tences together with their abstract annotations are
used to train an HVS model which could be sub-
sequently applied on the whole corpus to generate
semantic parsing results. The most confident se-
mantic parsing results are selected to generate a
fully-annotated corpus which is used to train the
HM-SVMs. Experimental results show that an im-
provement over the baseline HVS parser has been
achieved using the hybrid framework. When com-
pared with the HM-SVMs trained from the fully-
annotated corpus, the hybrid framework gave a
comparable performance with only a small set of
lighted annotated sentences.
The rest of this paper is organized as follows.
Section 2 reviews other proposed hybrid gener-
ative/discriminative frameworks in recent years.
Section 3 briefly describes the HVS model and
the HM-SVMs followed by the presentation of the
proposed hybrid framework. In Section 4, exper-
imental setup and results are discussed. Finally,
Section 5 concludes the paper.
2 Related
Work
Combination of generative and discriminative
models for data classification has recently attracted
much interests in the machine learning community.
It has been shown theoretically and experimentally
in (Jaakkola and Haussler, 1998; Ng and Jordan,
2002; Bouchard and Triggs, 2004) that the hy-
brid model combines the complementary powers
of the both models. The first extensive study on hy-
brid models were discussed in (Jaakkola and Haus-
sler, 1998) where discriminative features were ex-
tracted using generative models and were later
used in discriminative models. More recently, the
HM-SVMs (Altun et al., 2003) have been proposed
which incorporate kernel methods into HMMs to
predict a label sequence given an input sequence.
There have also been several studies on explor-
ing the hybrid generative/discriminative frame-
works which combine the generative and discrim-
inative models in a pipelined way. One exam-
ple is the hybrid framework proposed in (Abou-
Moustafa et al., 2004) for sequential data classi-
fication. The framework employs HMMs to map
the variable length sequential data into a fixed size
P-dimensional vector that can be classified us-
ing any discriminative model. Experiments were
conducted on the NIST database for handwritten
digits and results showed a better recognition rate
than that of standard HMMs. Another example is
the hybrid generative/discriminative approach pro-
posed in (Holub et al., 2008) for detecting and
classifying object categories in the machine ver-
sion domain. In this approach, “Fisher Kernels”
were used to retain most of the desirable prop-
erties of generative methods and a discriminative
setting was used to increase the classification per-
formance. Experimental results showed signifi-
cant performance improvement over the generative
counterpart.
3 Methodologies
This section first introduces the hidden vector
state (HVS) model and the hidden Markov sup-
port vector machines (HM-SVMs) followed by
the presentation of the proposed hybrid genera-
tive/discriminative framework.
3.1 Hidden
Vector State Model
Given a model and an observed word sequence
W = (w1···wT), semantic parsing can be
viewed as a pattern recognition problem and the
most likely semantic representation can be found
through statistical decoding. If assuming that the
hidden data take the form of a semantic parse tree
C then the model should be a push-down automata
which can generate the pair 〈W,C〉 through some
canonical sequence of moves D = (d1···dT).
That is,
P(W,C) =
Tproductdisplay
t=1
P(dt|dt−1···d1) (1)
1114
For the general case of an unconstrained hierarchi-
cal model, D will consist of three types of proba-
bilistic move:
1. popping semantic category labels off the
stack;
2. pushing one or more non-terminal semantic
category label onto the stack;
3. generating the next word.
When considering a constrained form of au-
tomata where the stack is finite depth and 〈W,C〉
is built by repeatedly popping 0 to n labels off
the stack, pushing exactly one new label onto the
stack and then generating the next word, it defines
the Hidden Vector State (HVS) model in which
conventional grammar rules are replaced by three
probability tables.
Given a word sequence W, concept vector se-
quence C and a sequence of stack pop operations
N, the joint probability of P(W,C,N) can be de-
composed as
P(W,C,N) =
Tproductdisplay
t=1
P(nt|ct−1)P(ct[1]|ct[2···Dt])
P(wt|ct) (2)
where ct, the vector state at word position t, is a
vector of Dt semantic concept labels (tags), i.e.
ct = [ct[1],ct[2],..ct[Dt]] where ct[1] is the preter-
minal concept label and ct[Dt] is the root concept
label, nt is the vector stack shift operation at word
position t and take values in the range 0,...,Dt−1
and ct[1] = cwt is the new preterminal semantic
tag assigned to word wt at word position t.
3.2 Hidden
Markov Support Vector
Machines
To learn a function that assigns to a sequence of
words W = (w1···wT),wi ∈ W,i = 1,...T a
sequence of semantic tags C = c1c2 ...cT,ci ∈
C,i = 1,...T, a common approach is to deter-
mine a discriminant function F : W×C →Rthat
assigns a score to every input W ∈W := W∗ and
every semantic tag sequence C ∈ C := C∗, where
W∗ denotes the Kleene closure of W. In order to
obtain a prediction f(W) ∈C, the function is max-
imized with respect to f(W) = argmax
C∈C
F(W,C).
In particular, the function F(W,C) is assumed
to be linear in some combined feature represen-
tation of W and C in HM-SVMs (Altun et al.,
2003), F(W,C) := 〈w,Φ(W,C)〉. Given a set
of training data (Wi,Ci),i = 1,...N, the param-
eters w are adjusted so that the true semantic tag
sequence Ci scores higher than all other tag se-
quences C ∈ Ci := C\Ci with a large margin. To
achieve the goal, the following optimization prob-
lem is solved instead.
min
ξi∈R,w∈F
Cons
summationdisplay
i
ξi + 12bardblwbardbl2 (3)
s.t. 〈w,Φ(W,Ci)〉−〈w,Φ(W,C)〉≥ 1−ξi,
∀i = 1,...N and C ∈C\Ci
where ξi is non-negative slack variables allowing
one to increase the global margin by paying a lo-
cal penalty on some outlying examples, and Cons
dictates the desired trade off between margin size
and outliers. To solve the equation 3, the dual of
the equation is solved instead. The solution w∗ can
be written as
w∗ =
Nsummationdisplay
i=1
summationdisplay
C∈C
αi(C)Φ(Wi,C), (4)
where αi(C) is the Lagrange multiplier of the con-
straint associated with example i and Ci.
3.3 A
Hybrid Generative/Discriminative
Framework for Semantic Parsing
The framework of combining the HVS model and
the HM-SVMs is illustrated in Figure 1. It consists
of three main stages, Representative Sentences Se-
lection, Fully Annotated Corpus Generation, and
HM-SVM Training and Testing. Each of them is
discussed in details below.
• Representative Sentences Selection. Given an
un-annotated corpus, the modified K-means
clustering algorithm is first employed to se-
lect the most representative sentences for an-
notation. This is to avoid annotating the
whole corpus and hopefully the model trained
from the subset of the original corpus would
still give a similar performance when com-
pared with the model trained from the full
corpus. The modified K-means clustering al-
gorithm is described in Figure 3.3.
Initially, k different sentences are randomly
selected as the initial centroids. Then, each
sentence si in the training data is assigned to
one of the k clusters based on the similarity
measurement which will be discussed later.
1115
HM SVM  Training and Testing 
Fully Annotated Corpus Generation 
Representative Sentence Selection 
Un annotated  corpus 
Test Data ( Sentences ) 
HVS  model 
Parsing results filtering 
HVS training HVS parsing 
Clustering Annotating 
HM SVM  Training 
Classification 
Results 
Sentences and  their annotations 
Fully annotated  corpus Sentences and their  parsing sequences 
Representative  sentences 
HM SVM  Classifier 
Figure 1: The hybrid generative/discriminative framework for semantic parsing.
After that, the centroids of the k clusters are
recalculated. The above process repeats until
there are no further changes in the centroids.
The similarity between two sentences is cal-
culated based on sequence alignment. Sup-
pose a = a1a2···an and b = b1b2···bm are
the two word sequences of length of n and m,
Sim(i,j) is defined as the score of the op-
timal alignment between the initial segment
from a1 to ai of a and the initial segment from
b1 to bj of b, where Sim(i,j) is recursively
calculated as follows:
Sim(i,0) = 0,i = 1,2,...n
Sim(0,j) = 0,j = 1,2,...m
Sim(i,j) = max




0,
Sim(i−1,j −1)+s(ai,bj),
Sim(i−1,j)+s(ai,prime−prime),
Sim(i,j −1)+s(prime−prime,bj)
Here s(ai,bj) is the score of aligning ai with
bj and is defined as:
s(ai,bj) = log
bracketleftBig p(ai,bj)
p(ai)×p(bj)
bracketrightBig
(5)
where, p(ai) denotes the occurrence probabil-
ity of the word ai and p(ai,bj) denotes the
probability that ai and bj appear at the same
position in two aligned sequences.
To ensure that content words containing key
information are weighted more heavily than
the less relevant words such as function
words, a score matrix can then be built and
dynamic programming is used to find the
largest score between two sequences. The
distance between the two sentences is de-
fined as the negation of the similarity between
them.
After generating k clusters, the centroid in
each of the clusters is selected as the represen-
tative sentence for annotation. This results in
an exactly k sentences being selected. There
are however two ways to construct the anno-
tated corpus depending on the neighborhood
threshold value d. When d = 1, the anno-
tated corpus only contains k sentences. When
d < 1, both the centroid and some of its near-
est neighboring sentences in each cluster will
receive the same abstract annotation. Thus,
the annotated corpus will contain more than
k sentences. It has to be noted that in both
cases, only k sentences (centroids) need to be
annotated.
• Fully Annotated Corpus Generation. An
HVS model is trained from the annotated cor-
pus constructed in the previous stage which
is then applied to the original un-annotated
corpus to generate a semantic tag sequence
for each sentence. The generated semantic
tag sequences essentially define the explicit
word/tag alignments which could serve as the
full annotation required by HM-SVMs train-
ing. However, the HVS model does not guar-
antee to parse the sentences with 100% accu-
racy. Based on a user-defined parse probabil-
1116
Input: AsetofsentencesS={si,i=1,...,N}, a distancethresholdα, a neighborhoodthresholdd
Output:A setof representative sentencesR = {rj,j = 1,...,M}, anda setof thecentroidsof the
generatedclustersCent
Algorithm:
1. Foreachsi ∈S, setFlagi =1. InitializeRandCenttobeemptysets.
2. SelectsentencesfromS withFlagequalto 1 , thenreconstructˆS = {sj|Flagj = 1,j =
1,..., ˆN}, ˆNisthenumberofsentenceswithFlagequalto1inS.
3. Randomlyselectk differentsentencesck fromˆS, thedefaultvalueofk is1000. Constructk
clustersC={cl},l=1,...,k. SetNumOfFlag=bardblˆSbardbl
4. Loopforeachsentencessi ∈ ˆS
Loopforeachclustercl
Calculatethedistancebetweensi andthecentroidofcl. Distil =Distance(si,cl).
IfDistil <α, thencl =cluniontextsi, setFlagi =0,ExitLoop.
EndLoop
IfFlagi negationslash=0, thenfindtheclusterlprime =argmin
l
{Distil,l=1,...,k}, clprime =clprimeuniontextsi
EndLoop
Ifbardbl{si|si ∈ ˆS,Flagi =1}bardbl<NumOfFlag,thensetNumOfFlag=bardbl{si|si ∈ ˆS,Flagi =1}bardbl,
gotoStep4.
Cent=CentuniontextCentl,l=1,...,k,bardblclbardblnegationslash=0.
5. IfNumOfFlag>0thenGotostep2.
Else
R=RuniontextCent.
ConstructbardblCentbardblclustersˆC={cl},l=1,...,bardblCentbardbl.
Loopforeachsentencessi ∈S
Findtheclusterlprime =argmin
l
{Distil,l=1,...,bardblCentbardbl}, cprimel =cprimeluniontextsi
IfDistilprime <d, thenR=Runiontextsi
EndLoop
EndIf
Figure 2: A modified K-means clustering method.
ity threshold, the most confident parse results
are selected for the construction of the fully
annotated corpus.
• HM-SVMs Training and Testing. Given the
fully annotated corpus generated in the previ-
ous stage, the HM-SVMs can then be trained
which could later be used to derive the seman-
tic tag sequences for the test data.
4 Experiment
Experiments have been conducted on the DARPA
Communicator data (CUData, 2004) which are
available to the public as open source download.
The data contain utterance transcriptions and the
semantic parse results from the rule-based Phoenix
parser1. The DARPA Communicator data were
collected in 461 days. From these, 46 days were
randomly selected for use as test set data and the
remainder were used for training. After cleaning
up the data, the training set consist of 12702 utter-
ances while the test set contains 1178 utterances.
1http://communicator.colorado.edu/phoenix
The abstract annotation used for training and the
reference annotation needed for testing were de-
rived by hand correcting the Phoenix parse results.
For example, for the sentence “Show me flights
from Boston to New York”, the abstract annota-
tion would be
FLIGHT(FROMLOC(CITY) TOLOC(CITY)).
Such an annotation need only list a set of valid se-
mantic concepts and the dominance relationships
between them without considering the actual real-
ized concept sequence or attempting to identify ex-
plicit word/concept pairs. Thus, it avoids the need
for expensive tree-bank style annotations.
To evaluate the performance of the model, a ref-
erence frame structure was derived for every test
set sentence consisting of slot/value pairs. An ex-
ample of a reference frame is:
Show me flights from Boston to New York.
Frame: FLIGHT
Slots: FROMLOC.CITY = Boston
TOLOC.CITY = New York
Performance was then measured in terms of
F -measure on slot/value pairs, which combines
1117
Table 1: Feature templates used in HM-SVMs. wi
is the current word, and w1,...,wn is the entire
sentence.
Current word wi
Previous word wi−1
Word two back wi−2
Next word wi+1
Word two ahead wi+2
Bigram features wi−2,wi−1
wi−1,wi
wi,wi+1
wi+1,wi+2
Table 2: The number of representative sentences
vs the different settings of α and d.a72
a72a72
a72a72a72d
α 0.5 0.6 0.7 0.8 0.9
1 350 663 1068 1743 2763
0.6 6878 7596 9810 9640 11872
the precision (P) and recall (R) values with equal
weight and is defined as F = (P +R)/2PR.
In all the subsequent experiments, the open
source SVMhmm(Tsochantaridis et al., 2005) 2
has been used to train and test the HM-SVMs. The
features used in the HM-SVMs are listed in Ta-
ble 1.
4.1 Comparison
between HVS and
HM-SVMs
In the modified K-means clustering algorithm de-
scribed in Figure 3.3, the number of representative
sentences depends on both the distance threshold α
and the neighborhood threshold d. Table 2 shows
the number of representative sentences obtained by
varying α and d.
First, a set of experiments were conducted to
compare the performance of the HVS model with
the HM-SVMs only without incorporating the hy-
brid framework. Based on the different values of
d and α, we constructed different sets of the anno-
tated corpus. For example, when α = 0.5, there
are 350 clusters generated from a total of 12702
sentences in the un-annotated corpus. The centroid
from each of the cluster is then selected for annota-
tion. These 350 sentences were annotated with ab-
stract annotation for the HVS model training. And
they were also fully annotated by providing word-
level annotations for HM-SVMs training.
2http://www.cs.cornell.edu/People/tj/svm light/svm hmm.html
0.5 0.6 0.7 0.8 0.90.5
0.55
0.6
0.65
0.7
0.75
0.8
0.85
0.9
0.95
1
α
F−measure 
 
 
HM−SVMHVS (d = 1)
HVS (d = 0.6)
Figure 3: Comparisons of the performance of HVS
and HM-SVMs on different α.
Since only abstract annotations need to be pro-
vided for the HVS model training, it is possible to
automatically enlarge the annotated corpus by in-
cluding some of the neighboring sentences if the
same annotation of the centroid can be assigned to
them. This is controlled by varying the neighbor-
hood threshold d. If d = 1, then the annotated
corpus only contains 350 sentences with their ab-
stract annotations. If varying d to 0.6, then for each
cluster, some of the neighboring sentences also re-
ceive the same abstract annotation as that of the
centroid, thus the annotated corpus is enlarged to
contain 6878 sentences.
The performance comparison of the HVS and
the HM-SVMs is shown in Figure 3. It can be
observed that in general, HM-SVMs outperforms
HVS. This is not surprising as HM-SVMs was
trained from the fully annotated corpus. The HVS
model based on d = 0.6 achieved better perfor-
mance over the one based on d = 1 since the en-
larged annotated corpus was used for training. The
best performance given by HM-SVMs is 92.5%
of F-measure when α = 0.9 and 2793 annotated
sentences were used for training, while the HVS
model gave an F-measure of 86.9%.
Though HM-SVMs outperforms HVS by 5.5%,
it should be noted that the time consumed for
preparing the fully annotated corpus for HM-
SVMs is far more than the time spent for abstract
annotation for HVS as shown in Figure 4. When
α = 0.5, annotating 350 sentences with the ex-
plicit word/semantic tag mappings took about 17.5
hours while abstract annotation only took about 3
hours. When α = 0.9, the time spent on fully an-
notating 2763 sentences is almost six times that of
abstract annotation.
1118
0 
20 
40 
60 
80 
100 
120 
140 
1 2 3 4 5 
alpha 
hours 
Abstract Annotation Word level Annotation 
Figure 4: Comparison of time Consuming in
preparing training data for the HVS model and the
HM-SVMs.
4.2 Comparison
between HVS and the
Hybrid Framework with Clustering
Figure 5 shows the performance comparison be-
tween the HVS model and the hybrid framework
by varying α. It can be observed that when the size
of the annotated corpus is small, the HVS model
outperforms the hybrid framework. However, with
increased number of annotated sentences, the hy-
brid framework achieves the better performance.
For both the HVS model and the hybrid frame-
work, improved performance is observed by train-
ing the model/framework from the augmented an-
notated corpus with the neighboring sentences au-
tomatically added in (cf. Figure 5(a) and (b)).
We notice from Figure 5(a) that when the num-
ber of annotated sentences increases from 1743 to
2763, the performances of both the HVS model
and the hybrid framework decrease. By analyz-
ing the clustering results generated from the mod-
ified K-means algorithm, we found that some of
the clusters formed actually contain those rare sen-
tences and they represent the outliers of the orig-
inal training set. This therefore leads to the de-
creased performance of the HVS model and the
hybrid framework.
With only 2763 annotated sentences, the hybrid
framework trained under d = 0.6 achieves 88.5%
in F-measure which results in a relative error re-
duction of 12% when compared with the HVS
model where the F-measure value of 87.0% was
obtained.
4.3 Comparison
between HVS and the
Hybrid Framework without Clustering
Experiments have also been conducted to compare
the performance of the HVS model and the hy-
0.5 0.6 0.7 0.8 0.90.75
0.760.77
0.780.79
0.80.81
0.820.83
0.840.85
0.860.87
0.880.89
0.9
α
F−measure
 
 
HVSHybrid framework
(a) d = 1.
0.5 0.6 0.7 0.8 0.90.78
0.790.8
0.810.82
0.83
0.840.85
0.860.87
0.880.89
0.9
α
F−measure 
 
 
HVSHybrid framework
(b) d = 0.6.
Figure 5: Comparison of the performance of the
HVS model and the hybrid framework
brid framework without employing the modified
K-means clustering algorithm to automatically se-
lect the most representative sentences for annota-
tion. That is, the whole corpus of 12702 sentences
were provided with abstract annotations. Both
the HVS model and the hybrid framework were
trained from the training set which was formed by
randomly selecting the annotated sentences from
the original corpus. Figure 6 illustrates the perfor-
mance of the HVS model and the hybrid frame-
work versus the varying sizes of the training data.
Here 10-fold cross validation was performed and
the F-measure value at each point of the curve in
Figure 6 was calculated by averaging the perfor-
mance of the 10 experiments each time with dif-
ferent training set of the same size.
It can be observed that the performance of both
the HVS model and the proposed hybrid frame-
work increases with the increased size of the train-
ing data. The hybrid framework outperforms the
HVS model when the size of the training data is
beyond 6000. The improvement is more substan-
tial by incorporating more training data.
The best performance achieved by the HVS
model and the proposed hybrid framework is listed
1119
1 2 3 4 5 6 7 8 9 10 11 120.78
0.79
0.8
0.81
0.82
0.83
0.84
0.85
0.86
0.87
0.88
0.89
0.9
0.91
Number of Sentences in the Training data (*1000)
F−measure
 
 
HVSHybrid framework
Figure 6: Performance of the HVS model and the
hybrid framework vs the size of the training data.
in Table 3. It can be observed that the hybrid
framework gives the relative error reduction of
22% when compared with the performance of the
HVS model where only 87.97% was achieved.
Table 3: Performance comparison between HVS
and the hybrid framework.
Measurement HVS Hybrid Framework
Recall 87.81% 90.99 %
Precision 88.13% 90.25%
F-measure 87.97% 90.62%
It should also be noted that the best performance
of 87.97% in F-measure was obtained when the
HVS model was trained on the whole annotated
corpus of 12702 sentences. By employing the clus-
tering method to select the most representative sen-
tences, the hybrid framework trained with less than
one fourth of the original training data (2763 an-
notated sentences) achieves 88.53% in F-measure,
which is better than that of the HVS model.
5 Conclusions
This paper presented a hybrid framework by com-
bining the HVS model and the HM-SVMs for se-
mantic parsing. Experimental results show that
22% relative error reduction in F-measure was ob-
tained using the hybrid framework on the DARPA
Communicator Data when compared with the per-
formance of the HVS model. Furthermore, em-
ploying the modified K-means clustering algo-
rithm to automatically select the most representa-
tive sentences for annotation greatly reduces the
human effort for annotation. With only 2763
annotated sentences, the hybrid framework gives
the better performance compared with the HVS
model trained on the full 12702 annotated sen-
tences. Also, the hybrid framework gives the com-
parable performance with that of the HM-SVMs
but without the use of the expensive word-level an-
notations.
References
Abou-Moustafa, K.T., C.Y. Suen, and M. Cheriet.
2004. A generative-discriminative hybrid for se-
quential data classification. In Acoustics, Speech,
and Signal Processing, 2004 (ICASSP ’04), vol-
ume 5, pages 805–808.
Altun, Y., I. Tsochantaridis, and T. Hofmann. 2003.
Hidden markov support vector machines. In Inter-
national Conference in Machine Learning, pages 3–
10.
Bouchard, Guillaume and Bill Triggs. 2004. The trade-
off between generative and discriminative classifiers.
In Proc. of COMPSTAT 2004, pages 721–728.
CUData. 2004. Darpa communicator travel data.
university of colorado at boulder. Avaiable from
http://communicator.colorado.edu/phoenix.
Dowding, J., R. Moore, F. Andry, and D. Moran. 1994.
Interleaving syntax and semantics in an efficient
bottom-up parser. In Proc. of the 32th Annual Meet-
ing of the Association for Computational Linguistics,
pages 110–116, Las Cruces, New Mexico, USA.
He, Yulan and Steve Young. 2005. Semantic process-
ing using the hidden vector state model. Computer
Speech and Language, 19(1):85–106.
Holub, Alex D., Max Welling, and Pietro Perona1.
2008. Hybrid generative-discriminative visual cat-
egorization. International Journal of Computer Vi-
sion, 77:239–258.
Jaakkola, T. and D. Haussler. 1998. Exploiting genera-
tive models in discriminative classifiers. In Proc. of
Advances in Neural Information Processing 11.
Ng, A. and M. Jordan. 2002. On generative vs. dis-
criminative classifiers: A comparison of logistic re-
gression and naive bayes. In Proc. of Advances in
Neural Information Processing 15, pages 841–848.
Tsochantaridis, Ioannis, Thorsten Joachims, Thomas
Hofmann, and Yasemin Altun. 2005. Large mar-
gin methods for structured and interdependent output
variables. J. Mach. Learn. Res., 6:1453–1484.
Vapnik, Vladimir N. 1995. The nature of statistical
learning theory. Springer-Verlag New York, Inc.,
New York, NY, USA.
Ward, W. and S. Issar. 1994. Recent improvements in
the cmu spoken language understanding system. In
Proc. of the workshop on Human Language Technol-
ogy, pages 213–216, Plainsboro, New Jerey, USA.
1120


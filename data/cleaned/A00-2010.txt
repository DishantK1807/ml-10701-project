Generation in the Lambek Calculus Framework: an Approach with Semantic Proof Nets Sylvain Pogodalla sylvain.pogodalla @ xrce.xerox.com Xerox Researce Centre Europe 6, chemin de Maupertuis 38240 Meylan -France 1 Introduction Thc lincar logic (Girard, 1987) provides a powerful framcwork to cxprcss categorial gt'ammars (Ajdukicwicx, 1935) and Lambek calculus (Lambek, 1958), and a lot of work has presented proof nets uses for linguistic purposcs, with a special look at proof nets for Lambek calculus (Roorda, 1991; Lamarche and Retor6, 1996).
But they have mainly explored the syntactic capabilities of proof nets, describing parsing processes.
This paper wants to focus on the generation capabilities of proof nets thanks to their semantic readings as expressed in (de Groote and Retor6, 1996).
The main features of our proposal consist in the use of proof nets lot Lambek calculus, of the Curry-Howard isomorplaisna (Howard, 1980; Girard et al., 1988), of semantic proof nets with semantic expressions ?t la Montagu¢ (Montague, 1974; Dowry et al., 1981), and in an algorithm for proof search with a target proof net.
Unlike a previous proposal for generation in the Lambek calculus framework (Merenciano and Mort'ill, 1997), this point of view avoids the use of the A-term unification to lead the generation process.
And the algorithmic undecidability of this latter mechanism (from second order unification) does not occur any more.
In this work, we do not consider the choice of lexical items from a given semantic expression the syntactic rcalization of which we want to generate, but rather tile way we can associate given lexical entries to fit the given semantic expression and generate a syntactically correct cxpression.
For this purpose, we express our problem as a proof search one in (multiplicative) linear logic which is decidable.
Moreover, we characterize the semantic recipes of lexical items that provide a polynomial solution for the generation process.
2 Multi
Usage Proof Nets 2.1 Proof Nets (Girard, 1987) introduced proof nets formalism as the natural deduction syntax for linear logic, also studied in (Retor6, 1993).
They represent proofs in linear logic with more accuracy than sequential proofs: on one hand they are more compact, on the other hand they identify unessentially different sequential proofs (for instance in the order of the rules introduction).
From a one-sided sequent and a sequential proof of it, we obtain a proof net by unfolding every formula as a tree (whose nodes are the binary connectives and the leaves are formulas, e.g. atomic ones) and linking together the formulas occurring in the same axiom rule of tile sequent calculus.
But proof nets have a more intrinsic definition that prevents us to come back every time to sequential proofs.
They can be defined as graphs with a certain property (i.e.
verifying a correctness criterion) such that every proof net with this property corresponds to a sequential proof and such that every proof net built from a sequential proof has this property.
So that we do not present the sequent calculus but only the proof net calculus.
In this paper, we do not consider all the proof nets, but a part of the multiplicative ones: those of the intuitionistic implicative linear logic.
In this case, sequents are made of several antecedent \[brmulas, but only one succedent formula.
To deal with tile intuitionistic notion with proof nets (since we consider one-sided sequents), we use the notion of polarities with the input (,: negative) and the output (o: positive) (Danos, 1990; Lamarche, 1995) to decorate formulas.
Positive ones correspond to succedent formulas and negative ones to antecedent formulas.
Given the links of table 1, we define proof structures as graphs made of these links such that: 1.
any premise of any link is connected to exactly one conclusion of some other link; 2.
any conclusion of any link is connected to at most one premise of some other link; 3.
input (resp.
output) premises are connected to input (resp.
output) conclusions of the same type.
Note that the two links for tile negative and positive implications correspond to the two connectives of the linear logic: Tensor and Par, so that we name these links after these latter connectives.
But in the following, only the graphical forms of the links play a role.
Proof nets are proof structures that respect the correctness criterion.
We mentioned the intrinsic definition of proof nets that enables the complete representation of sequential proofs.
Tile cut elimination property of sequent calculus also appears intrinsically in the proof net formalism with a sire"/1131 70 Table 1: Links Name Axiom Tensor Par Cut Link CI C2 ~ 2 C ~, g2 "'\l// C P,'cmises none t)1, P2 Pl, P2 Pl, P2 Conclusions cl, c2 c none C 1 :A + o,:APl :,4P2 : B + e : (A -o B)+ C Pl : A + P2 :/3c :(A ---0 B)-,,O I :AP2 :A+ Types Table 2: Cut-elimination rewriting rules x x y y i.........................
! ...............................
Y Y x x,l' 1 ./3 2 Y Yi Y2 Y xl x:) Yl Y2 L J pie rewriting process described in table 2 (in case of complex formulas as in the third rewriting rule, those rules can apply again on the result and propagate until reaching atoms).
2.2 Syntactic
Proof Nets Definitions of proof nets tbr Lambek calculus first appeared in (Roorda, 1991 ).
They naturally raised as Lambek calculus is an intuitionistic fragment of non commutative linar logic (with two linear implications: "'\" on the left and "/" on tile right), and the consequences on the proof net calculus we presented in section 2.1 are: . we get two tensor links: one for the formulas (B/A)(the one in table 1) and one lbr the formula (B\A)(just inverse the polarities of the premises).
And two par links : one for the lbrmula (A\B) + and one for (A/B) + (idem); • formulas in Lambek's sequents are ordered, so that conclusions of the proof nets are cyclically ordered and axiom links may not cross.
If T v is the set of basic types (e.g.
S, NP...
), the set T of syntactic types ~bllows T ::= ~\[T\T\[T/T.
Note that from a syntactic category, we can untbld the formula to obtain a graph which only lacks axiom links to become a proof structure.
So that the parsing process in this framework is, given the syntactic categories of the items and their order, to put non crossing axiom links such that the proof structure is a proof net.
It means there is a proof of .b' given types in a certain order.
For technical reasons, the order of the conclusions (i.e.
the types used) in the proof net to prove S is the reverse order of the words associated to these types.
As an example, with the lexicon of table 3, proving that John lives in Paris is a correct sentence leads to find axiom links between the atoms in the figure l(a).
Figure I(b) shows it actually happens and proves the syntactic correctness of the sentence.
Table 3: Lexicon lexical entry syntaxiccategory John NP Paris N P lives N P\,b' in (,S'\,S') / N P 2.3 Semantic Proof Nets In this section, we present how (de Groote and RetortL 1996) propose to use proof nets as semantic recipes.
As a slight difference with this work, we only deal in this paper with semantic recipes that correspond to linear Aterms in the Montague's semantics framework.
The idea of expressing the semantics with proof nets refers to the fact that both the A-terms (with the Curry-Howard isomorphism) and the proof nets represent prooS; of intuitionistic implicative linear logic.
And indeed, the linear A-terms may be encoded as proof nets.
On the other hand, given an intuitionistic implicative proof net, a simple algorithm (given in (de Groote and 71 .S'-,q'+ II<~---.io ~,5'.,¥~+ • .V P\], N Pi Paris in 1" " Ives John (a) Unfolding of the syntactic types o S+ Figure I: Parsing Rotor6, 1996), based on (Lamarche, 1995)'s dependency paths), wc can obtain a A-term.
Then, instead of associating a A-term to a \[exical entry, wc can associate a proof net.
For instance, on the semantic side, we can use the Montagovian types e and t and typed constants.
Of course, we want to keep the compositionalily principle of Montague's semantics that maps any syntactic association rule with a semantic association rule.
We express it in a straightforward way with the ft~llowing homomorphism (for as many basic categories as required): "H(.:VP) = e 7¢(A\B) = "K(A) ~ "H(B) "H(,~') = t "H(A/B) = "H(B) --o "H(A) And for a lexical item, given its syntactic type, we asSUlne its semantic proof net to verify: • the type of its unique output conclusion is the homomorplaic image of the syntactic type: • its input conclusions (if any) are decorated with typed constants.
An example of such a lexicon is given in table 4.
Figure 2: Syntactic proof net for John lives in Paris Let us illustrate the process on a short example.
We use the lexicon of table 4 to parse the sentence John lives in Paris.
The first thing is to define with the syntactic categories of the different lexical items the syntactic proof net of figure 2.
It provides the way we should compose the semantic recipes of each lexical item: we take its homomorphic image as in figure 4(a), and we substitute to every input its semantic definition with cut-links.
Then the cut-elimination on the resulting proof net gives a new proof net (on figure 4(b)) we can use as the semantic analysis of Jolm lives in Paris.
If necessary, we can come back to the A-term expression:(in p)(live j).
i (b) Matching the dual atoms to obtain a proof net of John lives in Paris 3 Generation: Stating the Problem Let us now consider the problem of generation.
We have a given semantic proof net (like the one in figure 4(b)) and we want to gather syntactic entries with axiom links such that: I.
this yields a correct (syntactic) proof net; 2.
the meaning of the resulting proof net matches the given semantic expression.
As we already said it, we assume that we have some lexical entries, and we try to make the generation with these entries, each one used once and only once.
Thus, if we define: * I/0 the semantic proof net of the expression we want to generate; * IIi the semantic proof nets associated to the given lexical entries i we use; * Ti the unfolding in proof structure of the syntactic formula of the lexical item i; • F the forest made of the syntactic trees of all the considered lexical entries plus the output (the type we want to derive).
The generation problem (see figure 5) is to find a matching M of atomic formulas of F such that: 1.
F endowed with M (let us call this proof structure F') is a correct proof net; 2.
when cut-linking H(F') with the Hi, and eliminating these cuts, we obtain H0.
This problem is not an original one: making proof search with proof nets always leads to look for matching between atomic formulas of opposite polarities.
So that an answer to this problem would consist in taking f' and try every possible matching.
This brute-force technique would of course appear essentially inefficient, and our purpose is to use everything we know to prune tile search domain.
Nevertheless, note that even with such an algorithm, we already reach the decidability (because the finitness of the number of the matchings) without making any assumption on the form of the semantic entries (neither on the order of the associated A-terms, nor the presence of a free variable).
And we want to keep these good properties in our algorithm.
72 Table 4: Lexicon lexical entry syntaxic category Jo h n N P Mary N P m Pa,is p Lives In Seeks XP mP\S (,5'\,s')/:vP (.VP'~,S')/(((NP\,S')/XP)\(Xp\,b')) associated A-term J Aa:.live x A~..A~/.(in .r).q A.r.(try(xfind)) semantic proof net IIjohn (cf.
figure 3(a)) \[IMary (cf.
figure 3(b)) IIPari s (cf.
figure 3(c)) \[Iliv¢ (cf.
figure 3(d)) gin (cf.
figure 3(e)) (cf.
figure 3(t)) (a) 1 ljohn,,i i 1 9,L<<%,p~+; i m <+~~nl~ -,,!o y 'W (b) (c) (d) Fllive (e) Flin FIMary 1-!.
Paris find i .........
<-1 \], 4 5 6 16 17,-_IY ),+ try (f) Hseek s Figure 3: Semantic proof nets of the lexicon of table 4 4 Cut-eliminationas Matrix Computation This section first establishes some equivalent relations between cut-elimination on proof nets and matrix equalions.
We then show how to use these equations in the generation process and how we can solve them.
It enables us to characterize the properties required by the semantic proof nets to have a polynomial resolution of the generation process.
4.1 Principles
First, as expressed in (Girard, 1989) and refornmlated in (Retord, 1990: Girard, 1993; Girard, 1995), we state the algebraic representation of cuFeliminalion on proof nets.
Due to lack of space, we can not develop it, but tile principle is to express cut-elimination between axioms with incidence matrices and paths in graphs.
Let us consider a proof net U.
We denote by (e i ) 1 < i<.~ all the vertices taking place for atoms in ft.
We can define U the incidence matrix of axiom links, cr the incidence matrix of cut links (we assume without loss of generality that they happen only between axiom links), and II the incidence matrix of axiom links of-ff where ~is the proof net resulting from all the cut eliminations on 73 1 llJohn It-t + L --• ...........................................................................................................
\[IParis 6iiii iii It (a) Before cut-elimination (b) After cut-elimination Figure 4: Semantic proof nets tor (in p)(live \]) Matching :11 !,,, Figure 5: The generation problem Then we have (Girard, 1989): I1 = (1 o.a)U(l + ~-"(o.U)k)(1o.
:') (1) 1 ~1 (e/~) )is U = Moreover, since(crU)isnilpotent,(l+ ~ ~ k inversible, and its inverse is (1 crU).
The next section make explicit the relation ( I ) with a special choice of the base (~ i ).
4.2 Matrix
Relation for Cut Elimination In tile problem we are dealing with, we know II and some of the axiom links in/~'.
Let us assume that Vi E \[1,p\], both ¢ i and 13(ei ) i are not cut-linked in L; (this assumption entails no loss of generality).
4.3 Expressing
the Reduction of U into II In this section, we want to give a relation equivalent to ( I ) which focuses on some axiom links we are interested in.
As mentioned in section 4.2, we can consider the (ei) such that in ~" : • Vi E \[1,p\], ei is not cut-linked (then, because of the hypothesis made in section 4.2, B(ei) is cutlinked); • '7'i E \[p+ 1.
p+ m\], ei is cut-linked but B(ei) is not cut-linked; • Vi E \[p + m + 1, p + 1~ + n\], both e.i and B(ei ) are cut-linked.
Note: Remember we assume that there is no axiom link such that both its conclusions are not cut-linked.
So p = III.
I B(e ) is the atom in \[7 such that there is an axiom link between e and BIe).
I cul -elilninal~,~n lit, I Then in this base, we express tile matrices (every axiom link of t--7 has at least one of its conclusion involved in a cut link): 0 Uj! 0 \] 6 \] 6 ..... 6 ro::oio~ o.= / ::ai il \[rl~:: o ::o \] n =/6i676ii LO:,O ioJ If we define A = (tUlII1 o.ltUl)(-rl and X = Uz(1 o'4U3) -1, we can state the theorem: Theorem 1 Let -U be a correct proof net reducing in Res(cr, U) after cut elimination.
These relations are equivalent: • Res(cr, U) = (1 o:-')U(1 o.U)-l(1 o "2) • ( tUlII1 o.1 tLil)U1 = o.=,~,h(1 o'4t'3) -1 to.._, • A = tcr,_Xcr'., arrd U3 = X -1 -~ 0"4.
Of course, all tire terms are defined.
We base the proof search algorithm corresponding to the generation process we are dealing with on this third relation, as explained in the next sections.
4.4 Solving
the Equations In this section (proof search oriented), we consider" that the axiom links we are looking for are those whose two conclusions are involved in cut links.
That is we want to complete U3.
As in the previous section we proceeded 74 by equivalence, solving the equation (1) correponds to solving the equation .4 = ¢r,.Y tcr._, (2) in .Y with X inversible.
Then, we have to solve (r3 : X-1 +0"4 such that tU3 = (ra and U a = 1.
Let 0"._, ¢ .~,,,,,,(1R), X = (xi,j) E A4,+(IR)and .1 E .XA,,(LR).
Let the two sequences 1 < it < ...
< i/ < m and 1 < Ji < ...
< j/ < m be such that with ((,, 6) ¢\[i,,1l\] × \[\[, ll\], Eab = (5iaSjb)i,jEtl,m\]x\[1,,1\] 2 <, : E,,j, : ),,+ I l In other words, 0.'-uj = 1 ca> Ell E \[1,1\] A i = i h A j = ill • Then l / cr.,X tcr.-_, = ( E EittJq ) * X * t( E Ei,.+j,.., ) /t=l /-,=1 l / = E E (aiill+t>JqJ+2OJila)l<-i'JSrn ll =1 lz=l It follows that ifA = (aij)i,j = o'2-'~-" to2 then V(11,12) E \[1,1\]'+',xj,,j,~ = aiqi,2.
(3) A consequence of this result is that if o4 = 0, then / = n and we determine X completely with relation (3), and then the same for Ua.
This configuration correspond to the fact that in the (given) semantic proof nets, no output contains the two conclusions of a same axiom link.
In this latter case, the computation is not so simple and should be mixed with word o,'der constraints.
5 Example
Let us process on an example the previous results.
We still use the lexicon of table 4, and we want to generate (if possible) a sentence whose meaning is given by the proof net of ligure 7: (try(find j))m.
We first need to associate every atom with all index (in the figures, we only indicate a number i beside the atom to express it is el).
Of course, we have to know how to recognize the ei that are the same in U (figure 6) and in 11 (figure 7).
This can be done by looking at the typed constants decorating the input conclusions (for the moment.
we don't have a general procedure in the complex cases).
We also assume in this numbering that we know which of the atoms in H(F) are linked to t + (the unique output).
In our case where 0.4 = 0, it is not a problem to, { lifi=j -5,j = Oifi# j make such a statement.
In other cases, tile complexity would increase polynomially.
Then, the given matrices are: "00010000 00001000 00100000 01000000 10000000 00000100 00000010 00000001 00000000 -00000000 00" 00 00 00 00 Hi= O0 O0 O0 10 O1 000010000~ 000100000 0000000010 0100000000 1000000000 0000000100 0000000001 0000010000 0010000000 00000100 0" 1 _~_ So 0000000000" 0000000000 0000000000 0000000000 0000000000 0000000100 0000000000 0000010000 0000000000 0000000000.
0" 2 = 0000100000010000 10000000 01000000 00100000 00000000 0O0O0100 00000000 00000010 00000001 .4 = (U-11II1 o" 1 tu1) tUll = 0001000000 0000100000 0000000010 1000000000 0100000000 0000000000 0000000001 0000000000 0010000000 -000000100 According to the definition of the (it) and tile (jr) families such that 0.2 = El El+j+, we have: ; 4 +2,o I 2 3 4 5 6 7 8 Then .1;5,2 -1 -al, 4 .1~3,4 -1 -a5, 2 ah:;,8 ~ 1 ~ a7,10 ./?2, 5 -= 1 --~ a4,1 ./.'i, 7 ~ 1 a3, 9 ;l~8, 6 ~-1 --~ alo,7 X4, 3 -= I = a2, 5 397,1 = 1 = ag, 3 and in this case 0"4 = 0, so according to tile preceeding notes .\ is completely determined and X = Ua = i ooooo il 000100~ 001000 010000 000000 oooooo C 000010 3 We can add this matching to the syntactic forest of figure 8(a) (do not forget that//3 represents the edges between ei with i E \[17,22\])and obtain on F the matching of figure 8(b).
75 ~L m B !i rl + % +\ i/ /" /" + \ \ / / "\ i; =~ i, / + t*'.
ec t"21 i,1 51 16 7 Y '"C : : try j m find Figure 7: Marking atoms on II 8 t + t! 22 23 24 25 ;~_~ 26 e+ t+ t~.--seeks e + 27 (a) The syntactic forest eJ~4m 28 e-~ t 4 Mao" 21 22 23 24 25 26 e i ~ 5 "1" seeks 27 ~ I 1 28 J~,hn Mary 8 t ÷ (b) The syntactic forest endowed with the matching described by Figure 8: Applying the matching on the syntactic forest We still have to ensure the correctness of this proof net (because we add all the tensor and par links), but it has a quadratic complexity (less than the matrix computation).
In this case, it is correct.
Note: • Actually, this only gives us the axiom links.
It still necessitates to compute the word order to have no crossing axiom link.
This can be done from the axiom links easier than quadratic time: it is a wellbracketing check.
Here, it is easy to see that putting 76 the John item on the left would achieve the result of Mary seeks John, • The choice of seeks and its high order type (for intcnsionnality) shows there is no limitation on the order of the A-term.
6 Conclusion
We took advantage of proof nets on the semantic point of view and we expressed the generation process as a guided proof search.
On top of keeping the decidability property of this framework, we characterized the semantic proof nets that enable a polynomial time process.
Such properties are crucial because it is the central part of the generation process (considering Lambek calculus).
But there are other things left to look at.
As the very next steps, we should work on the atoms numbering and the choice of the lexical items.
Appropriate interactions between word order contraints and matrix resolution in the hard case should also be considered.
Moreover, another point is to benefit from the power of linear logic and deal with non linear A-terms.
Finally. since different extensions of Lambek calculus based on proof nets (Moortgat, 1996; Lecomte and Retor6, 1995) have been considered, we hope our proposal and its good properties to apply to other linguistic approaches.
Acknowledgments I would like to thank Christian Retor6 who pointed out to me Girard's algebraic interpretation of the cut elimination.

